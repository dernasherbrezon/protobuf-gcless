// Generated by the protocol buffer gcless compiler.  DO NOT EDIT!
package com.x.protobuf;

import java.io.IOException;
public final class Bug3 {
private Bug3() {}
public static class B {
private String idString;
public static final int ID_STRING_FIELD_NUMBER = 1;
private boolean hasIdString;
public boolean hasIdString() {
return hasIdString;
}
public String getIdString() {
return idString;
}
public void setIdString(String IdString) {
this.idString = IdString;
this.hasIdString = true;
}
}
public static class BSerializer {
public static byte[] serialize(com.x.protobuf.Bug3.B message) {
try {
int totalSize = 0;
byte[] id_stringBuffer = null;
if (message.hasIdString()) {
id_stringBuffer = message.getIdString().getBytes("UTF-8");
totalSize += id_stringBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(id_stringBuffer.length);
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasIdString()) {
position = ProtobufOutputStream.writeString(1,id_stringBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(com.x.protobuf.Bug3.B message, java.io.OutputStream os) {
try {
if (message.hasIdString()) {
ProtobufOutputStream.writeString(1, message.getIdString(), os);
}
} catch (IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static com.x.protobuf.Bug3.B parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug3.B parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug3.B parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug3.B message = new com.x.protobuf.Bug3.B();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setIdString(ProtobufInputStream.readString(data,cursor));
break;
}
}
}
public static com.x.protobuf.Bug3.B parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug3.B parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug3.B parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug3.B message = new com.x.protobuf.Bug3.B();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setIdString(ProtobufInputStream.readString(is,cursor));
break;
}
}
}
}
public static class A {
private com.x.protobuf.Bug3.B entry;
public static final int ENTRY_FIELD_NUMBER = 32904;
private boolean hasEntry;
public boolean hasEntry() {
return hasEntry;
}
public com.x.protobuf.Bug3.B getEntry() {
return entry;
}
public void setEntry(com.x.protobuf.Bug3.B Entry) {
this.entry = Entry;
this.hasEntry = true;
}
}
public static class ASerializer {
public static byte[] serialize(com.x.protobuf.Bug3.A message) {
try {
int totalSize = 0;
byte[] entryBuffer = null;
if (message.hasEntry()) {
entryBuffer = com.x.protobuf.Bug3.BSerializer.serialize(message.getEntry());
totalSize += ProtobufOutputStream.computeTagSize(32904);
totalSize += ProtobufOutputStream.computeRawVarint32Size(entryBuffer.length);
totalSize += entryBuffer.length;
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasEntry()) {
position = ProtobufOutputStream.writeBytes(32904, entryBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(com.x.protobuf.Bug3.A message, java.io.OutputStream os) {
try {
if (message.hasEntry()) {
byte[] curMessageData = com.x.protobuf.Bug3.BSerializer.serialize(message.getEntry());
ProtobufOutputStream.writeMessageTag(32904, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
} catch (IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static com.x.protobuf.Bug3.A parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug3.A parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug3.A parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug3.A message = new com.x.protobuf.Bug3.A();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 32904: 
int lengthEntry = ProtobufInputStream.readRawVarint32(data,cursor);
message.setEntry(com.x.protobuf.Bug3.BSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthEntry));
cursor.addToPosition(lengthEntry);
break;
}
}
}
public static com.x.protobuf.Bug3.A parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug3.A parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug3.A parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug3.A message = new com.x.protobuf.Bug3.A();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 32904: 
int lengthEntry = ProtobufInputStream.readRawVarint32(is,cursor);
message.setEntry(com.x.protobuf.Bug3.BSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthEntry));
cursor.addToPosition(lengthEntry);
break;
}
}
}
}
}

