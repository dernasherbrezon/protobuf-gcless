// Generated by the protocol buffer gcless compiler.  DO NOT EDIT!
package com.x.protobuf;

import java.io.IOException;
public final class Bug7U {
private Bug7U() {}
public static class OldMessage {
private com.x.protobuf.Bug7U.OldMessage.OldTest oldtest;
private boolean hasOldtest;
public boolean hasOldtest() {
return hasOldtest;
}
public com.x.protobuf.Bug7U.OldMessage.OldTest getOldtest() {
return oldtest;
}
public void setOldtest(com.x.protobuf.Bug7U.OldMessage.OldTest Oldtest) {
this.oldtest = Oldtest;
this.hasOldtest = true;
}
private String value;
private boolean hasValue;
public boolean hasValue() {
return hasValue;
}
public String getValue() {
return value;
}
public void setValue(String Value) {
this.value = Value;
this.hasValue = true;
}
public static class OldTest {
private String test;
private boolean hasTest;
public boolean hasTest() {
return hasTest;
}
public String getTest() {
return test;
}
public void setTest(String Test) {
this.test = Test;
this.hasTest = true;
}
}
public static class OldTestSerializer {
public static byte[] serialize(com.x.protobuf.Bug7U.OldMessage.OldTest message) {
try {
assertInitialized(message);
int totalSize = 0;
byte[] testBuffer = null;
if (message.hasTest()) {
testBuffer = message.getTest().getBytes("UTF-8");
totalSize += testBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(testBuffer.length);
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasTest()) {
position = ProtobufOutputStream.writeString(1,testBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(com.x.protobuf.Bug7U.OldMessage.OldTest message, java.io.OutputStream os) {
try {
assertInitialized(message);
if (message.hasTest()) {
ProtobufOutputStream.writeString(1, message.getTest(), os);
}
} catch (IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static com.x.protobuf.Bug7U.OldMessage.OldTest parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug7U.OldMessage.OldTest parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug7U.OldMessage.OldTest parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug7U.OldMessage.OldTest message = new com.x.protobuf.Bug7U.OldMessage.OldTest();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setTest(ProtobufInputStream.readString(data,cursor));
break;
}
}
}
public static com.x.protobuf.Bug7U.OldMessage.OldTest parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug7U.OldMessage.OldTest parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug7U.OldMessage.OldTest parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug7U.OldMessage.OldTest message = new com.x.protobuf.Bug7U.OldMessage.OldTest();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setTest(ProtobufInputStream.readString(is,cursor));
break;
}
}
}
private static void assertInitialized(com.x.protobuf.Bug7U.OldMessage.OldTest message) {
if( !message.hasTest()) {
throw new IllegalArgumentException("Required field not initialized: test");
}
}
}
}
public static class OldMessageSerializer {
public static byte[] serialize(com.x.protobuf.Bug7U.OldMessage message) {
try {
int totalSize = 0;
byte[] oldtestBuffer = null;
if (message.hasOldtest()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
ProtobufOutputStream.writeTag(1, ProtobufInputStream.WIRETYPE_GROUP_START, baos);
baos.write(com.x.protobuf.Bug7U.OldMessage.OldTestSerializer.serialize(message.getOldtest()));
ProtobufOutputStream.writeTag(1, ProtobufInputStream.WIRETYPE_GROUP_END, baos);
oldtestBuffer = baos.toByteArray();
totalSize += oldtestBuffer.length;
}
byte[] valueBuffer = null;
if (message.hasValue()) {
valueBuffer = message.getValue().getBytes("UTF-8");
totalSize += valueBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(2);
totalSize += ProtobufOutputStream.computeRawVarint32Size(valueBuffer.length);
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasOldtest()) {
position = ProtobufOutputStream.writeRawBytes(oldtestBuffer, result, position);
}
if (message.hasValue()) {
position = ProtobufOutputStream.writeString(2,valueBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(com.x.protobuf.Bug7U.OldMessage message, java.io.OutputStream os) {
try {
if (message.hasOldtest()) {
ProtobufOutputStream.writeTag(1, ProtobufInputStream.WIRETYPE_GROUP_START, os);
os.write(com.x.protobuf.Bug7U.OldMessage.OldTestSerializer.serialize(message.getOldtest()));
ProtobufOutputStream.writeTag(1, ProtobufInputStream.WIRETYPE_GROUP_END, os);
}
if (message.hasValue()) {
ProtobufOutputStream.writeString(2, message.getValue(), os);
}
} catch (IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static com.x.protobuf.Bug7U.OldMessage parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug7U.OldMessage parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug7U.OldMessage parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug7U.OldMessage message = new com.x.protobuf.Bug7U.OldMessage();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
com.x.protobuf.Bug7U.OldMessage.OldTest tempOldtest = com.x.protobuf.Bug7U.OldMessage.OldTestSerializer.parseFrom(data, cursor);
message.setOldtest(tempOldtest);
break;
case 2: 
message.setValue(ProtobufInputStream.readString(data,cursor));
break;
}
}
}
public static com.x.protobuf.Bug7U.OldMessage parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug7U.OldMessage parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug7U.OldMessage parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug7U.OldMessage message = new com.x.protobuf.Bug7U.OldMessage();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
com.x.protobuf.Bug7U.OldMessage.OldTest tempOldtest = com.x.protobuf.Bug7U.OldMessage.OldTestSerializer.parseFrom(is, cursor);
message.setOldtest(tempOldtest);
break;
case 2: 
message.setValue(ProtobufInputStream.readString(is,cursor));
break;
}
}
}
}
public static class NewMessage {
private com.x.protobuf.Bug7U.NewMessage.NewTest newtest;
private boolean hasNewtest;
public boolean hasNewtest() {
return hasNewtest;
}
public com.x.protobuf.Bug7U.NewMessage.NewTest getNewtest() {
return newtest;
}
public void setNewtest(com.x.protobuf.Bug7U.NewMessage.NewTest Newtest) {
this.newtest = Newtest;
this.hasNewtest = true;
}
private String value;
private boolean hasValue;
public boolean hasValue() {
return hasValue;
}
public String getValue() {
return value;
}
public void setValue(String Value) {
this.value = Value;
this.hasValue = true;
}
public static class NewTest {
private String test;
private boolean hasTest;
public boolean hasTest() {
return hasTest;
}
public String getTest() {
return test;
}
public void setTest(String Test) {
this.test = Test;
this.hasTest = true;
}
private String value;
private boolean hasValue;
public boolean hasValue() {
return hasValue;
}
public String getValue() {
return value;
}
public void setValue(String Value) {
this.value = Value;
this.hasValue = true;
}
}
public static class NewTestSerializer {
public static byte[] serialize(com.x.protobuf.Bug7U.NewMessage.NewTest message) {
try {
assertInitialized(message);
int totalSize = 0;
byte[] testBuffer = null;
if (message.hasTest()) {
testBuffer = message.getTest().getBytes("UTF-8");
totalSize += testBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(testBuffer.length);
}
byte[] valueBuffer = null;
if (message.hasValue()) {
valueBuffer = message.getValue().getBytes("UTF-8");
totalSize += valueBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(2);
totalSize += ProtobufOutputStream.computeRawVarint32Size(valueBuffer.length);
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasTest()) {
position = ProtobufOutputStream.writeString(1,testBuffer, result, position);
}
if (message.hasValue()) {
position = ProtobufOutputStream.writeString(2,valueBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(com.x.protobuf.Bug7U.NewMessage.NewTest message, java.io.OutputStream os) {
try {
assertInitialized(message);
if (message.hasTest()) {
ProtobufOutputStream.writeString(1, message.getTest(), os);
}
if (message.hasValue()) {
ProtobufOutputStream.writeString(2, message.getValue(), os);
}
} catch (IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static com.x.protobuf.Bug7U.NewMessage.NewTest parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug7U.NewMessage.NewTest parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug7U.NewMessage.NewTest parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug7U.NewMessage.NewTest message = new com.x.protobuf.Bug7U.NewMessage.NewTest();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setTest(ProtobufInputStream.readString(data,cursor));
break;
case 2: 
message.setValue(ProtobufInputStream.readString(data,cursor));
break;
}
}
}
public static com.x.protobuf.Bug7U.NewMessage.NewTest parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug7U.NewMessage.NewTest parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug7U.NewMessage.NewTest parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug7U.NewMessage.NewTest message = new com.x.protobuf.Bug7U.NewMessage.NewTest();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setTest(ProtobufInputStream.readString(is,cursor));
break;
case 2: 
message.setValue(ProtobufInputStream.readString(is,cursor));
break;
}
}
}
private static void assertInitialized(com.x.protobuf.Bug7U.NewMessage.NewTest message) {
if( !message.hasTest()) {
throw new IllegalArgumentException("Required field not initialized: test");
}
if( !message.hasValue()) {
throw new IllegalArgumentException("Required field not initialized: value");
}
}
}
}
public static class NewMessageSerializer {
public static byte[] serialize(com.x.protobuf.Bug7U.NewMessage message) {
try {
int totalSize = 0;
byte[] newtestBuffer = null;
if (message.hasNewtest()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
ProtobufOutputStream.writeTag(1, ProtobufInputStream.WIRETYPE_GROUP_START, baos);
baos.write(com.x.protobuf.Bug7U.NewMessage.NewTestSerializer.serialize(message.getNewtest()));
ProtobufOutputStream.writeTag(1, ProtobufInputStream.WIRETYPE_GROUP_END, baos);
newtestBuffer = baos.toByteArray();
totalSize += newtestBuffer.length;
}
byte[] valueBuffer = null;
if (message.hasValue()) {
valueBuffer = message.getValue().getBytes("UTF-8");
totalSize += valueBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(2);
totalSize += ProtobufOutputStream.computeRawVarint32Size(valueBuffer.length);
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasNewtest()) {
position = ProtobufOutputStream.writeRawBytes(newtestBuffer, result, position);
}
if (message.hasValue()) {
position = ProtobufOutputStream.writeString(2,valueBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(com.x.protobuf.Bug7U.NewMessage message, java.io.OutputStream os) {
try {
if (message.hasNewtest()) {
ProtobufOutputStream.writeTag(1, ProtobufInputStream.WIRETYPE_GROUP_START, os);
os.write(com.x.protobuf.Bug7U.NewMessage.NewTestSerializer.serialize(message.getNewtest()));
ProtobufOutputStream.writeTag(1, ProtobufInputStream.WIRETYPE_GROUP_END, os);
}
if (message.hasValue()) {
ProtobufOutputStream.writeString(2, message.getValue(), os);
}
} catch (IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static com.x.protobuf.Bug7U.NewMessage parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug7U.NewMessage parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug7U.NewMessage parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug7U.NewMessage message = new com.x.protobuf.Bug7U.NewMessage();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
com.x.protobuf.Bug7U.NewMessage.NewTest tempNewtest = com.x.protobuf.Bug7U.NewMessage.NewTestSerializer.parseFrom(data, cursor);
message.setNewtest(tempNewtest);
break;
case 2: 
message.setValue(ProtobufInputStream.readString(data,cursor));
break;
}
}
}
public static com.x.protobuf.Bug7U.NewMessage parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug7U.NewMessage parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug7U.NewMessage parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug7U.NewMessage message = new com.x.protobuf.Bug7U.NewMessage();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
com.x.protobuf.Bug7U.NewMessage.NewTest tempNewtest = com.x.protobuf.Bug7U.NewMessage.NewTestSerializer.parseFrom(is, cursor);
message.setNewtest(tempNewtest);
break;
case 2: 
message.setValue(ProtobufInputStream.readString(is,cursor));
break;
}
}
}
}
}

