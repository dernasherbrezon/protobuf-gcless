// Generated by the protocol buffer gcless compiler.  DO NOT EDIT!
package com.x.protobuf;

import java.io.IOException;
public final class Bug12 {
private Bug12() {}
public static class Message {
private com.x.protobuf.Bug12.Message.PassphraseType passphraseType;
private boolean hasPassphraseType;
public boolean hasPassphraseType() {
return hasPassphraseType;
}
public com.x.protobuf.Bug12.Message.PassphraseType getPassphraseType() {
return passphraseType;
}
public void setPassphraseType(com.x.protobuf.Bug12.Message.PassphraseType PassphraseType) {
this.passphraseType = PassphraseType;
this.hasPassphraseType = true;
}
public enum PassphraseType {
IMPLICIT_PASSPHRASE(1),
KEYSTORE_PASSPHRASE(2),
FROZEN_IMPLICIT_PASSPHRASE(3),
CUSTOM_PASSPHRASE(4),
;
public static PassphraseType valueOf(int value) {
switch (value) {
case 1: return IMPLICIT_PASSPHRASE;
case 2: return KEYSTORE_PASSPHRASE;
case 3: return FROZEN_IMPLICIT_PASSPHRASE;
case 4: return CUSTOM_PASSPHRASE;
default: return null;
}
}
private PassphraseType(int value) {
this.value = value;
}
private int value;
public int getValue() {
return value;
}
}

}
public static class MessageSerializer {
public static byte[] serialize(com.x.protobuf.Bug12.Message message) {
try {
int totalSize = 0;
if (message.hasPassphraseType()) {
totalSize += ProtobufOutputStream.computeEnumSize(30, message.getPassphraseType().getValue());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasPassphraseType()) {
position = ProtobufOutputStream.writeEnum(30, message.getPassphraseType().getValue(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(com.x.protobuf.Bug12.Message message, java.io.OutputStream os) {
try {
if (message.hasPassphraseType()) {
ProtobufOutputStream.writeEnum(30, message.getPassphraseType().getValue(), os);
}
} catch (IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static com.x.protobuf.Bug12.Message parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug12.Message parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static com.x.protobuf.Bug12.Message parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug12.Message message = new com.x.protobuf.Bug12.Message();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 30: 
message.setPassphraseType(com.x.protobuf.Bug12.Message.PassphraseType.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
}
}
}
public static com.x.protobuf.Bug12.Message parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug12.Message parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static com.x.protobuf.Bug12.Message parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
com.x.protobuf.Bug12.Message message = new com.x.protobuf.Bug12.Message();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 30: 
message.setPassphraseType(com.x.protobuf.Bug12.Message.PassphraseType.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
}
}
}
}
}

