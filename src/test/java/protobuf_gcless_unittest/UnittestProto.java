// Generated by the protocol buffer gcless compiler.  DO NOT EDIT!
package protobuf_gcless_unittest;

public final class UnittestProto {
private UnittestProto() {}
public enum ForeignEnum {
FOREIGN_FOO(4),
FOREIGN_BAR(5),
FOREIGN_BAZ(6),
;
public static ForeignEnum valueOf(int value) {
switch (value) {
case 4: return FOREIGN_FOO;
case 5: return FOREIGN_BAR;
case 6: return FOREIGN_BAZ;
default: return null;
}
}
private ForeignEnum(int value) {
this.value = value;
}
private int value;
public int getValue() {
return value;
}
}

public enum TestEnumWithDupValue {
FOO1(1),
BAR1(2),
BAZ(3),
;
public static final TestEnumWithDupValue FOO2 = FOO1;
public static final TestEnumWithDupValue BAR2 = BAR1;
public static TestEnumWithDupValue valueOf(int value) {
switch (value) {
case 3: return BAZ;
default: return null;
}
}
private TestEnumWithDupValue(int value) {
this.value = value;
}
private int value;
public int getValue() {
return value;
}
}

public enum TestSparseEnum {
SPARSE_A(123),
SPARSE_B(62374),
SPARSE_C(12589234),
SPARSE_D(-15),
SPARSE_E(-53452),
SPARSE_F(0),
SPARSE_G(2),
;
public static TestSparseEnum valueOf(int value) {
switch (value) {
case 123: return SPARSE_A;
case 62374: return SPARSE_B;
case 12589234: return SPARSE_C;
case -15: return SPARSE_D;
case -53452: return SPARSE_E;
case 0: return SPARSE_F;
case 2: return SPARSE_G;
default: return null;
}
}
private TestSparseEnum(int value) {
this.value = value;
}
private int value;
public int getValue() {
return value;
}
}

public static class TestAllTypes {
private int optionalInt32;
private boolean hasOptionalInt32;
public boolean hasOptionalInt32() {
return hasOptionalInt32;
}
public int getOptionalInt32() {
return optionalInt32;
}
public void setOptionalInt32(int OptionalInt32) {
this.optionalInt32 = OptionalInt32;
this.hasOptionalInt32 = true;
}
private long optionalInt64;
private boolean hasOptionalInt64;
public boolean hasOptionalInt64() {
return hasOptionalInt64;
}
public long getOptionalInt64() {
return optionalInt64;
}
public void setOptionalInt64(long OptionalInt64) {
this.optionalInt64 = OptionalInt64;
this.hasOptionalInt64 = true;
}
private int optionalUint32;
private boolean hasOptionalUint32;
public boolean hasOptionalUint32() {
return hasOptionalUint32;
}
public int getOptionalUint32() {
return optionalUint32;
}
public void setOptionalUint32(int OptionalUint32) {
this.optionalUint32 = OptionalUint32;
this.hasOptionalUint32 = true;
}
private long optionalUint64;
private boolean hasOptionalUint64;
public boolean hasOptionalUint64() {
return hasOptionalUint64;
}
public long getOptionalUint64() {
return optionalUint64;
}
public void setOptionalUint64(long OptionalUint64) {
this.optionalUint64 = OptionalUint64;
this.hasOptionalUint64 = true;
}
private int optionalSint32;
private boolean hasOptionalSint32;
public boolean hasOptionalSint32() {
return hasOptionalSint32;
}
public int getOptionalSint32() {
return optionalSint32;
}
public void setOptionalSint32(int OptionalSint32) {
this.optionalSint32 = OptionalSint32;
this.hasOptionalSint32 = true;
}
private long optionalSint64;
private boolean hasOptionalSint64;
public boolean hasOptionalSint64() {
return hasOptionalSint64;
}
public long getOptionalSint64() {
return optionalSint64;
}
public void setOptionalSint64(long OptionalSint64) {
this.optionalSint64 = OptionalSint64;
this.hasOptionalSint64 = true;
}
private int optionalFixed32;
private boolean hasOptionalFixed32;
public boolean hasOptionalFixed32() {
return hasOptionalFixed32;
}
public int getOptionalFixed32() {
return optionalFixed32;
}
public void setOptionalFixed32(int OptionalFixed32) {
this.optionalFixed32 = OptionalFixed32;
this.hasOptionalFixed32 = true;
}
private long optionalFixed64;
private boolean hasOptionalFixed64;
public boolean hasOptionalFixed64() {
return hasOptionalFixed64;
}
public long getOptionalFixed64() {
return optionalFixed64;
}
public void setOptionalFixed64(long OptionalFixed64) {
this.optionalFixed64 = OptionalFixed64;
this.hasOptionalFixed64 = true;
}
private int optionalSfixed32;
private boolean hasOptionalSfixed32;
public boolean hasOptionalSfixed32() {
return hasOptionalSfixed32;
}
public int getOptionalSfixed32() {
return optionalSfixed32;
}
public void setOptionalSfixed32(int OptionalSfixed32) {
this.optionalSfixed32 = OptionalSfixed32;
this.hasOptionalSfixed32 = true;
}
private long optionalSfixed64;
private boolean hasOptionalSfixed64;
public boolean hasOptionalSfixed64() {
return hasOptionalSfixed64;
}
public long getOptionalSfixed64() {
return optionalSfixed64;
}
public void setOptionalSfixed64(long OptionalSfixed64) {
this.optionalSfixed64 = OptionalSfixed64;
this.hasOptionalSfixed64 = true;
}
private float optionalFloat;
private boolean hasOptionalFloat;
public boolean hasOptionalFloat() {
return hasOptionalFloat;
}
public float getOptionalFloat() {
return optionalFloat;
}
public void setOptionalFloat(float OptionalFloat) {
this.optionalFloat = OptionalFloat;
this.hasOptionalFloat = true;
}
private double optionalDouble;
private boolean hasOptionalDouble;
public boolean hasOptionalDouble() {
return hasOptionalDouble;
}
public double getOptionalDouble() {
return optionalDouble;
}
public void setOptionalDouble(double OptionalDouble) {
this.optionalDouble = OptionalDouble;
this.hasOptionalDouble = true;
}
private boolean optionalBool;
private boolean hasOptionalBool;
public boolean hasOptionalBool() {
return hasOptionalBool;
}
public boolean getOptionalBool() {
return optionalBool;
}
public void setOptionalBool(boolean OptionalBool) {
this.optionalBool = OptionalBool;
this.hasOptionalBool = true;
}
private String optionalString;
private boolean hasOptionalString;
public boolean hasOptionalString() {
return hasOptionalString;
}
public String getOptionalString() {
return optionalString;
}
public void setOptionalString(String OptionalString) {
this.optionalString = OptionalString;
this.hasOptionalString = true;
}
private byte[] optionalBytes;
private boolean hasOptionalBytes;
public boolean hasOptionalBytes() {
return hasOptionalBytes;
}
public byte[] getOptionalBytes() {
return optionalBytes;
}
public void setOptionalBytes(byte[] OptionalBytes) {
this.optionalBytes = OptionalBytes;
this.hasOptionalBytes = true;
}
private protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup optionalgroup;
private boolean hasOptionalgroup;
public boolean hasOptionalgroup() {
return hasOptionalgroup;
}
public protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup getOptionalgroup() {
return optionalgroup;
}
public void setOptionalgroup(protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup Optionalgroup) {
this.optionalgroup = Optionalgroup;
this.hasOptionalgroup = true;
}
private protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage optionalNestedMessage;
private boolean hasOptionalNestedMessage;
public boolean hasOptionalNestedMessage() {
return hasOptionalNestedMessage;
}
public protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage getOptionalNestedMessage() {
return optionalNestedMessage;
}
public void setOptionalNestedMessage(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage OptionalNestedMessage) {
this.optionalNestedMessage = OptionalNestedMessage;
this.hasOptionalNestedMessage = true;
}
private protobuf_gcless_unittest.UnittestProto.ForeignMessage optionalForeignMessage;
private boolean hasOptionalForeignMessage;
public boolean hasOptionalForeignMessage() {
return hasOptionalForeignMessage;
}
public protobuf_gcless_unittest.UnittestProto.ForeignMessage getOptionalForeignMessage() {
return optionalForeignMessage;
}
public void setOptionalForeignMessage(protobuf_gcless_unittest.UnittestProto.ForeignMessage OptionalForeignMessage) {
this.optionalForeignMessage = OptionalForeignMessage;
this.hasOptionalForeignMessage = true;
}
private protobuf_gcless_import.ImportMessage optionalImportMessage;
private boolean hasOptionalImportMessage;
public boolean hasOptionalImportMessage() {
return hasOptionalImportMessage;
}
public protobuf_gcless_import.ImportMessage getOptionalImportMessage() {
return optionalImportMessage;
}
public void setOptionalImportMessage(protobuf_gcless_import.ImportMessage OptionalImportMessage) {
this.optionalImportMessage = OptionalImportMessage;
this.hasOptionalImportMessage = true;
}
private protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum optionalNestedEnum;
private boolean hasOptionalNestedEnum;
public boolean hasOptionalNestedEnum() {
return hasOptionalNestedEnum;
}
public protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum getOptionalNestedEnum() {
return optionalNestedEnum;
}
public void setOptionalNestedEnum(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum OptionalNestedEnum) {
this.optionalNestedEnum = OptionalNestedEnum;
this.hasOptionalNestedEnum = true;
}
private protobuf_gcless_unittest.UnittestProto.ForeignEnum optionalForeignEnum;
private boolean hasOptionalForeignEnum;
public boolean hasOptionalForeignEnum() {
return hasOptionalForeignEnum;
}
public protobuf_gcless_unittest.UnittestProto.ForeignEnum getOptionalForeignEnum() {
return optionalForeignEnum;
}
public void setOptionalForeignEnum(protobuf_gcless_unittest.UnittestProto.ForeignEnum OptionalForeignEnum) {
this.optionalForeignEnum = OptionalForeignEnum;
this.hasOptionalForeignEnum = true;
}
private protobuf_gcless_import.ImportEnum optionalImportEnum;
private boolean hasOptionalImportEnum;
public boolean hasOptionalImportEnum() {
return hasOptionalImportEnum;
}
public protobuf_gcless_import.ImportEnum getOptionalImportEnum() {
return optionalImportEnum;
}
public void setOptionalImportEnum(protobuf_gcless_import.ImportEnum OptionalImportEnum) {
this.optionalImportEnum = OptionalImportEnum;
this.hasOptionalImportEnum = true;
}
private String optionalStringPiece;
private boolean hasOptionalStringPiece;
public boolean hasOptionalStringPiece() {
return hasOptionalStringPiece;
}
public String getOptionalStringPiece() {
return optionalStringPiece;
}
public void setOptionalStringPiece(String OptionalStringPiece) {
this.optionalStringPiece = OptionalStringPiece;
this.hasOptionalStringPiece = true;
}
private String optionalCord;
private boolean hasOptionalCord;
public boolean hasOptionalCord() {
return hasOptionalCord;
}
public String getOptionalCord() {
return optionalCord;
}
public void setOptionalCord(String OptionalCord) {
this.optionalCord = OptionalCord;
this.hasOptionalCord = true;
}
private java.util.List<Integer> repeatedInt32;
private boolean hasRepeatedInt32;
public boolean hasRepeatedInt32() {
return hasRepeatedInt32;
}
public java.util.List<Integer> getRepeatedInt32() {
return repeatedInt32;
}
public void setRepeatedInt32(java.util.List<Integer> RepeatedInt32) {
this.repeatedInt32 = RepeatedInt32;
this.hasRepeatedInt32 = true;
}
private java.util.List<Long> repeatedInt64;
private boolean hasRepeatedInt64;
public boolean hasRepeatedInt64() {
return hasRepeatedInt64;
}
public java.util.List<Long> getRepeatedInt64() {
return repeatedInt64;
}
public void setRepeatedInt64(java.util.List<Long> RepeatedInt64) {
this.repeatedInt64 = RepeatedInt64;
this.hasRepeatedInt64 = true;
}
private java.util.List<Integer> repeatedUint32;
private boolean hasRepeatedUint32;
public boolean hasRepeatedUint32() {
return hasRepeatedUint32;
}
public java.util.List<Integer> getRepeatedUint32() {
return repeatedUint32;
}
public void setRepeatedUint32(java.util.List<Integer> RepeatedUint32) {
this.repeatedUint32 = RepeatedUint32;
this.hasRepeatedUint32 = true;
}
private java.util.List<Long> repeatedUint64;
private boolean hasRepeatedUint64;
public boolean hasRepeatedUint64() {
return hasRepeatedUint64;
}
public java.util.List<Long> getRepeatedUint64() {
return repeatedUint64;
}
public void setRepeatedUint64(java.util.List<Long> RepeatedUint64) {
this.repeatedUint64 = RepeatedUint64;
this.hasRepeatedUint64 = true;
}
private java.util.List<Integer> repeatedSint32;
private boolean hasRepeatedSint32;
public boolean hasRepeatedSint32() {
return hasRepeatedSint32;
}
public java.util.List<Integer> getRepeatedSint32() {
return repeatedSint32;
}
public void setRepeatedSint32(java.util.List<Integer> RepeatedSint32) {
this.repeatedSint32 = RepeatedSint32;
this.hasRepeatedSint32 = true;
}
private java.util.List<Long> repeatedSint64;
private boolean hasRepeatedSint64;
public boolean hasRepeatedSint64() {
return hasRepeatedSint64;
}
public java.util.List<Long> getRepeatedSint64() {
return repeatedSint64;
}
public void setRepeatedSint64(java.util.List<Long> RepeatedSint64) {
this.repeatedSint64 = RepeatedSint64;
this.hasRepeatedSint64 = true;
}
private java.util.List<Integer> repeatedFixed32;
private boolean hasRepeatedFixed32;
public boolean hasRepeatedFixed32() {
return hasRepeatedFixed32;
}
public java.util.List<Integer> getRepeatedFixed32() {
return repeatedFixed32;
}
public void setRepeatedFixed32(java.util.List<Integer> RepeatedFixed32) {
this.repeatedFixed32 = RepeatedFixed32;
this.hasRepeatedFixed32 = true;
}
private java.util.List<Long> repeatedFixed64;
private boolean hasRepeatedFixed64;
public boolean hasRepeatedFixed64() {
return hasRepeatedFixed64;
}
public java.util.List<Long> getRepeatedFixed64() {
return repeatedFixed64;
}
public void setRepeatedFixed64(java.util.List<Long> RepeatedFixed64) {
this.repeatedFixed64 = RepeatedFixed64;
this.hasRepeatedFixed64 = true;
}
private java.util.List<Integer> repeatedSfixed32;
private boolean hasRepeatedSfixed32;
public boolean hasRepeatedSfixed32() {
return hasRepeatedSfixed32;
}
public java.util.List<Integer> getRepeatedSfixed32() {
return repeatedSfixed32;
}
public void setRepeatedSfixed32(java.util.List<Integer> RepeatedSfixed32) {
this.repeatedSfixed32 = RepeatedSfixed32;
this.hasRepeatedSfixed32 = true;
}
private java.util.List<Long> repeatedSfixed64;
private boolean hasRepeatedSfixed64;
public boolean hasRepeatedSfixed64() {
return hasRepeatedSfixed64;
}
public java.util.List<Long> getRepeatedSfixed64() {
return repeatedSfixed64;
}
public void setRepeatedSfixed64(java.util.List<Long> RepeatedSfixed64) {
this.repeatedSfixed64 = RepeatedSfixed64;
this.hasRepeatedSfixed64 = true;
}
private java.util.List<Float> repeatedFloat;
private boolean hasRepeatedFloat;
public boolean hasRepeatedFloat() {
return hasRepeatedFloat;
}
public java.util.List<Float> getRepeatedFloat() {
return repeatedFloat;
}
public void setRepeatedFloat(java.util.List<Float> RepeatedFloat) {
this.repeatedFloat = RepeatedFloat;
this.hasRepeatedFloat = true;
}
private java.util.List<Double> repeatedDouble;
private boolean hasRepeatedDouble;
public boolean hasRepeatedDouble() {
return hasRepeatedDouble;
}
public java.util.List<Double> getRepeatedDouble() {
return repeatedDouble;
}
public void setRepeatedDouble(java.util.List<Double> RepeatedDouble) {
this.repeatedDouble = RepeatedDouble;
this.hasRepeatedDouble = true;
}
private java.util.List<Boolean> repeatedBool;
private boolean hasRepeatedBool;
public boolean hasRepeatedBool() {
return hasRepeatedBool;
}
public java.util.List<Boolean> getRepeatedBool() {
return repeatedBool;
}
public void setRepeatedBool(java.util.List<Boolean> RepeatedBool) {
this.repeatedBool = RepeatedBool;
this.hasRepeatedBool = true;
}
private java.util.List<String> repeatedString;
private boolean hasRepeatedString;
public boolean hasRepeatedString() {
return hasRepeatedString;
}
public java.util.List<String> getRepeatedString() {
return repeatedString;
}
public void setRepeatedString(java.util.List<String> RepeatedString) {
this.repeatedString = RepeatedString;
this.hasRepeatedString = true;
}
private byte[] repeatedBytes;
private boolean hasRepeatedBytes;
public boolean hasRepeatedBytes() {
return hasRepeatedBytes;
}
public byte[] getRepeatedBytes() {
return repeatedBytes;
}
public void setRepeatedBytes(byte[] RepeatedBytes) {
this.repeatedBytes = RepeatedBytes;
this.hasRepeatedBytes = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup> repeatedgroup;
private boolean hasRepeatedgroup;
public boolean hasRepeatedgroup() {
return hasRepeatedgroup;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup> getRepeatedgroup() {
return repeatedgroup;
}
public void setRepeatedgroup(java.util.List<protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup> Repeatedgroup) {
this.repeatedgroup = Repeatedgroup;
this.hasRepeatedgroup = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage> repeatedNestedMessage;
private boolean hasRepeatedNestedMessage;
public boolean hasRepeatedNestedMessage() {
return hasRepeatedNestedMessage;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage> getRepeatedNestedMessage() {
return repeatedNestedMessage;
}
public void setRepeatedNestedMessage(java.util.List<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage> RepeatedNestedMessage) {
this.repeatedNestedMessage = RepeatedNestedMessage;
this.hasRepeatedNestedMessage = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignMessage> repeatedForeignMessage;
private boolean hasRepeatedForeignMessage;
public boolean hasRepeatedForeignMessage() {
return hasRepeatedForeignMessage;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignMessage> getRepeatedForeignMessage() {
return repeatedForeignMessage;
}
public void setRepeatedForeignMessage(java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignMessage> RepeatedForeignMessage) {
this.repeatedForeignMessage = RepeatedForeignMessage;
this.hasRepeatedForeignMessage = true;
}
private java.util.List<protobuf_gcless_import.ImportMessage> repeatedImportMessage;
private boolean hasRepeatedImportMessage;
public boolean hasRepeatedImportMessage() {
return hasRepeatedImportMessage;
}
public java.util.List<protobuf_gcless_import.ImportMessage> getRepeatedImportMessage() {
return repeatedImportMessage;
}
public void setRepeatedImportMessage(java.util.List<protobuf_gcless_import.ImportMessage> RepeatedImportMessage) {
this.repeatedImportMessage = RepeatedImportMessage;
this.hasRepeatedImportMessage = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum> repeatedNestedEnum;
private boolean hasRepeatedNestedEnum;
public boolean hasRepeatedNestedEnum() {
return hasRepeatedNestedEnum;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum> getRepeatedNestedEnum() {
return repeatedNestedEnum;
}
public void setRepeatedNestedEnum(java.util.List<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum> RepeatedNestedEnum) {
this.repeatedNestedEnum = RepeatedNestedEnum;
this.hasRepeatedNestedEnum = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> repeatedForeignEnum;
private boolean hasRepeatedForeignEnum;
public boolean hasRepeatedForeignEnum() {
return hasRepeatedForeignEnum;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> getRepeatedForeignEnum() {
return repeatedForeignEnum;
}
public void setRepeatedForeignEnum(java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> RepeatedForeignEnum) {
this.repeatedForeignEnum = RepeatedForeignEnum;
this.hasRepeatedForeignEnum = true;
}
private java.util.List<protobuf_gcless_import.ImportEnum> repeatedImportEnum;
private boolean hasRepeatedImportEnum;
public boolean hasRepeatedImportEnum() {
return hasRepeatedImportEnum;
}
public java.util.List<protobuf_gcless_import.ImportEnum> getRepeatedImportEnum() {
return repeatedImportEnum;
}
public void setRepeatedImportEnum(java.util.List<protobuf_gcless_import.ImportEnum> RepeatedImportEnum) {
this.repeatedImportEnum = RepeatedImportEnum;
this.hasRepeatedImportEnum = true;
}
private java.util.List<String> repeatedStringPiece;
private boolean hasRepeatedStringPiece;
public boolean hasRepeatedStringPiece() {
return hasRepeatedStringPiece;
}
public java.util.List<String> getRepeatedStringPiece() {
return repeatedStringPiece;
}
public void setRepeatedStringPiece(java.util.List<String> RepeatedStringPiece) {
this.repeatedStringPiece = RepeatedStringPiece;
this.hasRepeatedStringPiece = true;
}
private java.util.List<String> repeatedCord;
private boolean hasRepeatedCord;
public boolean hasRepeatedCord() {
return hasRepeatedCord;
}
public java.util.List<String> getRepeatedCord() {
return repeatedCord;
}
public void setRepeatedCord(java.util.List<String> RepeatedCord) {
this.repeatedCord = RepeatedCord;
this.hasRepeatedCord = true;
}
private int defaultInt32;
private boolean hasDefaultInt32;
public boolean hasDefaultInt32() {
return hasDefaultInt32;
}
public int getDefaultInt32() {
return defaultInt32;
}
public void setDefaultInt32(int DefaultInt32) {
this.defaultInt32 = DefaultInt32;
this.hasDefaultInt32 = true;
}
private long defaultInt64;
private boolean hasDefaultInt64;
public boolean hasDefaultInt64() {
return hasDefaultInt64;
}
public long getDefaultInt64() {
return defaultInt64;
}
public void setDefaultInt64(long DefaultInt64) {
this.defaultInt64 = DefaultInt64;
this.hasDefaultInt64 = true;
}
private int defaultUint32;
private boolean hasDefaultUint32;
public boolean hasDefaultUint32() {
return hasDefaultUint32;
}
public int getDefaultUint32() {
return defaultUint32;
}
public void setDefaultUint32(int DefaultUint32) {
this.defaultUint32 = DefaultUint32;
this.hasDefaultUint32 = true;
}
private long defaultUint64;
private boolean hasDefaultUint64;
public boolean hasDefaultUint64() {
return hasDefaultUint64;
}
public long getDefaultUint64() {
return defaultUint64;
}
public void setDefaultUint64(long DefaultUint64) {
this.defaultUint64 = DefaultUint64;
this.hasDefaultUint64 = true;
}
private int defaultSint32;
private boolean hasDefaultSint32;
public boolean hasDefaultSint32() {
return hasDefaultSint32;
}
public int getDefaultSint32() {
return defaultSint32;
}
public void setDefaultSint32(int DefaultSint32) {
this.defaultSint32 = DefaultSint32;
this.hasDefaultSint32 = true;
}
private long defaultSint64;
private boolean hasDefaultSint64;
public boolean hasDefaultSint64() {
return hasDefaultSint64;
}
public long getDefaultSint64() {
return defaultSint64;
}
public void setDefaultSint64(long DefaultSint64) {
this.defaultSint64 = DefaultSint64;
this.hasDefaultSint64 = true;
}
private int defaultFixed32;
private boolean hasDefaultFixed32;
public boolean hasDefaultFixed32() {
return hasDefaultFixed32;
}
public int getDefaultFixed32() {
return defaultFixed32;
}
public void setDefaultFixed32(int DefaultFixed32) {
this.defaultFixed32 = DefaultFixed32;
this.hasDefaultFixed32 = true;
}
private long defaultFixed64;
private boolean hasDefaultFixed64;
public boolean hasDefaultFixed64() {
return hasDefaultFixed64;
}
public long getDefaultFixed64() {
return defaultFixed64;
}
public void setDefaultFixed64(long DefaultFixed64) {
this.defaultFixed64 = DefaultFixed64;
this.hasDefaultFixed64 = true;
}
private int defaultSfixed32;
private boolean hasDefaultSfixed32;
public boolean hasDefaultSfixed32() {
return hasDefaultSfixed32;
}
public int getDefaultSfixed32() {
return defaultSfixed32;
}
public void setDefaultSfixed32(int DefaultSfixed32) {
this.defaultSfixed32 = DefaultSfixed32;
this.hasDefaultSfixed32 = true;
}
private long defaultSfixed64;
private boolean hasDefaultSfixed64;
public boolean hasDefaultSfixed64() {
return hasDefaultSfixed64;
}
public long getDefaultSfixed64() {
return defaultSfixed64;
}
public void setDefaultSfixed64(long DefaultSfixed64) {
this.defaultSfixed64 = DefaultSfixed64;
this.hasDefaultSfixed64 = true;
}
private float defaultFloat;
private boolean hasDefaultFloat;
public boolean hasDefaultFloat() {
return hasDefaultFloat;
}
public float getDefaultFloat() {
return defaultFloat;
}
public void setDefaultFloat(float DefaultFloat) {
this.defaultFloat = DefaultFloat;
this.hasDefaultFloat = true;
}
private double defaultDouble;
private boolean hasDefaultDouble;
public boolean hasDefaultDouble() {
return hasDefaultDouble;
}
public double getDefaultDouble() {
return defaultDouble;
}
public void setDefaultDouble(double DefaultDouble) {
this.defaultDouble = DefaultDouble;
this.hasDefaultDouble = true;
}
private boolean defaultBool;
private boolean hasDefaultBool;
public boolean hasDefaultBool() {
return hasDefaultBool;
}
public boolean getDefaultBool() {
return defaultBool;
}
public void setDefaultBool(boolean DefaultBool) {
this.defaultBool = DefaultBool;
this.hasDefaultBool = true;
}
private String defaultString;
private boolean hasDefaultString;
public boolean hasDefaultString() {
return hasDefaultString;
}
public String getDefaultString() {
return defaultString;
}
public void setDefaultString(String DefaultString) {
this.defaultString = DefaultString;
this.hasDefaultString = true;
}
private byte[] defaultBytes;
private boolean hasDefaultBytes;
public boolean hasDefaultBytes() {
return hasDefaultBytes;
}
public byte[] getDefaultBytes() {
return defaultBytes;
}
public void setDefaultBytes(byte[] DefaultBytes) {
this.defaultBytes = DefaultBytes;
this.hasDefaultBytes = true;
}
private protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum defaultNestedEnum;
private boolean hasDefaultNestedEnum;
public boolean hasDefaultNestedEnum() {
return hasDefaultNestedEnum;
}
public protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum getDefaultNestedEnum() {
return defaultNestedEnum;
}
public void setDefaultNestedEnum(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum DefaultNestedEnum) {
this.defaultNestedEnum = DefaultNestedEnum;
this.hasDefaultNestedEnum = true;
}
private protobuf_gcless_unittest.UnittestProto.ForeignEnum defaultForeignEnum;
private boolean hasDefaultForeignEnum;
public boolean hasDefaultForeignEnum() {
return hasDefaultForeignEnum;
}
public protobuf_gcless_unittest.UnittestProto.ForeignEnum getDefaultForeignEnum() {
return defaultForeignEnum;
}
public void setDefaultForeignEnum(protobuf_gcless_unittest.UnittestProto.ForeignEnum DefaultForeignEnum) {
this.defaultForeignEnum = DefaultForeignEnum;
this.hasDefaultForeignEnum = true;
}
private protobuf_gcless_import.ImportEnum defaultImportEnum;
private boolean hasDefaultImportEnum;
public boolean hasDefaultImportEnum() {
return hasDefaultImportEnum;
}
public protobuf_gcless_import.ImportEnum getDefaultImportEnum() {
return defaultImportEnum;
}
public void setDefaultImportEnum(protobuf_gcless_import.ImportEnum DefaultImportEnum) {
this.defaultImportEnum = DefaultImportEnum;
this.hasDefaultImportEnum = true;
}
private String defaultStringPiece;
private boolean hasDefaultStringPiece;
public boolean hasDefaultStringPiece() {
return hasDefaultStringPiece;
}
public String getDefaultStringPiece() {
return defaultStringPiece;
}
public void setDefaultStringPiece(String DefaultStringPiece) {
this.defaultStringPiece = DefaultStringPiece;
this.hasDefaultStringPiece = true;
}
private String defaultCord;
private boolean hasDefaultCord;
public boolean hasDefaultCord() {
return hasDefaultCord;
}
public String getDefaultCord() {
return defaultCord;
}
public void setDefaultCord(String DefaultCord) {
this.defaultCord = DefaultCord;
this.hasDefaultCord = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestAllTypes [");
a_.append(" optionalInt32=" + optionalInt32);
a_.append(",");
a_.append(" optionalInt64=" + optionalInt64);
a_.append(",");
a_.append(" optionalUint32=" + optionalUint32);
a_.append(",");
a_.append(" optionalUint64=" + optionalUint64);
a_.append(",");
a_.append(" optionalSint32=" + optionalSint32);
a_.append(",");
a_.append(" optionalSint64=" + optionalSint64);
a_.append(",");
a_.append(" optionalFixed32=" + optionalFixed32);
a_.append(",");
a_.append(" optionalFixed64=" + optionalFixed64);
a_.append(",");
a_.append(" optionalSfixed32=" + optionalSfixed32);
a_.append(",");
a_.append(" optionalSfixed64=" + optionalSfixed64);
a_.append(",");
a_.append(" optionalFloat=" + optionalFloat);
a_.append(",");
a_.append(" optionalDouble=" + optionalDouble);
a_.append(",");
a_.append(" optionalBool=" + optionalBool);
a_.append(",");
a_.append(" optionalString=" + optionalString);
a_.append(",");
a_.append(" optionalBytes=" + optionalBytes);
a_.append(",");
a_.append(" optionalgroup=");
if ( optionalgroup != null ) {
optionalgroup.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" optionalNestedMessage=");
if ( optionalNestedMessage != null ) {
optionalNestedMessage.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" optionalForeignMessage=");
if ( optionalForeignMessage != null ) {
optionalForeignMessage.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" optionalImportMessage=");
if ( optionalImportMessage != null ) {
optionalImportMessage.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" optionalNestedEnum=");
if ( optionalNestedEnum != null ) {
a_.append(optionalNestedEnum.toString());
} else {
a_.append("null");
}
a_.append(",");
a_.append(" optionalForeignEnum=");
if ( optionalForeignEnum != null ) {
a_.append(optionalForeignEnum.toString());
} else {
a_.append("null");
}
a_.append(",");
a_.append(" optionalImportEnum=");
if ( optionalImportEnum != null ) {
a_.append(optionalImportEnum.toString());
} else {
a_.append("null");
}
a_.append(",");
a_.append(" optionalStringPiece=" + optionalStringPiece);
a_.append(",");
a_.append(" optionalCord=" + optionalCord);
a_.append(",");
a_.append(" repeatedInt32=" + repeatedInt32);
a_.append(",");
a_.append(" repeatedInt64=" + repeatedInt64);
a_.append(",");
a_.append(" repeatedUint32=" + repeatedUint32);
a_.append(",");
a_.append(" repeatedUint64=" + repeatedUint64);
a_.append(",");
a_.append(" repeatedSint32=" + repeatedSint32);
a_.append(",");
a_.append(" repeatedSint64=" + repeatedSint64);
a_.append(",");
a_.append(" repeatedFixed32=" + repeatedFixed32);
a_.append(",");
a_.append(" repeatedFixed64=" + repeatedFixed64);
a_.append(",");
a_.append(" repeatedSfixed32=" + repeatedSfixed32);
a_.append(",");
a_.append(" repeatedSfixed64=" + repeatedSfixed64);
a_.append(",");
a_.append(" repeatedFloat=" + repeatedFloat);
a_.append(",");
a_.append(" repeatedDouble=" + repeatedDouble);
a_.append(",");
a_.append(" repeatedBool=" + repeatedBool);
a_.append(",");
a_.append(" repeatedString=" + repeatedString);
a_.append(",");
a_.append(" repeatedBytes=" + repeatedBytes);
a_.append(",");
a_.append(" repeatedgroup=");
if (repeatedgroup != null ) {
a_.append("[");
for( int i=0;i<repeatedgroup.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup cur = repeatedgroup.get(i);
if( i != 0 ) {
 a_.append(", ");
}
cur.toString(a_);
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedNestedMessage=");
if (repeatedNestedMessage != null ) {
a_.append("[");
for( int i=0;i<repeatedNestedMessage.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage cur = repeatedNestedMessage.get(i);
if( i != 0 ) {
 a_.append(", ");
}
cur.toString(a_);
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedForeignMessage=");
if (repeatedForeignMessage != null ) {
a_.append("[");
for( int i=0;i<repeatedForeignMessage.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.ForeignMessage cur = repeatedForeignMessage.get(i);
if( i != 0 ) {
 a_.append(", ");
}
cur.toString(a_);
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedImportMessage=");
if (repeatedImportMessage != null ) {
a_.append("[");
for( int i=0;i<repeatedImportMessage.size();i++ ) {
protobuf_gcless_import.ImportMessage cur = repeatedImportMessage.get(i);
if( i != 0 ) {
 a_.append(", ");
}
cur.toString(a_);
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedNestedEnum=");
if (repeatedNestedEnum != null ) {
a_.append("[");
for( int i=0;i<repeatedNestedEnum.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum cur = repeatedNestedEnum.get(i);
if( i != 0 ) {
 a_.append(", ");
}
a_.append(cur.toString());
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedForeignEnum=");
if (repeatedForeignEnum != null ) {
a_.append("[");
for( int i=0;i<repeatedForeignEnum.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.ForeignEnum cur = repeatedForeignEnum.get(i);
if( i != 0 ) {
 a_.append(", ");
}
a_.append(cur.toString());
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedImportEnum=");
if (repeatedImportEnum != null ) {
a_.append("[");
for( int i=0;i<repeatedImportEnum.size();i++ ) {
protobuf_gcless_import.ImportEnum cur = repeatedImportEnum.get(i);
if( i != 0 ) {
 a_.append(", ");
}
a_.append(cur.toString());
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedStringPiece=" + repeatedStringPiece);
a_.append(",");
a_.append(" repeatedCord=" + repeatedCord);
a_.append(",");
a_.append(" defaultInt32=" + defaultInt32);
a_.append(",");
a_.append(" defaultInt64=" + defaultInt64);
a_.append(",");
a_.append(" defaultUint32=" + defaultUint32);
a_.append(",");
a_.append(" defaultUint64=" + defaultUint64);
a_.append(",");
a_.append(" defaultSint32=" + defaultSint32);
a_.append(",");
a_.append(" defaultSint64=" + defaultSint64);
a_.append(",");
a_.append(" defaultFixed32=" + defaultFixed32);
a_.append(",");
a_.append(" defaultFixed64=" + defaultFixed64);
a_.append(",");
a_.append(" defaultSfixed32=" + defaultSfixed32);
a_.append(",");
a_.append(" defaultSfixed64=" + defaultSfixed64);
a_.append(",");
a_.append(" defaultFloat=" + defaultFloat);
a_.append(",");
a_.append(" defaultDouble=" + defaultDouble);
a_.append(",");
a_.append(" defaultBool=" + defaultBool);
a_.append(",");
a_.append(" defaultString=" + defaultString);
a_.append(",");
a_.append(" defaultBytes=" + defaultBytes);
a_.append(",");
a_.append(" defaultNestedEnum=");
if ( defaultNestedEnum != null ) {
a_.append(defaultNestedEnum.toString());
} else {
a_.append("null");
}
a_.append(",");
a_.append(" defaultForeignEnum=");
if ( defaultForeignEnum != null ) {
a_.append(defaultForeignEnum.toString());
} else {
a_.append("null");
}
a_.append(",");
a_.append(" defaultImportEnum=");
if ( defaultImportEnum != null ) {
a_.append(defaultImportEnum.toString());
} else {
a_.append("null");
}
a_.append(",");
a_.append(" defaultStringPiece=" + defaultStringPiece);
a_.append(",");
a_.append(" defaultCord=" + defaultCord);
a_.append("]");
}
public static class NestedMessage {
private int bb;
private boolean hasBb;
public boolean hasBb() {
return hasBb;
}
public int getBb() {
return bb;
}
public void setBb(int Bb) {
this.bb = Bb;
this.hasBb = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("NestedMessage [");
a_.append(" bb=" + bb);
a_.append("]");
}
}
public static class NestedMessageSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage message) {
try {
int totalSize = 0;
if (message.hasBb()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getBb());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasBb()) {
position = ProtobufOutputStream.writeInt32(1, message.getBb(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage message, java.io.OutputStream os) {
try {
if (message.hasBb()) {
ProtobufOutputStream.writeInt32(1, message.getBb(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage message = new protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setBb(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage message = new protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setBb(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public static class OptionalGroup {
private int a;
private boolean hasA;
public boolean hasA() {
return hasA;
}
public int getA() {
return a;
}
public void setA(int A) {
this.a = A;
this.hasA = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("OptionalGroup [");
a_.append(" a=" + a);
a_.append("]");
}
}
public static class OptionalGroupSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup message) {
try {
int totalSize = 0;
if (message.hasA()) {
totalSize += ProtobufOutputStream.computeInt32Size(17, message.getA());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasA()) {
position = ProtobufOutputStream.writeInt32(17, message.getA(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup message, java.io.OutputStream os) {
try {
if (message.hasA()) {
ProtobufOutputStream.writeInt32(17, message.getA(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup message = new protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 17: 
message.setA(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup message = new protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 17: 
message.setA(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public static class RepeatedGroup {
private int a;
private boolean hasA;
public boolean hasA() {
return hasA;
}
public int getA() {
return a;
}
public void setA(int A) {
this.a = A;
this.hasA = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("RepeatedGroup [");
a_.append(" a=" + a);
a_.append("]");
}
}
public static class RepeatedGroupSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup message) {
try {
int totalSize = 0;
if (message.hasA()) {
totalSize += ProtobufOutputStream.computeInt32Size(47, message.getA());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasA()) {
position = ProtobufOutputStream.writeInt32(47, message.getA(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup message, java.io.OutputStream os) {
try {
if (message.hasA()) {
ProtobufOutputStream.writeInt32(47, message.getA(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup message = new protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 47: 
message.setA(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup message = new protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 47: 
message.setA(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public enum NestedEnum {
FOO(1),
BAR(2),
BAZ(3),
;
public static NestedEnum valueOf(int value) {
switch (value) {
case 1: return FOO;
case 2: return BAR;
case 3: return BAZ;
default: return null;
}
}
private NestedEnum(int value) {
this.value = value;
}
private int value;
public int getValue() {
return value;
}
}

}
public static class TestAllTypesSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestAllTypes message) {
try {
int totalSize = 0;
if (message.hasOptionalInt32()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getOptionalInt32());
}
if (message.hasOptionalInt64()) {
totalSize += ProtobufOutputStream.computeInt64Size(2, message.getOptionalInt64());
}
if (message.hasOptionalUint32()) {
totalSize += ProtobufOutputStream.computeUint32Size(3, message.getOptionalUint32());
}
if (message.hasOptionalUint64()) {
totalSize += ProtobufOutputStream.computeUint64Size(4, message.getOptionalUint64());
}
if (message.hasOptionalSint32()) {
totalSize += ProtobufOutputStream.computeSint32Size(5, message.getOptionalSint32());
}
if (message.hasOptionalSint64()) {
totalSize += ProtobufOutputStream.computeSint64Size(6, message.getOptionalSint64());
}
if (message.hasOptionalFixed32()) {
totalSize += ProtobufOutputStream.computeFixed32Size(7, message.getOptionalFixed32());
}
if (message.hasOptionalFixed64()) {
totalSize += ProtobufOutputStream.computeFixed64Size(8, message.getOptionalFixed64());
}
if (message.hasOptionalSfixed32()) {
totalSize += ProtobufOutputStream.computeSfixed32Size(9, message.getOptionalSfixed32());
}
if (message.hasOptionalSfixed64()) {
totalSize += ProtobufOutputStream.computeSfixed64Size(10, message.getOptionalSfixed64());
}
if (message.hasOptionalFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(11, message.getOptionalFloat());
}
if (message.hasOptionalDouble()) {
totalSize += ProtobufOutputStream.computeDoubleSize(12, message.getOptionalDouble());
}
if (message.hasOptionalBool()) {
totalSize += ProtobufOutputStream.computeBoolSize(13, message.getOptionalBool());
}
byte[] optional_stringBuffer = null;
if (message.hasOptionalString()) {
optional_stringBuffer = message.getOptionalString().getBytes("UTF-8");
totalSize += optional_stringBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(14);
totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_stringBuffer.length);
}
if (message.hasOptionalBytes()) {
totalSize += message.getOptionalBytes().length;
totalSize += ProtobufOutputStream.computeTagSize(15);
totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getOptionalBytes().length);
}
byte[] optionalgroupBuffer = null;
if (message.hasOptionalgroup()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
ProtobufOutputStream.writeTag(16, ProtobufInputStream.WIRETYPE_GROUP_START, baos);
baos.write(protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroupSerializer.serialize(message.getOptionalgroup()));
ProtobufOutputStream.writeTag(16, ProtobufInputStream.WIRETYPE_GROUP_END, baos);
optionalgroupBuffer = baos.toByteArray();
totalSize += optionalgroupBuffer.length;
}
byte[] optional_nested_messageBuffer = null;
if (message.hasOptionalNestedMessage()) {
optional_nested_messageBuffer = protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getOptionalNestedMessage());
totalSize += ProtobufOutputStream.computeTagSize(18);
totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_nested_messageBuffer.length);
totalSize += optional_nested_messageBuffer.length;
}
byte[] optional_foreign_messageBuffer = null;
if (message.hasOptionalForeignMessage()) {
optional_foreign_messageBuffer = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getOptionalForeignMessage());
totalSize += ProtobufOutputStream.computeTagSize(19);
totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_foreign_messageBuffer.length);
totalSize += optional_foreign_messageBuffer.length;
}
byte[] optional_import_messageBuffer = null;
if (message.hasOptionalImportMessage()) {
optional_import_messageBuffer = protobuf_gcless_import.ImportMessageSerializer.serialize(message.getOptionalImportMessage());
totalSize += ProtobufOutputStream.computeTagSize(20);
totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_import_messageBuffer.length);
totalSize += optional_import_messageBuffer.length;
}
if (message.hasOptionalNestedEnum()) {
totalSize += ProtobufOutputStream.computeEnumSize(21, message.getOptionalNestedEnum().getValue());
}
if (message.hasOptionalForeignEnum()) {
totalSize += ProtobufOutputStream.computeEnumSize(22, message.getOptionalForeignEnum().getValue());
}
if (message.hasOptionalImportEnum()) {
totalSize += ProtobufOutputStream.computeEnumSize(23, message.getOptionalImportEnum().getValue());
}
byte[] optional_string_pieceBuffer = null;
if (message.hasOptionalStringPiece()) {
optional_string_pieceBuffer = message.getOptionalStringPiece().getBytes("UTF-8");
totalSize += optional_string_pieceBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(24);
totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_string_pieceBuffer.length);
}
byte[] optional_cordBuffer = null;
if (message.hasOptionalCord()) {
optional_cordBuffer = message.getOptionalCord().getBytes("UTF-8");
totalSize += optional_cordBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(25);
totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_cordBuffer.length);
}
if (message.hasRepeatedInt32()) {
for(int i=0;i<message.getRepeatedInt32().size();i++) {
totalSize += ProtobufOutputStream.computeInt32Size(31, message.getRepeatedInt32().get(i));
}
}
if (message.hasRepeatedInt64()) {
for(int i=0;i<message.getRepeatedInt64().size();i++) {
totalSize += ProtobufOutputStream.computeInt64Size(32, message.getRepeatedInt64().get(i));
}
}
if (message.hasRepeatedUint32()) {
for(int i=0;i<message.getRepeatedUint32().size();i++) {
totalSize += ProtobufOutputStream.computeUint32Size(33, message.getRepeatedUint32().get(i));
}
}
if (message.hasRepeatedUint64()) {
for(int i=0;i<message.getRepeatedUint64().size();i++) {
totalSize += ProtobufOutputStream.computeUint64Size(34, message.getRepeatedUint64().get(i));
}
}
if (message.hasRepeatedSint32()) {
for(int i=0;i<message.getRepeatedSint32().size();i++) {
totalSize += ProtobufOutputStream.computeSint32Size(35, message.getRepeatedSint32().get(i));
}
}
if (message.hasRepeatedSint64()) {
for(int i=0;i<message.getRepeatedSint64().size();i++) {
totalSize += ProtobufOutputStream.computeSint64Size(36, message.getRepeatedSint64().get(i));
}
}
if (message.hasRepeatedFixed32()) {
for(int i=0;i<message.getRepeatedFixed32().size();i++) {
totalSize += ProtobufOutputStream.computeFixed32Size(37, message.getRepeatedFixed32().get(i));
}
}
if (message.hasRepeatedFixed64()) {
for(int i=0;i<message.getRepeatedFixed64().size();i++) {
totalSize += ProtobufOutputStream.computeFixed64Size(38, message.getRepeatedFixed64().get(i));
}
}
if (message.hasRepeatedSfixed32()) {
for(int i=0;i<message.getRepeatedSfixed32().size();i++) {
totalSize += ProtobufOutputStream.computeSfixed32Size(39, message.getRepeatedSfixed32().get(i));
}
}
if (message.hasRepeatedSfixed64()) {
for(int i=0;i<message.getRepeatedSfixed64().size();i++) {
totalSize += ProtobufOutputStream.computeSfixed64Size(40, message.getRepeatedSfixed64().get(i));
}
}
if (message.hasRepeatedFloat()) {
for(int i=0;i<message.getRepeatedFloat().size();i++) {
totalSize += ProtobufOutputStream.computeFloatSize(41, message.getRepeatedFloat().get(i));
}
}
if (message.hasRepeatedDouble()) {
for(int i=0;i<message.getRepeatedDouble().size();i++) {
totalSize += ProtobufOutputStream.computeDoubleSize(42, message.getRepeatedDouble().get(i));
}
}
if (message.hasRepeatedBool()) {
for(int i=0;i<message.getRepeatedBool().size();i++) {
totalSize += ProtobufOutputStream.computeBoolSize(43, message.getRepeatedBool().get(i));
}
}
byte[] repeated_stringBuffer = null;
if (message.hasRepeatedString()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedString().size();i++) {
ProtobufOutputStream.writeString(44, message.getRepeatedString().get(i), baos);
}
repeated_stringBuffer = baos.toByteArray();
totalSize += repeated_stringBuffer.length;
}
if (message.hasRepeatedBytes()) {
totalSize += ProtobufOutputStream.computeBytesSize(45, message.getRepeatedBytes());
}
byte[] repeatedgroupBuffer = null;
if (message.hasRepeatedgroup()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedgroup().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroupSerializer.serialize(message.getRepeatedgroup().get(i));
ProtobufOutputStream.writeTag(46, ProtobufInputStream.WIRETYPE_GROUP_START, baos);
baos.write(curMessageData);
ProtobufOutputStream.writeTag(46, ProtobufInputStream.WIRETYPE_GROUP_END, baos);
}
repeatedgroupBuffer = baos.toByteArray();
totalSize += repeatedgroupBuffer.length;
}
byte[] repeated_nested_messageBuffer = null;
if (message.hasRepeatedNestedMessage()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedNestedMessage().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getRepeatedNestedMessage().get(i));
ProtobufOutputStream.writeMessageTag(48, baos);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, baos);
baos.write(curMessageData);
}
repeated_nested_messageBuffer = baos.toByteArray();
totalSize += repeated_nested_messageBuffer.length;
}
byte[] repeated_foreign_messageBuffer = null;
if (message.hasRepeatedForeignMessage()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedForeignMessage().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getRepeatedForeignMessage().get(i));
ProtobufOutputStream.writeMessageTag(49, baos);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, baos);
baos.write(curMessageData);
}
repeated_foreign_messageBuffer = baos.toByteArray();
totalSize += repeated_foreign_messageBuffer.length;
}
byte[] repeated_import_messageBuffer = null;
if (message.hasRepeatedImportMessage()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedImportMessage().size();i++) {
byte[] curMessageData = protobuf_gcless_import.ImportMessageSerializer.serialize(message.getRepeatedImportMessage().get(i));
ProtobufOutputStream.writeMessageTag(50, baos);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, baos);
baos.write(curMessageData);
}
repeated_import_messageBuffer = baos.toByteArray();
totalSize += repeated_import_messageBuffer.length;
}
byte[] repeated_nested_enumBuffer = null;
if (message.hasRepeatedNestedEnum()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedNestedEnum().size();i++) {
ProtobufOutputStream.writeEnum(51, message.getRepeatedNestedEnum().get(i).getValue(), baos);
}
repeated_nested_enumBuffer = baos.toByteArray();
totalSize += repeated_nested_enumBuffer.length;
}
byte[] repeated_foreign_enumBuffer = null;
if (message.hasRepeatedForeignEnum()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedForeignEnum().size();i++) {
ProtobufOutputStream.writeEnum(52, message.getRepeatedForeignEnum().get(i).getValue(), baos);
}
repeated_foreign_enumBuffer = baos.toByteArray();
totalSize += repeated_foreign_enumBuffer.length;
}
byte[] repeated_import_enumBuffer = null;
if (message.hasRepeatedImportEnum()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedImportEnum().size();i++) {
ProtobufOutputStream.writeEnum(53, message.getRepeatedImportEnum().get(i).getValue(), baos);
}
repeated_import_enumBuffer = baos.toByteArray();
totalSize += repeated_import_enumBuffer.length;
}
byte[] repeated_string_pieceBuffer = null;
if (message.hasRepeatedStringPiece()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedStringPiece().size();i++) {
ProtobufOutputStream.writeString(54, message.getRepeatedStringPiece().get(i), baos);
}
repeated_string_pieceBuffer = baos.toByteArray();
totalSize += repeated_string_pieceBuffer.length;
}
byte[] repeated_cordBuffer = null;
if (message.hasRepeatedCord()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedCord().size();i++) {
ProtobufOutputStream.writeString(55, message.getRepeatedCord().get(i), baos);
}
repeated_cordBuffer = baos.toByteArray();
totalSize += repeated_cordBuffer.length;
}
if (message.hasDefaultInt32()) {
totalSize += ProtobufOutputStream.computeInt32Size(61, message.getDefaultInt32());
}
if (message.hasDefaultInt64()) {
totalSize += ProtobufOutputStream.computeInt64Size(62, message.getDefaultInt64());
}
if (message.hasDefaultUint32()) {
totalSize += ProtobufOutputStream.computeUint32Size(63, message.getDefaultUint32());
}
if (message.hasDefaultUint64()) {
totalSize += ProtobufOutputStream.computeUint64Size(64, message.getDefaultUint64());
}
if (message.hasDefaultSint32()) {
totalSize += ProtobufOutputStream.computeSint32Size(65, message.getDefaultSint32());
}
if (message.hasDefaultSint64()) {
totalSize += ProtobufOutputStream.computeSint64Size(66, message.getDefaultSint64());
}
if (message.hasDefaultFixed32()) {
totalSize += ProtobufOutputStream.computeFixed32Size(67, message.getDefaultFixed32());
}
if (message.hasDefaultFixed64()) {
totalSize += ProtobufOutputStream.computeFixed64Size(68, message.getDefaultFixed64());
}
if (message.hasDefaultSfixed32()) {
totalSize += ProtobufOutputStream.computeSfixed32Size(69, message.getDefaultSfixed32());
}
if (message.hasDefaultSfixed64()) {
totalSize += ProtobufOutputStream.computeSfixed64Size(70, message.getDefaultSfixed64());
}
if (message.hasDefaultFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(71, message.getDefaultFloat());
}
if (message.hasDefaultDouble()) {
totalSize += ProtobufOutputStream.computeDoubleSize(72, message.getDefaultDouble());
}
if (message.hasDefaultBool()) {
totalSize += ProtobufOutputStream.computeBoolSize(73, message.getDefaultBool());
}
byte[] default_stringBuffer = null;
if (message.hasDefaultString()) {
default_stringBuffer = message.getDefaultString().getBytes("UTF-8");
totalSize += default_stringBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(74);
totalSize += ProtobufOutputStream.computeRawVarint32Size(default_stringBuffer.length);
}
if (message.hasDefaultBytes()) {
totalSize += message.getDefaultBytes().length;
totalSize += ProtobufOutputStream.computeTagSize(75);
totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getDefaultBytes().length);
}
if (message.hasDefaultNestedEnum()) {
totalSize += ProtobufOutputStream.computeEnumSize(81, message.getDefaultNestedEnum().getValue());
}
if (message.hasDefaultForeignEnum()) {
totalSize += ProtobufOutputStream.computeEnumSize(82, message.getDefaultForeignEnum().getValue());
}
if (message.hasDefaultImportEnum()) {
totalSize += ProtobufOutputStream.computeEnumSize(83, message.getDefaultImportEnum().getValue());
}
byte[] default_string_pieceBuffer = null;
if (message.hasDefaultStringPiece()) {
default_string_pieceBuffer = message.getDefaultStringPiece().getBytes("UTF-8");
totalSize += default_string_pieceBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(84);
totalSize += ProtobufOutputStream.computeRawVarint32Size(default_string_pieceBuffer.length);
}
byte[] default_cordBuffer = null;
if (message.hasDefaultCord()) {
default_cordBuffer = message.getDefaultCord().getBytes("UTF-8");
totalSize += default_cordBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(85);
totalSize += ProtobufOutputStream.computeRawVarint32Size(default_cordBuffer.length);
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasOptionalInt32()) {
position = ProtobufOutputStream.writeInt32(1, message.getOptionalInt32(), result, position);
}
if (message.hasOptionalInt64()) {
position = ProtobufOutputStream.writeInt64(2, message.getOptionalInt64(), result, position);
}
if (message.hasOptionalUint32()) {
position = ProtobufOutputStream.writeUint32(3, message.getOptionalUint32(), result, position);
}
if (message.hasOptionalUint64()) {
position = ProtobufOutputStream.writeUint64(4, message.getOptionalUint64(), result, position);
}
if (message.hasOptionalSint32()) {
position = ProtobufOutputStream.writeSint32(5, message.getOptionalSint32(), result, position);
}
if (message.hasOptionalSint64()) {
position = ProtobufOutputStream.writeSint64(6, message.getOptionalSint64(), result, position);
}
if (message.hasOptionalFixed32()) {
position = ProtobufOutputStream.writeFixed32(7, message.getOptionalFixed32(), result, position);
}
if (message.hasOptionalFixed64()) {
position = ProtobufOutputStream.writeFixed64(8, message.getOptionalFixed64(), result, position);
}
if (message.hasOptionalSfixed32()) {
position = ProtobufOutputStream.writeSfixed32(9, message.getOptionalSfixed32(), result, position);
}
if (message.hasOptionalSfixed64()) {
position = ProtobufOutputStream.writeSfixed64(10, message.getOptionalSfixed64(), result, position);
}
if (message.hasOptionalFloat()) {
position = ProtobufOutputStream.writeFloat(11, message.getOptionalFloat(), result, position);
}
if (message.hasOptionalDouble()) {
position = ProtobufOutputStream.writeDouble(12, message.getOptionalDouble(), result, position);
}
if (message.hasOptionalBool()) {
position = ProtobufOutputStream.writeBool(13, message.getOptionalBool(), result, position);
}
if (message.hasOptionalString()) {
position = ProtobufOutputStream.writeString(14,optional_stringBuffer, result, position);
}
if (message.hasOptionalBytes()) {
position = ProtobufOutputStream.writeBytes(15, message.getOptionalBytes(), result, position);
}
if (message.hasOptionalgroup()) {
position = ProtobufOutputStream.writeRawBytes(optionalgroupBuffer, result, position);
}
if (message.hasOptionalNestedMessage()) {
position = ProtobufOutputStream.writeBytes(18, optional_nested_messageBuffer, result, position);
}
if (message.hasOptionalForeignMessage()) {
position = ProtobufOutputStream.writeBytes(19, optional_foreign_messageBuffer, result, position);
}
if (message.hasOptionalImportMessage()) {
position = ProtobufOutputStream.writeBytes(20, optional_import_messageBuffer, result, position);
}
if (message.hasOptionalNestedEnum()) {
position = ProtobufOutputStream.writeEnum(21, message.getOptionalNestedEnum().getValue(), result, position);
}
if (message.hasOptionalForeignEnum()) {
position = ProtobufOutputStream.writeEnum(22, message.getOptionalForeignEnum().getValue(), result, position);
}
if (message.hasOptionalImportEnum()) {
position = ProtobufOutputStream.writeEnum(23, message.getOptionalImportEnum().getValue(), result, position);
}
if (message.hasOptionalStringPiece()) {
position = ProtobufOutputStream.writeString(24,optional_string_pieceBuffer, result, position);
}
if (message.hasOptionalCord()) {
position = ProtobufOutputStream.writeString(25,optional_cordBuffer, result, position);
}
if (message.hasRepeatedInt32()) {
position = ProtobufOutputStream.writeRepeatedInt32(31, message.getRepeatedInt32(), result, position);
}
if (message.hasRepeatedInt64()) {
position = ProtobufOutputStream.writeRepeatedInt64(32, message.getRepeatedInt64(), result, position);
}
if (message.hasRepeatedUint32()) {
position = ProtobufOutputStream.writeRepeatedUint32(33, message.getRepeatedUint32(), result, position);
}
if (message.hasRepeatedUint64()) {
position = ProtobufOutputStream.writeRepeatedUint64(34, message.getRepeatedUint64(), result, position);
}
if (message.hasRepeatedSint32()) {
position = ProtobufOutputStream.writeRepeatedSint32(35, message.getRepeatedSint32(), result, position);
}
if (message.hasRepeatedSint64()) {
position = ProtobufOutputStream.writeRepeatedSint64(36, message.getRepeatedSint64(), result, position);
}
if (message.hasRepeatedFixed32()) {
position = ProtobufOutputStream.writeRepeatedFixed32(37, message.getRepeatedFixed32(), result, position);
}
if (message.hasRepeatedFixed64()) {
position = ProtobufOutputStream.writeRepeatedFixed64(38, message.getRepeatedFixed64(), result, position);
}
if (message.hasRepeatedSfixed32()) {
position = ProtobufOutputStream.writeRepeatedSfixed32(39, message.getRepeatedSfixed32(), result, position);
}
if (message.hasRepeatedSfixed64()) {
position = ProtobufOutputStream.writeRepeatedSfixed64(40, message.getRepeatedSfixed64(), result, position);
}
if (message.hasRepeatedFloat()) {
position = ProtobufOutputStream.writeRepeatedFloat(41, message.getRepeatedFloat(), result, position);
}
if (message.hasRepeatedDouble()) {
position = ProtobufOutputStream.writeRepeatedDouble(42, message.getRepeatedDouble(), result, position);
}
if (message.hasRepeatedBool()) {
position = ProtobufOutputStream.writeRepeatedBool(43, message.getRepeatedBool(), result, position);
}
if (message.hasRepeatedString()) {
position = ProtobufOutputStream.writeRawBytes(repeated_stringBuffer, result, position);
}
if (message.hasRepeatedBytes()) {
position = ProtobufOutputStream.writeRepeatedBytes(45, message.getRepeatedBytes(), result, position);
}
if (message.hasRepeatedgroup()) {
position = ProtobufOutputStream.writeRawBytes(repeatedgroupBuffer, result, position);
}
if (message.hasRepeatedNestedMessage()) {
position = ProtobufOutputStream.writeRawBytes(repeated_nested_messageBuffer, result, position);
}
if (message.hasRepeatedForeignMessage()) {
position = ProtobufOutputStream.writeRawBytes(repeated_foreign_messageBuffer, result, position);
}
if (message.hasRepeatedImportMessage()) {
position = ProtobufOutputStream.writeRawBytes(repeated_import_messageBuffer, result, position);
}
if (message.hasRepeatedNestedEnum()) {
position = ProtobufOutputStream.writeRawBytes(repeated_nested_enumBuffer, result, position);
}
if (message.hasRepeatedForeignEnum()) {
position = ProtobufOutputStream.writeRawBytes(repeated_foreign_enumBuffer, result, position);
}
if (message.hasRepeatedImportEnum()) {
position = ProtobufOutputStream.writeRawBytes(repeated_import_enumBuffer, result, position);
}
if (message.hasRepeatedStringPiece()) {
position = ProtobufOutputStream.writeRawBytes(repeated_string_pieceBuffer, result, position);
}
if (message.hasRepeatedCord()) {
position = ProtobufOutputStream.writeRawBytes(repeated_cordBuffer, result, position);
}
if (message.hasDefaultInt32()) {
position = ProtobufOutputStream.writeInt32(61, message.getDefaultInt32(), result, position);
}
if (message.hasDefaultInt64()) {
position = ProtobufOutputStream.writeInt64(62, message.getDefaultInt64(), result, position);
}
if (message.hasDefaultUint32()) {
position = ProtobufOutputStream.writeUint32(63, message.getDefaultUint32(), result, position);
}
if (message.hasDefaultUint64()) {
position = ProtobufOutputStream.writeUint64(64, message.getDefaultUint64(), result, position);
}
if (message.hasDefaultSint32()) {
position = ProtobufOutputStream.writeSint32(65, message.getDefaultSint32(), result, position);
}
if (message.hasDefaultSint64()) {
position = ProtobufOutputStream.writeSint64(66, message.getDefaultSint64(), result, position);
}
if (message.hasDefaultFixed32()) {
position = ProtobufOutputStream.writeFixed32(67, message.getDefaultFixed32(), result, position);
}
if (message.hasDefaultFixed64()) {
position = ProtobufOutputStream.writeFixed64(68, message.getDefaultFixed64(), result, position);
}
if (message.hasDefaultSfixed32()) {
position = ProtobufOutputStream.writeSfixed32(69, message.getDefaultSfixed32(), result, position);
}
if (message.hasDefaultSfixed64()) {
position = ProtobufOutputStream.writeSfixed64(70, message.getDefaultSfixed64(), result, position);
}
if (message.hasDefaultFloat()) {
position = ProtobufOutputStream.writeFloat(71, message.getDefaultFloat(), result, position);
}
if (message.hasDefaultDouble()) {
position = ProtobufOutputStream.writeDouble(72, message.getDefaultDouble(), result, position);
}
if (message.hasDefaultBool()) {
position = ProtobufOutputStream.writeBool(73, message.getDefaultBool(), result, position);
}
if (message.hasDefaultString()) {
position = ProtobufOutputStream.writeString(74,default_stringBuffer, result, position);
}
if (message.hasDefaultBytes()) {
position = ProtobufOutputStream.writeBytes(75, message.getDefaultBytes(), result, position);
}
if (message.hasDefaultNestedEnum()) {
position = ProtobufOutputStream.writeEnum(81, message.getDefaultNestedEnum().getValue(), result, position);
}
if (message.hasDefaultForeignEnum()) {
position = ProtobufOutputStream.writeEnum(82, message.getDefaultForeignEnum().getValue(), result, position);
}
if (message.hasDefaultImportEnum()) {
position = ProtobufOutputStream.writeEnum(83, message.getDefaultImportEnum().getValue(), result, position);
}
if (message.hasDefaultStringPiece()) {
position = ProtobufOutputStream.writeString(84,default_string_pieceBuffer, result, position);
}
if (message.hasDefaultCord()) {
position = ProtobufOutputStream.writeString(85,default_cordBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestAllTypes message, java.io.OutputStream os) {
try {
if (message.hasOptionalInt32()) {
ProtobufOutputStream.writeInt32(1, message.getOptionalInt32(), os);
}
if (message.hasOptionalInt64()) {
ProtobufOutputStream.writeInt64(2, message.getOptionalInt64(), os);
}
if (message.hasOptionalUint32()) {
ProtobufOutputStream.writeUint32(3, message.getOptionalUint32(), os);
}
if (message.hasOptionalUint64()) {
ProtobufOutputStream.writeUint64(4, message.getOptionalUint64(), os);
}
if (message.hasOptionalSint32()) {
ProtobufOutputStream.writeSint32(5, message.getOptionalSint32(), os);
}
if (message.hasOptionalSint64()) {
ProtobufOutputStream.writeSint64(6, message.getOptionalSint64(), os);
}
if (message.hasOptionalFixed32()) {
ProtobufOutputStream.writeFixed32(7, message.getOptionalFixed32(), os);
}
if (message.hasOptionalFixed64()) {
ProtobufOutputStream.writeFixed64(8, message.getOptionalFixed64(), os);
}
if (message.hasOptionalSfixed32()) {
ProtobufOutputStream.writeSfixed32(9, message.getOptionalSfixed32(), os);
}
if (message.hasOptionalSfixed64()) {
ProtobufOutputStream.writeSfixed64(10, message.getOptionalSfixed64(), os);
}
if (message.hasOptionalFloat()) {
ProtobufOutputStream.writeFloat(11, message.getOptionalFloat(), os);
}
if (message.hasOptionalDouble()) {
ProtobufOutputStream.writeDouble(12, message.getOptionalDouble(), os);
}
if (message.hasOptionalBool()) {
ProtobufOutputStream.writeBool(13, message.getOptionalBool(), os);
}
if (message.hasOptionalString()) {
ProtobufOutputStream.writeString(14, message.getOptionalString(), os);
}
if (message.hasOptionalBytes()) {
ProtobufOutputStream.writeBytes(15, message.getOptionalBytes(), os);
}
if (message.hasOptionalgroup()) {
ProtobufOutputStream.writeTag(16, ProtobufInputStream.WIRETYPE_GROUP_START, os);
os.write(protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroupSerializer.serialize(message.getOptionalgroup()));
ProtobufOutputStream.writeTag(16, ProtobufInputStream.WIRETYPE_GROUP_END, os);
}
if (message.hasOptionalNestedMessage()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getOptionalNestedMessage());
ProtobufOutputStream.writeMessageTag(18, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasOptionalForeignMessage()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getOptionalForeignMessage());
ProtobufOutputStream.writeMessageTag(19, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasOptionalImportMessage()) {
byte[] curMessageData = protobuf_gcless_import.ImportMessageSerializer.serialize(message.getOptionalImportMessage());
ProtobufOutputStream.writeMessageTag(20, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasOptionalNestedEnum()) {
ProtobufOutputStream.writeEnum(21, message.getOptionalNestedEnum().getValue(), os);
}
if (message.hasOptionalForeignEnum()) {
ProtobufOutputStream.writeEnum(22, message.getOptionalForeignEnum().getValue(), os);
}
if (message.hasOptionalImportEnum()) {
ProtobufOutputStream.writeEnum(23, message.getOptionalImportEnum().getValue(), os);
}
if (message.hasOptionalStringPiece()) {
ProtobufOutputStream.writeString(24, message.getOptionalStringPiece(), os);
}
if (message.hasOptionalCord()) {
ProtobufOutputStream.writeString(25, message.getOptionalCord(), os);
}
if (message.hasRepeatedInt32()) {
for( int i=0;i<message.getRepeatedInt32().size();i++) {
ProtobufOutputStream.writeInt32(31, message.getRepeatedInt32().get(i), os);
}
}
if (message.hasRepeatedInt64()) {
for( int i=0;i<message.getRepeatedInt64().size();i++) {
ProtobufOutputStream.writeInt64(32, message.getRepeatedInt64().get(i), os);
}
}
if (message.hasRepeatedUint32()) {
for( int i=0;i<message.getRepeatedUint32().size();i++) {
ProtobufOutputStream.writeUint32(33, message.getRepeatedUint32().get(i), os);
}
}
if (message.hasRepeatedUint64()) {
for( int i=0;i<message.getRepeatedUint64().size();i++) {
ProtobufOutputStream.writeUint64(34, message.getRepeatedUint64().get(i), os);
}
}
if (message.hasRepeatedSint32()) {
for( int i=0;i<message.getRepeatedSint32().size();i++) {
ProtobufOutputStream.writeSint32(35, message.getRepeatedSint32().get(i), os);
}
}
if (message.hasRepeatedSint64()) {
for( int i=0;i<message.getRepeatedSint64().size();i++) {
ProtobufOutputStream.writeSint64(36, message.getRepeatedSint64().get(i), os);
}
}
if (message.hasRepeatedFixed32()) {
for( int i=0;i<message.getRepeatedFixed32().size();i++) {
ProtobufOutputStream.writeFixed32(37, message.getRepeatedFixed32().get(i), os);
}
}
if (message.hasRepeatedFixed64()) {
for( int i=0;i<message.getRepeatedFixed64().size();i++) {
ProtobufOutputStream.writeFixed64(38, message.getRepeatedFixed64().get(i), os);
}
}
if (message.hasRepeatedSfixed32()) {
for( int i=0;i<message.getRepeatedSfixed32().size();i++) {
ProtobufOutputStream.writeSfixed32(39, message.getRepeatedSfixed32().get(i), os);
}
}
if (message.hasRepeatedSfixed64()) {
for( int i=0;i<message.getRepeatedSfixed64().size();i++) {
ProtobufOutputStream.writeSfixed64(40, message.getRepeatedSfixed64().get(i), os);
}
}
if (message.hasRepeatedFloat()) {
for( int i=0;i<message.getRepeatedFloat().size();i++) {
ProtobufOutputStream.writeFloat(41, message.getRepeatedFloat().get(i), os);
}
}
if (message.hasRepeatedDouble()) {
for( int i=0;i<message.getRepeatedDouble().size();i++) {
ProtobufOutputStream.writeDouble(42, message.getRepeatedDouble().get(i), os);
}
}
if (message.hasRepeatedBool()) {
for( int i=0;i<message.getRepeatedBool().size();i++) {
ProtobufOutputStream.writeBool(43, message.getRepeatedBool().get(i), os);
}
}
if (message.hasRepeatedString()) {
for( int i=0;i<message.getRepeatedString().size();i++) {
ProtobufOutputStream.writeString(44, message.getRepeatedString().get(i), os);
}
}
if (message.hasRepeatedBytes()) {
ProtobufOutputStream.writeBytes(45, message.getRepeatedBytes(), os);
}
if (message.hasRepeatedgroup()) {
for( int i=0;i<message.getRepeatedgroup().size();i++) {
ProtobufOutputStream.writeTag(46, ProtobufInputStream.WIRETYPE_GROUP_START, os);
os.write(protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroupSerializer.serialize(message.getRepeatedgroup().get(i)));
ProtobufOutputStream.writeTag(46, ProtobufInputStream.WIRETYPE_GROUP_END, os);
}
}
if (message.hasRepeatedNestedMessage()) {
for( int i=0;i<message.getRepeatedNestedMessage().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getRepeatedNestedMessage().get(i));
ProtobufOutputStream.writeMessageTag(48, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
}
if (message.hasRepeatedForeignMessage()) {
for( int i=0;i<message.getRepeatedForeignMessage().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getRepeatedForeignMessage().get(i));
ProtobufOutputStream.writeMessageTag(49, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
}
if (message.hasRepeatedImportMessage()) {
for( int i=0;i<message.getRepeatedImportMessage().size();i++) {
byte[] curMessageData = protobuf_gcless_import.ImportMessageSerializer.serialize(message.getRepeatedImportMessage().get(i));
ProtobufOutputStream.writeMessageTag(50, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
}
if (message.hasRepeatedNestedEnum()) {
for( int i=0;i<message.getRepeatedNestedEnum().size();i++) {
ProtobufOutputStream.writeEnum(51, message.getRepeatedNestedEnum().get(i).getValue(), os);
}
}
if (message.hasRepeatedForeignEnum()) {
for( int i=0;i<message.getRepeatedForeignEnum().size();i++) {
ProtobufOutputStream.writeEnum(52, message.getRepeatedForeignEnum().get(i).getValue(), os);
}
}
if (message.hasRepeatedImportEnum()) {
for( int i=0;i<message.getRepeatedImportEnum().size();i++) {
ProtobufOutputStream.writeEnum(53, message.getRepeatedImportEnum().get(i).getValue(), os);
}
}
if (message.hasRepeatedStringPiece()) {
for( int i=0;i<message.getRepeatedStringPiece().size();i++) {
ProtobufOutputStream.writeString(54, message.getRepeatedStringPiece().get(i), os);
}
}
if (message.hasRepeatedCord()) {
for( int i=0;i<message.getRepeatedCord().size();i++) {
ProtobufOutputStream.writeString(55, message.getRepeatedCord().get(i), os);
}
}
if (message.hasDefaultInt32()) {
ProtobufOutputStream.writeInt32(61, message.getDefaultInt32(), os);
}
if (message.hasDefaultInt64()) {
ProtobufOutputStream.writeInt64(62, message.getDefaultInt64(), os);
}
if (message.hasDefaultUint32()) {
ProtobufOutputStream.writeUint32(63, message.getDefaultUint32(), os);
}
if (message.hasDefaultUint64()) {
ProtobufOutputStream.writeUint64(64, message.getDefaultUint64(), os);
}
if (message.hasDefaultSint32()) {
ProtobufOutputStream.writeSint32(65, message.getDefaultSint32(), os);
}
if (message.hasDefaultSint64()) {
ProtobufOutputStream.writeSint64(66, message.getDefaultSint64(), os);
}
if (message.hasDefaultFixed32()) {
ProtobufOutputStream.writeFixed32(67, message.getDefaultFixed32(), os);
}
if (message.hasDefaultFixed64()) {
ProtobufOutputStream.writeFixed64(68, message.getDefaultFixed64(), os);
}
if (message.hasDefaultSfixed32()) {
ProtobufOutputStream.writeSfixed32(69, message.getDefaultSfixed32(), os);
}
if (message.hasDefaultSfixed64()) {
ProtobufOutputStream.writeSfixed64(70, message.getDefaultSfixed64(), os);
}
if (message.hasDefaultFloat()) {
ProtobufOutputStream.writeFloat(71, message.getDefaultFloat(), os);
}
if (message.hasDefaultDouble()) {
ProtobufOutputStream.writeDouble(72, message.getDefaultDouble(), os);
}
if (message.hasDefaultBool()) {
ProtobufOutputStream.writeBool(73, message.getDefaultBool(), os);
}
if (message.hasDefaultString()) {
ProtobufOutputStream.writeString(74, message.getDefaultString(), os);
}
if (message.hasDefaultBytes()) {
ProtobufOutputStream.writeBytes(75, message.getDefaultBytes(), os);
}
if (message.hasDefaultNestedEnum()) {
ProtobufOutputStream.writeEnum(81, message.getDefaultNestedEnum().getValue(), os);
}
if (message.hasDefaultForeignEnum()) {
ProtobufOutputStream.writeEnum(82, message.getDefaultForeignEnum().getValue(), os);
}
if (message.hasDefaultImportEnum()) {
ProtobufOutputStream.writeEnum(83, message.getDefaultImportEnum().getValue(), os);
}
if (message.hasDefaultStringPiece()) {
ProtobufOutputStream.writeString(84, message.getDefaultStringPiece(), os);
}
if (message.hasDefaultCord()) {
ProtobufOutputStream.writeString(85, message.getDefaultCord(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllTypes message = new protobuf_gcless_unittest.UnittestProto.TestAllTypes();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setOptionalInt32(ProtobufInputStream.readInt32(data,cursor));
break;
case 2: 
message.setOptionalInt64(ProtobufInputStream.readInt64(data,cursor));
break;
case 3: 
message.setOptionalUint32(ProtobufInputStream.readUint32(data,cursor));
break;
case 4: 
message.setOptionalUint64(ProtobufInputStream.readUint64(data,cursor));
break;
case 5: 
message.setOptionalSint32(ProtobufInputStream.readSint32(data,cursor));
break;
case 6: 
message.setOptionalSint64(ProtobufInputStream.readSint64(data,cursor));
break;
case 7: 
message.setOptionalFixed32(ProtobufInputStream.readFixed32(data,cursor));
break;
case 8: 
message.setOptionalFixed64(ProtobufInputStream.readFixed64(data,cursor));
break;
case 9: 
message.setOptionalSfixed32(ProtobufInputStream.readSfixed32(data,cursor));
break;
case 10: 
message.setOptionalSfixed64(ProtobufInputStream.readSfixed64(data,cursor));
break;
case 11: 
message.setOptionalFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 12: 
message.setOptionalDouble(ProtobufInputStream.readDouble(data,cursor));
break;
case 13: 
message.setOptionalBool(ProtobufInputStream.readBool(data,cursor));
break;
case 14: 
message.setOptionalString(ProtobufInputStream.readString(data,cursor));
break;
case 15: 
message.setOptionalBytes(ProtobufInputStream.readBytes(data,cursor));
break;
case 16: 
protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup tempOptionalgroup = protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroupSerializer.parseFrom(data, cursor);
message.setOptionalgroup(tempOptionalgroup);
break;
case 18: 
int lengthOptionalNestedMessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.setOptionalNestedMessage(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthOptionalNestedMessage));
cursor.addToPosition(lengthOptionalNestedMessage);
break;
case 19: 
int lengthOptionalForeignMessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.setOptionalForeignMessage(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthOptionalForeignMessage));
cursor.addToPosition(lengthOptionalForeignMessage);
break;
case 20: 
int lengthOptionalImportMessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.setOptionalImportMessage(protobuf_gcless_import.ImportMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthOptionalImportMessage));
cursor.addToPosition(lengthOptionalImportMessage);
break;
case 21: 
message.setOptionalNestedEnum(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 22: 
message.setOptionalForeignEnum(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 23: 
message.setOptionalImportEnum(protobuf_gcless_import.ImportEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 24: 
message.setOptionalStringPiece(ProtobufInputStream.readString(data,cursor));
break;
case 25: 
message.setOptionalCord(ProtobufInputStream.readString(data,cursor));
break;
case 31: 
if( message.getRepeatedInt32() == null || message.getRepeatedInt32().isEmpty()) {
message.setRepeatedInt32(new java.util.ArrayList<Integer>());
}
message.getRepeatedInt32().add(ProtobufInputStream.readInt32(data,cursor));
break;
case 32: 
if( message.getRepeatedInt64() == null || message.getRepeatedInt64().isEmpty()) {
message.setRepeatedInt64(new java.util.ArrayList<Long>());
}
message.getRepeatedInt64().add(ProtobufInputStream.readInt64(data,cursor));
break;
case 33: 
if( message.getRepeatedUint32() == null || message.getRepeatedUint32().isEmpty()) {
message.setRepeatedUint32(new java.util.ArrayList<Integer>());
}
message.getRepeatedUint32().add(ProtobufInputStream.readUint32(data,cursor));
break;
case 34: 
if( message.getRepeatedUint64() == null || message.getRepeatedUint64().isEmpty()) {
message.setRepeatedUint64(new java.util.ArrayList<Long>());
}
message.getRepeatedUint64().add(ProtobufInputStream.readUint64(data,cursor));
break;
case 35: 
if( message.getRepeatedSint32() == null || message.getRepeatedSint32().isEmpty()) {
message.setRepeatedSint32(new java.util.ArrayList<Integer>());
}
message.getRepeatedSint32().add(ProtobufInputStream.readSint32(data,cursor));
break;
case 36: 
if( message.getRepeatedSint64() == null || message.getRepeatedSint64().isEmpty()) {
message.setRepeatedSint64(new java.util.ArrayList<Long>());
}
message.getRepeatedSint64().add(ProtobufInputStream.readSint64(data,cursor));
break;
case 37: 
if( message.getRepeatedFixed32() == null || message.getRepeatedFixed32().isEmpty()) {
message.setRepeatedFixed32(new java.util.ArrayList<Integer>());
}
message.getRepeatedFixed32().add(ProtobufInputStream.readFixed32(data,cursor));
break;
case 38: 
if( message.getRepeatedFixed64() == null || message.getRepeatedFixed64().isEmpty()) {
message.setRepeatedFixed64(new java.util.ArrayList<Long>());
}
message.getRepeatedFixed64().add(ProtobufInputStream.readFixed64(data,cursor));
break;
case 39: 
if( message.getRepeatedSfixed32() == null || message.getRepeatedSfixed32().isEmpty()) {
message.setRepeatedSfixed32(new java.util.ArrayList<Integer>());
}
message.getRepeatedSfixed32().add(ProtobufInputStream.readSfixed32(data,cursor));
break;
case 40: 
if( message.getRepeatedSfixed64() == null || message.getRepeatedSfixed64().isEmpty()) {
message.setRepeatedSfixed64(new java.util.ArrayList<Long>());
}
message.getRepeatedSfixed64().add(ProtobufInputStream.readSfixed64(data,cursor));
break;
case 41: 
if( message.getRepeatedFloat() == null || message.getRepeatedFloat().isEmpty()) {
message.setRepeatedFloat(new java.util.ArrayList<Float>());
}
message.getRepeatedFloat().add(ProtobufInputStream.readFloat(data,cursor));
break;
case 42: 
if( message.getRepeatedDouble() == null || message.getRepeatedDouble().isEmpty()) {
message.setRepeatedDouble(new java.util.ArrayList<Double>());
}
message.getRepeatedDouble().add(ProtobufInputStream.readDouble(data,cursor));
break;
case 43: 
if( message.getRepeatedBool() == null || message.getRepeatedBool().isEmpty()) {
message.setRepeatedBool(new java.util.ArrayList<Boolean>());
}
message.getRepeatedBool().add(ProtobufInputStream.readBool(data,cursor));
break;
case 44: 
if( message.getRepeatedString() == null || message.getRepeatedString().isEmpty()) {
message.setRepeatedString(new java.util.ArrayList<String>());
}
message.getRepeatedString().add(ProtobufInputStream.readString(data,cursor));
break;
case 45: 
message.setRepeatedBytes(ProtobufInputStream.readBytes(data,cursor));
break;
case 46: 
if( message.getRepeatedgroup() == null || message.getRepeatedgroup().isEmpty()) {
message.setRepeatedgroup(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup>());
}
protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup tempRepeatedgroup = protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroupSerializer.parseFrom(data, cursor);
message.getRepeatedgroup().add(tempRepeatedgroup);
break;
case 48: 
if( message.getRepeatedNestedMessage() == null || message.getRepeatedNestedMessage().isEmpty()) {
message.setRepeatedNestedMessage(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage>());
}
int lengthRepeatedNestedMessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.getRepeatedNestedMessage().add(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthRepeatedNestedMessage));
cursor.addToPosition(lengthRepeatedNestedMessage);
break;
case 49: 
if( message.getRepeatedForeignMessage() == null || message.getRepeatedForeignMessage().isEmpty()) {
message.setRepeatedForeignMessage(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignMessage>());
}
int lengthRepeatedForeignMessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.getRepeatedForeignMessage().add(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthRepeatedForeignMessage));
cursor.addToPosition(lengthRepeatedForeignMessage);
break;
case 50: 
if( message.getRepeatedImportMessage() == null || message.getRepeatedImportMessage().isEmpty()) {
message.setRepeatedImportMessage(new java.util.ArrayList<protobuf_gcless_import.ImportMessage>());
}
int lengthRepeatedImportMessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.getRepeatedImportMessage().add(protobuf_gcless_import.ImportMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthRepeatedImportMessage));
cursor.addToPosition(lengthRepeatedImportMessage);
break;
case 51: 
if( message.getRepeatedNestedEnum() == null || message.getRepeatedNestedEnum().isEmpty()) {
message.setRepeatedNestedEnum(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum>());
}
message.getRepeatedNestedEnum().add(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 52: 
if( message.getRepeatedForeignEnum() == null || message.getRepeatedForeignEnum().isEmpty()) {
message.setRepeatedForeignEnum(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignEnum>());
}
message.getRepeatedForeignEnum().add(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 53: 
if( message.getRepeatedImportEnum() == null || message.getRepeatedImportEnum().isEmpty()) {
message.setRepeatedImportEnum(new java.util.ArrayList<protobuf_gcless_import.ImportEnum>());
}
message.getRepeatedImportEnum().add(protobuf_gcless_import.ImportEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 54: 
if( message.getRepeatedStringPiece() == null || message.getRepeatedStringPiece().isEmpty()) {
message.setRepeatedStringPiece(new java.util.ArrayList<String>());
}
message.getRepeatedStringPiece().add(ProtobufInputStream.readString(data,cursor));
break;
case 55: 
if( message.getRepeatedCord() == null || message.getRepeatedCord().isEmpty()) {
message.setRepeatedCord(new java.util.ArrayList<String>());
}
message.getRepeatedCord().add(ProtobufInputStream.readString(data,cursor));
break;
case 61: 
message.setDefaultInt32(ProtobufInputStream.readInt32(data,cursor));
break;
case 62: 
message.setDefaultInt64(ProtobufInputStream.readInt64(data,cursor));
break;
case 63: 
message.setDefaultUint32(ProtobufInputStream.readUint32(data,cursor));
break;
case 64: 
message.setDefaultUint64(ProtobufInputStream.readUint64(data,cursor));
break;
case 65: 
message.setDefaultSint32(ProtobufInputStream.readSint32(data,cursor));
break;
case 66: 
message.setDefaultSint64(ProtobufInputStream.readSint64(data,cursor));
break;
case 67: 
message.setDefaultFixed32(ProtobufInputStream.readFixed32(data,cursor));
break;
case 68: 
message.setDefaultFixed64(ProtobufInputStream.readFixed64(data,cursor));
break;
case 69: 
message.setDefaultSfixed32(ProtobufInputStream.readSfixed32(data,cursor));
break;
case 70: 
message.setDefaultSfixed64(ProtobufInputStream.readSfixed64(data,cursor));
break;
case 71: 
message.setDefaultFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 72: 
message.setDefaultDouble(ProtobufInputStream.readDouble(data,cursor));
break;
case 73: 
message.setDefaultBool(ProtobufInputStream.readBool(data,cursor));
break;
case 74: 
message.setDefaultString(ProtobufInputStream.readString(data,cursor));
break;
case 75: 
message.setDefaultBytes(ProtobufInputStream.readBytes(data,cursor));
break;
case 81: 
message.setDefaultNestedEnum(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 82: 
message.setDefaultForeignEnum(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 83: 
message.setDefaultImportEnum(protobuf_gcless_import.ImportEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 84: 
message.setDefaultStringPiece(ProtobufInputStream.readString(data,cursor));
break;
case 85: 
message.setDefaultCord(ProtobufInputStream.readString(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllTypes parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllTypes message = new protobuf_gcless_unittest.UnittestProto.TestAllTypes();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setOptionalInt32(ProtobufInputStream.readInt32(is,cursor));
break;
case 2: 
message.setOptionalInt64(ProtobufInputStream.readInt64(is,cursor));
break;
case 3: 
message.setOptionalUint32(ProtobufInputStream.readUint32(is,cursor));
break;
case 4: 
message.setOptionalUint64(ProtobufInputStream.readUint64(is,cursor));
break;
case 5: 
message.setOptionalSint32(ProtobufInputStream.readSint32(is,cursor));
break;
case 6: 
message.setOptionalSint64(ProtobufInputStream.readSint64(is,cursor));
break;
case 7: 
message.setOptionalFixed32(ProtobufInputStream.readFixed32(is,cursor));
break;
case 8: 
message.setOptionalFixed64(ProtobufInputStream.readFixed64(is,cursor));
break;
case 9: 
message.setOptionalSfixed32(ProtobufInputStream.readSfixed32(is,cursor));
break;
case 10: 
message.setOptionalSfixed64(ProtobufInputStream.readSfixed64(is,cursor));
break;
case 11: 
message.setOptionalFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 12: 
message.setOptionalDouble(ProtobufInputStream.readDouble(is,cursor));
break;
case 13: 
message.setOptionalBool(ProtobufInputStream.readBool(is,cursor));
break;
case 14: 
message.setOptionalString(ProtobufInputStream.readString(is,cursor));
break;
case 15: 
message.setOptionalBytes(ProtobufInputStream.readBytes(is,cursor));
break;
case 16: 
protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroup tempOptionalgroup = protobuf_gcless_unittest.UnittestProto.TestAllTypes.OptionalGroupSerializer.parseFrom(is, cursor);
message.setOptionalgroup(tempOptionalgroup);
break;
case 18: 
int lengthOptionalNestedMessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.setOptionalNestedMessage(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthOptionalNestedMessage));
cursor.addToPosition(lengthOptionalNestedMessage);
break;
case 19: 
int lengthOptionalForeignMessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.setOptionalForeignMessage(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthOptionalForeignMessage));
cursor.addToPosition(lengthOptionalForeignMessage);
break;
case 20: 
int lengthOptionalImportMessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.setOptionalImportMessage(protobuf_gcless_import.ImportMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthOptionalImportMessage));
cursor.addToPosition(lengthOptionalImportMessage);
break;
case 21: 
message.setOptionalNestedEnum(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 22: 
message.setOptionalForeignEnum(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 23: 
message.setOptionalImportEnum(protobuf_gcless_import.ImportEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 24: 
message.setOptionalStringPiece(ProtobufInputStream.readString(is,cursor));
break;
case 25: 
message.setOptionalCord(ProtobufInputStream.readString(is,cursor));
break;
case 31: 
if( message.getRepeatedInt32() == null || message.getRepeatedInt32().isEmpty()) {
message.setRepeatedInt32(new java.util.ArrayList<Integer>());
}
message.getRepeatedInt32().add(ProtobufInputStream.readInt32(is,cursor));
break;
case 32: 
if( message.getRepeatedInt64() == null || message.getRepeatedInt64().isEmpty()) {
message.setRepeatedInt64(new java.util.ArrayList<Long>());
}
message.getRepeatedInt64().add(ProtobufInputStream.readInt64(is,cursor));
break;
case 33: 
if( message.getRepeatedUint32() == null || message.getRepeatedUint32().isEmpty()) {
message.setRepeatedUint32(new java.util.ArrayList<Integer>());
}
message.getRepeatedUint32().add(ProtobufInputStream.readUint32(is,cursor));
break;
case 34: 
if( message.getRepeatedUint64() == null || message.getRepeatedUint64().isEmpty()) {
message.setRepeatedUint64(new java.util.ArrayList<Long>());
}
message.getRepeatedUint64().add(ProtobufInputStream.readUint64(is,cursor));
break;
case 35: 
if( message.getRepeatedSint32() == null || message.getRepeatedSint32().isEmpty()) {
message.setRepeatedSint32(new java.util.ArrayList<Integer>());
}
message.getRepeatedSint32().add(ProtobufInputStream.readSint32(is,cursor));
break;
case 36: 
if( message.getRepeatedSint64() == null || message.getRepeatedSint64().isEmpty()) {
message.setRepeatedSint64(new java.util.ArrayList<Long>());
}
message.getRepeatedSint64().add(ProtobufInputStream.readSint64(is,cursor));
break;
case 37: 
if( message.getRepeatedFixed32() == null || message.getRepeatedFixed32().isEmpty()) {
message.setRepeatedFixed32(new java.util.ArrayList<Integer>());
}
message.getRepeatedFixed32().add(ProtobufInputStream.readFixed32(is,cursor));
break;
case 38: 
if( message.getRepeatedFixed64() == null || message.getRepeatedFixed64().isEmpty()) {
message.setRepeatedFixed64(new java.util.ArrayList<Long>());
}
message.getRepeatedFixed64().add(ProtobufInputStream.readFixed64(is,cursor));
break;
case 39: 
if( message.getRepeatedSfixed32() == null || message.getRepeatedSfixed32().isEmpty()) {
message.setRepeatedSfixed32(new java.util.ArrayList<Integer>());
}
message.getRepeatedSfixed32().add(ProtobufInputStream.readSfixed32(is,cursor));
break;
case 40: 
if( message.getRepeatedSfixed64() == null || message.getRepeatedSfixed64().isEmpty()) {
message.setRepeatedSfixed64(new java.util.ArrayList<Long>());
}
message.getRepeatedSfixed64().add(ProtobufInputStream.readSfixed64(is,cursor));
break;
case 41: 
if( message.getRepeatedFloat() == null || message.getRepeatedFloat().isEmpty()) {
message.setRepeatedFloat(new java.util.ArrayList<Float>());
}
message.getRepeatedFloat().add(ProtobufInputStream.readFloat(is,cursor));
break;
case 42: 
if( message.getRepeatedDouble() == null || message.getRepeatedDouble().isEmpty()) {
message.setRepeatedDouble(new java.util.ArrayList<Double>());
}
message.getRepeatedDouble().add(ProtobufInputStream.readDouble(is,cursor));
break;
case 43: 
if( message.getRepeatedBool() == null || message.getRepeatedBool().isEmpty()) {
message.setRepeatedBool(new java.util.ArrayList<Boolean>());
}
message.getRepeatedBool().add(ProtobufInputStream.readBool(is,cursor));
break;
case 44: 
if( message.getRepeatedString() == null || message.getRepeatedString().isEmpty()) {
message.setRepeatedString(new java.util.ArrayList<String>());
}
message.getRepeatedString().add(ProtobufInputStream.readString(is,cursor));
break;
case 45: 
message.setRepeatedBytes(ProtobufInputStream.readBytes(is,cursor));
break;
case 46: 
if( message.getRepeatedgroup() == null || message.getRepeatedgroup().isEmpty()) {
message.setRepeatedgroup(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup>());
}
protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroup tempRepeatedgroup = protobuf_gcless_unittest.UnittestProto.TestAllTypes.RepeatedGroupSerializer.parseFrom(is, cursor);
message.getRepeatedgroup().add(tempRepeatedgroup);
break;
case 48: 
if( message.getRepeatedNestedMessage() == null || message.getRepeatedNestedMessage().isEmpty()) {
message.setRepeatedNestedMessage(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage>());
}
int lengthRepeatedNestedMessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.getRepeatedNestedMessage().add(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthRepeatedNestedMessage));
cursor.addToPosition(lengthRepeatedNestedMessage);
break;
case 49: 
if( message.getRepeatedForeignMessage() == null || message.getRepeatedForeignMessage().isEmpty()) {
message.setRepeatedForeignMessage(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignMessage>());
}
int lengthRepeatedForeignMessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.getRepeatedForeignMessage().add(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthRepeatedForeignMessage));
cursor.addToPosition(lengthRepeatedForeignMessage);
break;
case 50: 
if( message.getRepeatedImportMessage() == null || message.getRepeatedImportMessage().isEmpty()) {
message.setRepeatedImportMessage(new java.util.ArrayList<protobuf_gcless_import.ImportMessage>());
}
int lengthRepeatedImportMessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.getRepeatedImportMessage().add(protobuf_gcless_import.ImportMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthRepeatedImportMessage));
cursor.addToPosition(lengthRepeatedImportMessage);
break;
case 51: 
if( message.getRepeatedNestedEnum() == null || message.getRepeatedNestedEnum().isEmpty()) {
message.setRepeatedNestedEnum(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum>());
}
message.getRepeatedNestedEnum().add(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 52: 
if( message.getRepeatedForeignEnum() == null || message.getRepeatedForeignEnum().isEmpty()) {
message.setRepeatedForeignEnum(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignEnum>());
}
message.getRepeatedForeignEnum().add(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 53: 
if( message.getRepeatedImportEnum() == null || message.getRepeatedImportEnum().isEmpty()) {
message.setRepeatedImportEnum(new java.util.ArrayList<protobuf_gcless_import.ImportEnum>());
}
message.getRepeatedImportEnum().add(protobuf_gcless_import.ImportEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 54: 
if( message.getRepeatedStringPiece() == null || message.getRepeatedStringPiece().isEmpty()) {
message.setRepeatedStringPiece(new java.util.ArrayList<String>());
}
message.getRepeatedStringPiece().add(ProtobufInputStream.readString(is,cursor));
break;
case 55: 
if( message.getRepeatedCord() == null || message.getRepeatedCord().isEmpty()) {
message.setRepeatedCord(new java.util.ArrayList<String>());
}
message.getRepeatedCord().add(ProtobufInputStream.readString(is,cursor));
break;
case 61: 
message.setDefaultInt32(ProtobufInputStream.readInt32(is,cursor));
break;
case 62: 
message.setDefaultInt64(ProtobufInputStream.readInt64(is,cursor));
break;
case 63: 
message.setDefaultUint32(ProtobufInputStream.readUint32(is,cursor));
break;
case 64: 
message.setDefaultUint64(ProtobufInputStream.readUint64(is,cursor));
break;
case 65: 
message.setDefaultSint32(ProtobufInputStream.readSint32(is,cursor));
break;
case 66: 
message.setDefaultSint64(ProtobufInputStream.readSint64(is,cursor));
break;
case 67: 
message.setDefaultFixed32(ProtobufInputStream.readFixed32(is,cursor));
break;
case 68: 
message.setDefaultFixed64(ProtobufInputStream.readFixed64(is,cursor));
break;
case 69: 
message.setDefaultSfixed32(ProtobufInputStream.readSfixed32(is,cursor));
break;
case 70: 
message.setDefaultSfixed64(ProtobufInputStream.readSfixed64(is,cursor));
break;
case 71: 
message.setDefaultFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 72: 
message.setDefaultDouble(ProtobufInputStream.readDouble(is,cursor));
break;
case 73: 
message.setDefaultBool(ProtobufInputStream.readBool(is,cursor));
break;
case 74: 
message.setDefaultString(ProtobufInputStream.readString(is,cursor));
break;
case 75: 
message.setDefaultBytes(ProtobufInputStream.readBytes(is,cursor));
break;
case 81: 
message.setDefaultNestedEnum(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 82: 
message.setDefaultForeignEnum(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 83: 
message.setDefaultImportEnum(protobuf_gcless_import.ImportEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 84: 
message.setDefaultStringPiece(ProtobufInputStream.readString(is,cursor));
break;
case 85: 
message.setDefaultCord(ProtobufInputStream.readString(is,cursor));
break;
}
}
}
}
public static class TestDeprecatedFields {
private int deprecatedInt32;
private boolean hasDeprecatedInt32;
public boolean hasDeprecatedInt32() {
return hasDeprecatedInt32;
}
public int getDeprecatedInt32() {
return deprecatedInt32;
}
public void setDeprecatedInt32(int DeprecatedInt32) {
this.deprecatedInt32 = DeprecatedInt32;
this.hasDeprecatedInt32 = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestDeprecatedFields [");
a_.append(" deprecatedInt32=" + deprecatedInt32);
a_.append("]");
}
}
public static class TestDeprecatedFieldsSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields message) {
try {
int totalSize = 0;
if (message.hasDeprecatedInt32()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getDeprecatedInt32());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasDeprecatedInt32()) {
position = ProtobufOutputStream.writeInt32(1, message.getDeprecatedInt32(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields message, java.io.OutputStream os) {
try {
if (message.hasDeprecatedInt32()) {
ProtobufOutputStream.writeInt32(1, message.getDeprecatedInt32(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields message = new protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setDeprecatedInt32(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields message = new protobuf_gcless_unittest.UnittestProto.TestDeprecatedFields();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setDeprecatedInt32(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public static class ForeignMessage {
private int c;
private boolean hasC;
public boolean hasC() {
return hasC;
}
public int getC() {
return c;
}
public void setC(int C) {
this.c = C;
this.hasC = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("ForeignMessage [");
a_.append(" c=" + c);
a_.append("]");
}
}
public static class ForeignMessageSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.ForeignMessage message) {
try {
int totalSize = 0;
if (message.hasC()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getC());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasC()) {
position = ProtobufOutputStream.writeInt32(1, message.getC(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.ForeignMessage message, java.io.OutputStream os) {
try {
if (message.hasC()) {
ProtobufOutputStream.writeInt32(1, message.getC(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.ForeignMessage parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.ForeignMessage parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.ForeignMessage parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.ForeignMessage message = new protobuf_gcless_unittest.UnittestProto.ForeignMessage();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setC(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.ForeignMessage parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.ForeignMessage parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.ForeignMessage parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.ForeignMessage message = new protobuf_gcless_unittest.UnittestProto.ForeignMessage();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setC(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public static class TestAllExtensions {
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestAllExtensions [");
a_.append("]");
}
}
public static class TestAllExtensionsSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestAllExtensions message) {
return new byte[0];
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestAllExtensions message, java.io.OutputStream os) {
return; 
}
public static protobuf_gcless_unittest.UnittestProto.TestAllExtensions parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllExtensions parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllExtensions parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllExtensions message = new protobuf_gcless_unittest.UnittestProto.TestAllExtensions();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestAllExtensions parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllExtensions parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestAllExtensions parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestAllExtensions message = new protobuf_gcless_unittest.UnittestProto.TestAllExtensions();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;}
}
}
}
public static class TestNestedExtension {
private String test;
private boolean hasTest;
public boolean hasTest() {
return hasTest;
}
public String getTest() {
return test;
}
public void setTest(String Test) {
this.test = Test;
this.hasTest = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestNestedExtension [");
a_.append(" test=" + test);
a_.append("]");
}
}
public static class TestNestedExtensionSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestNestedExtension message) {
try {
int totalSize = 0;
byte[] testBuffer = null;
if (message.hasTest()) {
testBuffer = message.getTest().getBytes("UTF-8");
totalSize += testBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(1002);
totalSize += ProtobufOutputStream.computeRawVarint32Size(testBuffer.length);
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasTest()) {
position = ProtobufOutputStream.writeString(1002,testBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestNestedExtension message, java.io.OutputStream os) {
try {
if (message.hasTest()) {
ProtobufOutputStream.writeString(1002, message.getTest(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedExtension parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedExtension parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedExtension parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestNestedExtension message = new protobuf_gcless_unittest.UnittestProto.TestNestedExtension();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1002: 
message.setTest(ProtobufInputStream.readString(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedExtension parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedExtension parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedExtension parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestNestedExtension message = new protobuf_gcless_unittest.UnittestProto.TestNestedExtension();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1002: 
message.setTest(ProtobufInputStream.readString(is,cursor));
break;
}
}
}
}
public static class TestRequired {
private int a;
private boolean hasA;
public boolean hasA() {
return hasA;
}
public int getA() {
return a;
}
public void setA(int A) {
this.a = A;
this.hasA = true;
}
private int dummy2;
private boolean hasDummy2;
public boolean hasDummy2() {
return hasDummy2;
}
public int getDummy2() {
return dummy2;
}
public void setDummy2(int Dummy2) {
this.dummy2 = Dummy2;
this.hasDummy2 = true;
}
private int b;
private boolean hasB;
public boolean hasB() {
return hasB;
}
public int getB() {
return b;
}
public void setB(int B) {
this.b = B;
this.hasB = true;
}
private protobuf_gcless_unittest.UnittestProto.TestRequired single;
private boolean hasSingle;
public boolean hasSingle() {
return hasSingle;
}
public protobuf_gcless_unittest.UnittestProto.TestRequired getSingle() {
return single;
}
public void setSingle(protobuf_gcless_unittest.UnittestProto.TestRequired Single) {
this.single = Single;
this.hasSingle = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.TestRequired> multi;
private boolean hasMulti;
public boolean hasMulti() {
return hasMulti;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.TestRequired> getMulti() {
return multi;
}
public void setMulti(java.util.List<protobuf_gcless_unittest.UnittestProto.TestRequired> Multi) {
this.multi = Multi;
this.hasMulti = true;
}
private int dummy4;
private boolean hasDummy4;
public boolean hasDummy4() {
return hasDummy4;
}
public int getDummy4() {
return dummy4;
}
public void setDummy4(int Dummy4) {
this.dummy4 = Dummy4;
this.hasDummy4 = true;
}
private int dummy5;
private boolean hasDummy5;
public boolean hasDummy5() {
return hasDummy5;
}
public int getDummy5() {
return dummy5;
}
public void setDummy5(int Dummy5) {
this.dummy5 = Dummy5;
this.hasDummy5 = true;
}
private int dummy6;
private boolean hasDummy6;
public boolean hasDummy6() {
return hasDummy6;
}
public int getDummy6() {
return dummy6;
}
public void setDummy6(int Dummy6) {
this.dummy6 = Dummy6;
this.hasDummy6 = true;
}
private int dummy7;
private boolean hasDummy7;
public boolean hasDummy7() {
return hasDummy7;
}
public int getDummy7() {
return dummy7;
}
public void setDummy7(int Dummy7) {
this.dummy7 = Dummy7;
this.hasDummy7 = true;
}
private int dummy8;
private boolean hasDummy8;
public boolean hasDummy8() {
return hasDummy8;
}
public int getDummy8() {
return dummy8;
}
public void setDummy8(int Dummy8) {
this.dummy8 = Dummy8;
this.hasDummy8 = true;
}
private int dummy9;
private boolean hasDummy9;
public boolean hasDummy9() {
return hasDummy9;
}
public int getDummy9() {
return dummy9;
}
public void setDummy9(int Dummy9) {
this.dummy9 = Dummy9;
this.hasDummy9 = true;
}
private int dummy10;
private boolean hasDummy10;
public boolean hasDummy10() {
return hasDummy10;
}
public int getDummy10() {
return dummy10;
}
public void setDummy10(int Dummy10) {
this.dummy10 = Dummy10;
this.hasDummy10 = true;
}
private int dummy11;
private boolean hasDummy11;
public boolean hasDummy11() {
return hasDummy11;
}
public int getDummy11() {
return dummy11;
}
public void setDummy11(int Dummy11) {
this.dummy11 = Dummy11;
this.hasDummy11 = true;
}
private int dummy12;
private boolean hasDummy12;
public boolean hasDummy12() {
return hasDummy12;
}
public int getDummy12() {
return dummy12;
}
public void setDummy12(int Dummy12) {
this.dummy12 = Dummy12;
this.hasDummy12 = true;
}
private int dummy13;
private boolean hasDummy13;
public boolean hasDummy13() {
return hasDummy13;
}
public int getDummy13() {
return dummy13;
}
public void setDummy13(int Dummy13) {
this.dummy13 = Dummy13;
this.hasDummy13 = true;
}
private int dummy14;
private boolean hasDummy14;
public boolean hasDummy14() {
return hasDummy14;
}
public int getDummy14() {
return dummy14;
}
public void setDummy14(int Dummy14) {
this.dummy14 = Dummy14;
this.hasDummy14 = true;
}
private int dummy15;
private boolean hasDummy15;
public boolean hasDummy15() {
return hasDummy15;
}
public int getDummy15() {
return dummy15;
}
public void setDummy15(int Dummy15) {
this.dummy15 = Dummy15;
this.hasDummy15 = true;
}
private int dummy16;
private boolean hasDummy16;
public boolean hasDummy16() {
return hasDummy16;
}
public int getDummy16() {
return dummy16;
}
public void setDummy16(int Dummy16) {
this.dummy16 = Dummy16;
this.hasDummy16 = true;
}
private int dummy17;
private boolean hasDummy17;
public boolean hasDummy17() {
return hasDummy17;
}
public int getDummy17() {
return dummy17;
}
public void setDummy17(int Dummy17) {
this.dummy17 = Dummy17;
this.hasDummy17 = true;
}
private int dummy18;
private boolean hasDummy18;
public boolean hasDummy18() {
return hasDummy18;
}
public int getDummy18() {
return dummy18;
}
public void setDummy18(int Dummy18) {
this.dummy18 = Dummy18;
this.hasDummy18 = true;
}
private int dummy19;
private boolean hasDummy19;
public boolean hasDummy19() {
return hasDummy19;
}
public int getDummy19() {
return dummy19;
}
public void setDummy19(int Dummy19) {
this.dummy19 = Dummy19;
this.hasDummy19 = true;
}
private int dummy20;
private boolean hasDummy20;
public boolean hasDummy20() {
return hasDummy20;
}
public int getDummy20() {
return dummy20;
}
public void setDummy20(int Dummy20) {
this.dummy20 = Dummy20;
this.hasDummy20 = true;
}
private int dummy21;
private boolean hasDummy21;
public boolean hasDummy21() {
return hasDummy21;
}
public int getDummy21() {
return dummy21;
}
public void setDummy21(int Dummy21) {
this.dummy21 = Dummy21;
this.hasDummy21 = true;
}
private int dummy22;
private boolean hasDummy22;
public boolean hasDummy22() {
return hasDummy22;
}
public int getDummy22() {
return dummy22;
}
public void setDummy22(int Dummy22) {
this.dummy22 = Dummy22;
this.hasDummy22 = true;
}
private int dummy23;
private boolean hasDummy23;
public boolean hasDummy23() {
return hasDummy23;
}
public int getDummy23() {
return dummy23;
}
public void setDummy23(int Dummy23) {
this.dummy23 = Dummy23;
this.hasDummy23 = true;
}
private int dummy24;
private boolean hasDummy24;
public boolean hasDummy24() {
return hasDummy24;
}
public int getDummy24() {
return dummy24;
}
public void setDummy24(int Dummy24) {
this.dummy24 = Dummy24;
this.hasDummy24 = true;
}
private int dummy25;
private boolean hasDummy25;
public boolean hasDummy25() {
return hasDummy25;
}
public int getDummy25() {
return dummy25;
}
public void setDummy25(int Dummy25) {
this.dummy25 = Dummy25;
this.hasDummy25 = true;
}
private int dummy26;
private boolean hasDummy26;
public boolean hasDummy26() {
return hasDummy26;
}
public int getDummy26() {
return dummy26;
}
public void setDummy26(int Dummy26) {
this.dummy26 = Dummy26;
this.hasDummy26 = true;
}
private int dummy27;
private boolean hasDummy27;
public boolean hasDummy27() {
return hasDummy27;
}
public int getDummy27() {
return dummy27;
}
public void setDummy27(int Dummy27) {
this.dummy27 = Dummy27;
this.hasDummy27 = true;
}
private int dummy28;
private boolean hasDummy28;
public boolean hasDummy28() {
return hasDummy28;
}
public int getDummy28() {
return dummy28;
}
public void setDummy28(int Dummy28) {
this.dummy28 = Dummy28;
this.hasDummy28 = true;
}
private int dummy29;
private boolean hasDummy29;
public boolean hasDummy29() {
return hasDummy29;
}
public int getDummy29() {
return dummy29;
}
public void setDummy29(int Dummy29) {
this.dummy29 = Dummy29;
this.hasDummy29 = true;
}
private int dummy30;
private boolean hasDummy30;
public boolean hasDummy30() {
return hasDummy30;
}
public int getDummy30() {
return dummy30;
}
public void setDummy30(int Dummy30) {
this.dummy30 = Dummy30;
this.hasDummy30 = true;
}
private int dummy31;
private boolean hasDummy31;
public boolean hasDummy31() {
return hasDummy31;
}
public int getDummy31() {
return dummy31;
}
public void setDummy31(int Dummy31) {
this.dummy31 = Dummy31;
this.hasDummy31 = true;
}
private int dummy32;
private boolean hasDummy32;
public boolean hasDummy32() {
return hasDummy32;
}
public int getDummy32() {
return dummy32;
}
public void setDummy32(int Dummy32) {
this.dummy32 = Dummy32;
this.hasDummy32 = true;
}
private int c;
private boolean hasC;
public boolean hasC() {
return hasC;
}
public int getC() {
return c;
}
public void setC(int C) {
this.c = C;
this.hasC = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestRequired [");
a_.append(" a=" + a);
a_.append(",");
a_.append(" dummy2=" + dummy2);
a_.append(",");
a_.append(" b=" + b);
a_.append(",");
a_.append(" single=");
if ( single != null ) {
single.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" multi=");
if (multi != null ) {
a_.append("[");
for( int i=0;i<multi.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.TestRequired cur = multi.get(i);
if( i != 0 ) {
 a_.append(", ");
}
cur.toString(a_);
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" dummy4=" + dummy4);
a_.append(",");
a_.append(" dummy5=" + dummy5);
a_.append(",");
a_.append(" dummy6=" + dummy6);
a_.append(",");
a_.append(" dummy7=" + dummy7);
a_.append(",");
a_.append(" dummy8=" + dummy8);
a_.append(",");
a_.append(" dummy9=" + dummy9);
a_.append(",");
a_.append(" dummy10=" + dummy10);
a_.append(",");
a_.append(" dummy11=" + dummy11);
a_.append(",");
a_.append(" dummy12=" + dummy12);
a_.append(",");
a_.append(" dummy13=" + dummy13);
a_.append(",");
a_.append(" dummy14=" + dummy14);
a_.append(",");
a_.append(" dummy15=" + dummy15);
a_.append(",");
a_.append(" dummy16=" + dummy16);
a_.append(",");
a_.append(" dummy17=" + dummy17);
a_.append(",");
a_.append(" dummy18=" + dummy18);
a_.append(",");
a_.append(" dummy19=" + dummy19);
a_.append(",");
a_.append(" dummy20=" + dummy20);
a_.append(",");
a_.append(" dummy21=" + dummy21);
a_.append(",");
a_.append(" dummy22=" + dummy22);
a_.append(",");
a_.append(" dummy23=" + dummy23);
a_.append(",");
a_.append(" dummy24=" + dummy24);
a_.append(",");
a_.append(" dummy25=" + dummy25);
a_.append(",");
a_.append(" dummy26=" + dummy26);
a_.append(",");
a_.append(" dummy27=" + dummy27);
a_.append(",");
a_.append(" dummy28=" + dummy28);
a_.append(",");
a_.append(" dummy29=" + dummy29);
a_.append(",");
a_.append(" dummy30=" + dummy30);
a_.append(",");
a_.append(" dummy31=" + dummy31);
a_.append(",");
a_.append(" dummy32=" + dummy32);
a_.append(",");
a_.append(" c=" + c);
a_.append("]");
}
}
public static class TestRequiredSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestRequired message) {
try {
assertInitialized(message);
int totalSize = 0;
if (message.hasA()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getA());
}
if (message.hasDummy2()) {
totalSize += ProtobufOutputStream.computeInt32Size(2, message.getDummy2());
}
if (message.hasB()) {
totalSize += ProtobufOutputStream.computeInt32Size(3, message.getB());
}
byte[] singleBuffer = null;
if (message.hasSingle()) {
singleBuffer = protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getSingle());
totalSize += ProtobufOutputStream.computeTagSize(1000);
totalSize += ProtobufOutputStream.computeRawVarint32Size(singleBuffer.length);
totalSize += singleBuffer.length;
}
byte[] multiBuffer = null;
if (message.hasMulti()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getMulti().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getMulti().get(i));
ProtobufOutputStream.writeMessageTag(1001, baos);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, baos);
baos.write(curMessageData);
}
multiBuffer = baos.toByteArray();
totalSize += multiBuffer.length;
}
if (message.hasDummy4()) {
totalSize += ProtobufOutputStream.computeInt32Size(4, message.getDummy4());
}
if (message.hasDummy5()) {
totalSize += ProtobufOutputStream.computeInt32Size(5, message.getDummy5());
}
if (message.hasDummy6()) {
totalSize += ProtobufOutputStream.computeInt32Size(6, message.getDummy6());
}
if (message.hasDummy7()) {
totalSize += ProtobufOutputStream.computeInt32Size(7, message.getDummy7());
}
if (message.hasDummy8()) {
totalSize += ProtobufOutputStream.computeInt32Size(8, message.getDummy8());
}
if (message.hasDummy9()) {
totalSize += ProtobufOutputStream.computeInt32Size(9, message.getDummy9());
}
if (message.hasDummy10()) {
totalSize += ProtobufOutputStream.computeInt32Size(10, message.getDummy10());
}
if (message.hasDummy11()) {
totalSize += ProtobufOutputStream.computeInt32Size(11, message.getDummy11());
}
if (message.hasDummy12()) {
totalSize += ProtobufOutputStream.computeInt32Size(12, message.getDummy12());
}
if (message.hasDummy13()) {
totalSize += ProtobufOutputStream.computeInt32Size(13, message.getDummy13());
}
if (message.hasDummy14()) {
totalSize += ProtobufOutputStream.computeInt32Size(14, message.getDummy14());
}
if (message.hasDummy15()) {
totalSize += ProtobufOutputStream.computeInt32Size(15, message.getDummy15());
}
if (message.hasDummy16()) {
totalSize += ProtobufOutputStream.computeInt32Size(16, message.getDummy16());
}
if (message.hasDummy17()) {
totalSize += ProtobufOutputStream.computeInt32Size(17, message.getDummy17());
}
if (message.hasDummy18()) {
totalSize += ProtobufOutputStream.computeInt32Size(18, message.getDummy18());
}
if (message.hasDummy19()) {
totalSize += ProtobufOutputStream.computeInt32Size(19, message.getDummy19());
}
if (message.hasDummy20()) {
totalSize += ProtobufOutputStream.computeInt32Size(20, message.getDummy20());
}
if (message.hasDummy21()) {
totalSize += ProtobufOutputStream.computeInt32Size(21, message.getDummy21());
}
if (message.hasDummy22()) {
totalSize += ProtobufOutputStream.computeInt32Size(22, message.getDummy22());
}
if (message.hasDummy23()) {
totalSize += ProtobufOutputStream.computeInt32Size(23, message.getDummy23());
}
if (message.hasDummy24()) {
totalSize += ProtobufOutputStream.computeInt32Size(24, message.getDummy24());
}
if (message.hasDummy25()) {
totalSize += ProtobufOutputStream.computeInt32Size(25, message.getDummy25());
}
if (message.hasDummy26()) {
totalSize += ProtobufOutputStream.computeInt32Size(26, message.getDummy26());
}
if (message.hasDummy27()) {
totalSize += ProtobufOutputStream.computeInt32Size(27, message.getDummy27());
}
if (message.hasDummy28()) {
totalSize += ProtobufOutputStream.computeInt32Size(28, message.getDummy28());
}
if (message.hasDummy29()) {
totalSize += ProtobufOutputStream.computeInt32Size(29, message.getDummy29());
}
if (message.hasDummy30()) {
totalSize += ProtobufOutputStream.computeInt32Size(30, message.getDummy30());
}
if (message.hasDummy31()) {
totalSize += ProtobufOutputStream.computeInt32Size(31, message.getDummy31());
}
if (message.hasDummy32()) {
totalSize += ProtobufOutputStream.computeInt32Size(32, message.getDummy32());
}
if (message.hasC()) {
totalSize += ProtobufOutputStream.computeInt32Size(33, message.getC());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasA()) {
position = ProtobufOutputStream.writeInt32(1, message.getA(), result, position);
}
if (message.hasDummy2()) {
position = ProtobufOutputStream.writeInt32(2, message.getDummy2(), result, position);
}
if (message.hasB()) {
position = ProtobufOutputStream.writeInt32(3, message.getB(), result, position);
}
if (message.hasSingle()) {
position = ProtobufOutputStream.writeBytes(1000, singleBuffer, result, position);
}
if (message.hasMulti()) {
position = ProtobufOutputStream.writeRawBytes(multiBuffer, result, position);
}
if (message.hasDummy4()) {
position = ProtobufOutputStream.writeInt32(4, message.getDummy4(), result, position);
}
if (message.hasDummy5()) {
position = ProtobufOutputStream.writeInt32(5, message.getDummy5(), result, position);
}
if (message.hasDummy6()) {
position = ProtobufOutputStream.writeInt32(6, message.getDummy6(), result, position);
}
if (message.hasDummy7()) {
position = ProtobufOutputStream.writeInt32(7, message.getDummy7(), result, position);
}
if (message.hasDummy8()) {
position = ProtobufOutputStream.writeInt32(8, message.getDummy8(), result, position);
}
if (message.hasDummy9()) {
position = ProtobufOutputStream.writeInt32(9, message.getDummy9(), result, position);
}
if (message.hasDummy10()) {
position = ProtobufOutputStream.writeInt32(10, message.getDummy10(), result, position);
}
if (message.hasDummy11()) {
position = ProtobufOutputStream.writeInt32(11, message.getDummy11(), result, position);
}
if (message.hasDummy12()) {
position = ProtobufOutputStream.writeInt32(12, message.getDummy12(), result, position);
}
if (message.hasDummy13()) {
position = ProtobufOutputStream.writeInt32(13, message.getDummy13(), result, position);
}
if (message.hasDummy14()) {
position = ProtobufOutputStream.writeInt32(14, message.getDummy14(), result, position);
}
if (message.hasDummy15()) {
position = ProtobufOutputStream.writeInt32(15, message.getDummy15(), result, position);
}
if (message.hasDummy16()) {
position = ProtobufOutputStream.writeInt32(16, message.getDummy16(), result, position);
}
if (message.hasDummy17()) {
position = ProtobufOutputStream.writeInt32(17, message.getDummy17(), result, position);
}
if (message.hasDummy18()) {
position = ProtobufOutputStream.writeInt32(18, message.getDummy18(), result, position);
}
if (message.hasDummy19()) {
position = ProtobufOutputStream.writeInt32(19, message.getDummy19(), result, position);
}
if (message.hasDummy20()) {
position = ProtobufOutputStream.writeInt32(20, message.getDummy20(), result, position);
}
if (message.hasDummy21()) {
position = ProtobufOutputStream.writeInt32(21, message.getDummy21(), result, position);
}
if (message.hasDummy22()) {
position = ProtobufOutputStream.writeInt32(22, message.getDummy22(), result, position);
}
if (message.hasDummy23()) {
position = ProtobufOutputStream.writeInt32(23, message.getDummy23(), result, position);
}
if (message.hasDummy24()) {
position = ProtobufOutputStream.writeInt32(24, message.getDummy24(), result, position);
}
if (message.hasDummy25()) {
position = ProtobufOutputStream.writeInt32(25, message.getDummy25(), result, position);
}
if (message.hasDummy26()) {
position = ProtobufOutputStream.writeInt32(26, message.getDummy26(), result, position);
}
if (message.hasDummy27()) {
position = ProtobufOutputStream.writeInt32(27, message.getDummy27(), result, position);
}
if (message.hasDummy28()) {
position = ProtobufOutputStream.writeInt32(28, message.getDummy28(), result, position);
}
if (message.hasDummy29()) {
position = ProtobufOutputStream.writeInt32(29, message.getDummy29(), result, position);
}
if (message.hasDummy30()) {
position = ProtobufOutputStream.writeInt32(30, message.getDummy30(), result, position);
}
if (message.hasDummy31()) {
position = ProtobufOutputStream.writeInt32(31, message.getDummy31(), result, position);
}
if (message.hasDummy32()) {
position = ProtobufOutputStream.writeInt32(32, message.getDummy32(), result, position);
}
if (message.hasC()) {
position = ProtobufOutputStream.writeInt32(33, message.getC(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestRequired message, java.io.OutputStream os) {
try {
assertInitialized(message);
if (message.hasA()) {
ProtobufOutputStream.writeInt32(1, message.getA(), os);
}
if (message.hasDummy2()) {
ProtobufOutputStream.writeInt32(2, message.getDummy2(), os);
}
if (message.hasB()) {
ProtobufOutputStream.writeInt32(3, message.getB(), os);
}
if (message.hasSingle()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getSingle());
ProtobufOutputStream.writeMessageTag(1000, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasMulti()) {
for( int i=0;i<message.getMulti().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getMulti().get(i));
ProtobufOutputStream.writeMessageTag(1001, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
}
if (message.hasDummy4()) {
ProtobufOutputStream.writeInt32(4, message.getDummy4(), os);
}
if (message.hasDummy5()) {
ProtobufOutputStream.writeInt32(5, message.getDummy5(), os);
}
if (message.hasDummy6()) {
ProtobufOutputStream.writeInt32(6, message.getDummy6(), os);
}
if (message.hasDummy7()) {
ProtobufOutputStream.writeInt32(7, message.getDummy7(), os);
}
if (message.hasDummy8()) {
ProtobufOutputStream.writeInt32(8, message.getDummy8(), os);
}
if (message.hasDummy9()) {
ProtobufOutputStream.writeInt32(9, message.getDummy9(), os);
}
if (message.hasDummy10()) {
ProtobufOutputStream.writeInt32(10, message.getDummy10(), os);
}
if (message.hasDummy11()) {
ProtobufOutputStream.writeInt32(11, message.getDummy11(), os);
}
if (message.hasDummy12()) {
ProtobufOutputStream.writeInt32(12, message.getDummy12(), os);
}
if (message.hasDummy13()) {
ProtobufOutputStream.writeInt32(13, message.getDummy13(), os);
}
if (message.hasDummy14()) {
ProtobufOutputStream.writeInt32(14, message.getDummy14(), os);
}
if (message.hasDummy15()) {
ProtobufOutputStream.writeInt32(15, message.getDummy15(), os);
}
if (message.hasDummy16()) {
ProtobufOutputStream.writeInt32(16, message.getDummy16(), os);
}
if (message.hasDummy17()) {
ProtobufOutputStream.writeInt32(17, message.getDummy17(), os);
}
if (message.hasDummy18()) {
ProtobufOutputStream.writeInt32(18, message.getDummy18(), os);
}
if (message.hasDummy19()) {
ProtobufOutputStream.writeInt32(19, message.getDummy19(), os);
}
if (message.hasDummy20()) {
ProtobufOutputStream.writeInt32(20, message.getDummy20(), os);
}
if (message.hasDummy21()) {
ProtobufOutputStream.writeInt32(21, message.getDummy21(), os);
}
if (message.hasDummy22()) {
ProtobufOutputStream.writeInt32(22, message.getDummy22(), os);
}
if (message.hasDummy23()) {
ProtobufOutputStream.writeInt32(23, message.getDummy23(), os);
}
if (message.hasDummy24()) {
ProtobufOutputStream.writeInt32(24, message.getDummy24(), os);
}
if (message.hasDummy25()) {
ProtobufOutputStream.writeInt32(25, message.getDummy25(), os);
}
if (message.hasDummy26()) {
ProtobufOutputStream.writeInt32(26, message.getDummy26(), os);
}
if (message.hasDummy27()) {
ProtobufOutputStream.writeInt32(27, message.getDummy27(), os);
}
if (message.hasDummy28()) {
ProtobufOutputStream.writeInt32(28, message.getDummy28(), os);
}
if (message.hasDummy29()) {
ProtobufOutputStream.writeInt32(29, message.getDummy29(), os);
}
if (message.hasDummy30()) {
ProtobufOutputStream.writeInt32(30, message.getDummy30(), os);
}
if (message.hasDummy31()) {
ProtobufOutputStream.writeInt32(31, message.getDummy31(), os);
}
if (message.hasDummy32()) {
ProtobufOutputStream.writeInt32(32, message.getDummy32(), os);
}
if (message.hasC()) {
ProtobufOutputStream.writeInt32(33, message.getC(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestRequired parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRequired parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRequired parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestRequired message = new protobuf_gcless_unittest.UnittestProto.TestRequired();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setA(ProtobufInputStream.readInt32(data,cursor));
break;
case 2: 
message.setDummy2(ProtobufInputStream.readInt32(data,cursor));
break;
case 3: 
message.setB(ProtobufInputStream.readInt32(data,cursor));
break;
case 1000: 
int lengthSingle = ProtobufInputStream.readRawVarint32(data,cursor);
message.setSingle(protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthSingle));
cursor.addToPosition(lengthSingle);
break;
case 1001: 
if( message.getMulti() == null || message.getMulti().isEmpty()) {
message.setMulti(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestRequired>());
}
int lengthMulti = ProtobufInputStream.readRawVarint32(data,cursor);
message.getMulti().add(protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthMulti));
cursor.addToPosition(lengthMulti);
break;
case 4: 
message.setDummy4(ProtobufInputStream.readInt32(data,cursor));
break;
case 5: 
message.setDummy5(ProtobufInputStream.readInt32(data,cursor));
break;
case 6: 
message.setDummy6(ProtobufInputStream.readInt32(data,cursor));
break;
case 7: 
message.setDummy7(ProtobufInputStream.readInt32(data,cursor));
break;
case 8: 
message.setDummy8(ProtobufInputStream.readInt32(data,cursor));
break;
case 9: 
message.setDummy9(ProtobufInputStream.readInt32(data,cursor));
break;
case 10: 
message.setDummy10(ProtobufInputStream.readInt32(data,cursor));
break;
case 11: 
message.setDummy11(ProtobufInputStream.readInt32(data,cursor));
break;
case 12: 
message.setDummy12(ProtobufInputStream.readInt32(data,cursor));
break;
case 13: 
message.setDummy13(ProtobufInputStream.readInt32(data,cursor));
break;
case 14: 
message.setDummy14(ProtobufInputStream.readInt32(data,cursor));
break;
case 15: 
message.setDummy15(ProtobufInputStream.readInt32(data,cursor));
break;
case 16: 
message.setDummy16(ProtobufInputStream.readInt32(data,cursor));
break;
case 17: 
message.setDummy17(ProtobufInputStream.readInt32(data,cursor));
break;
case 18: 
message.setDummy18(ProtobufInputStream.readInt32(data,cursor));
break;
case 19: 
message.setDummy19(ProtobufInputStream.readInt32(data,cursor));
break;
case 20: 
message.setDummy20(ProtobufInputStream.readInt32(data,cursor));
break;
case 21: 
message.setDummy21(ProtobufInputStream.readInt32(data,cursor));
break;
case 22: 
message.setDummy22(ProtobufInputStream.readInt32(data,cursor));
break;
case 23: 
message.setDummy23(ProtobufInputStream.readInt32(data,cursor));
break;
case 24: 
message.setDummy24(ProtobufInputStream.readInt32(data,cursor));
break;
case 25: 
message.setDummy25(ProtobufInputStream.readInt32(data,cursor));
break;
case 26: 
message.setDummy26(ProtobufInputStream.readInt32(data,cursor));
break;
case 27: 
message.setDummy27(ProtobufInputStream.readInt32(data,cursor));
break;
case 28: 
message.setDummy28(ProtobufInputStream.readInt32(data,cursor));
break;
case 29: 
message.setDummy29(ProtobufInputStream.readInt32(data,cursor));
break;
case 30: 
message.setDummy30(ProtobufInputStream.readInt32(data,cursor));
break;
case 31: 
message.setDummy31(ProtobufInputStream.readInt32(data,cursor));
break;
case 32: 
message.setDummy32(ProtobufInputStream.readInt32(data,cursor));
break;
case 33: 
message.setC(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestRequired parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRequired parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRequired parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestRequired message = new protobuf_gcless_unittest.UnittestProto.TestRequired();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setA(ProtobufInputStream.readInt32(is,cursor));
break;
case 2: 
message.setDummy2(ProtobufInputStream.readInt32(is,cursor));
break;
case 3: 
message.setB(ProtobufInputStream.readInt32(is,cursor));
break;
case 1000: 
int lengthSingle = ProtobufInputStream.readRawVarint32(is,cursor);
message.setSingle(protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthSingle));
cursor.addToPosition(lengthSingle);
break;
case 1001: 
if( message.getMulti() == null || message.getMulti().isEmpty()) {
message.setMulti(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestRequired>());
}
int lengthMulti = ProtobufInputStream.readRawVarint32(is,cursor);
message.getMulti().add(protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthMulti));
cursor.addToPosition(lengthMulti);
break;
case 4: 
message.setDummy4(ProtobufInputStream.readInt32(is,cursor));
break;
case 5: 
message.setDummy5(ProtobufInputStream.readInt32(is,cursor));
break;
case 6: 
message.setDummy6(ProtobufInputStream.readInt32(is,cursor));
break;
case 7: 
message.setDummy7(ProtobufInputStream.readInt32(is,cursor));
break;
case 8: 
message.setDummy8(ProtobufInputStream.readInt32(is,cursor));
break;
case 9: 
message.setDummy9(ProtobufInputStream.readInt32(is,cursor));
break;
case 10: 
message.setDummy10(ProtobufInputStream.readInt32(is,cursor));
break;
case 11: 
message.setDummy11(ProtobufInputStream.readInt32(is,cursor));
break;
case 12: 
message.setDummy12(ProtobufInputStream.readInt32(is,cursor));
break;
case 13: 
message.setDummy13(ProtobufInputStream.readInt32(is,cursor));
break;
case 14: 
message.setDummy14(ProtobufInputStream.readInt32(is,cursor));
break;
case 15: 
message.setDummy15(ProtobufInputStream.readInt32(is,cursor));
break;
case 16: 
message.setDummy16(ProtobufInputStream.readInt32(is,cursor));
break;
case 17: 
message.setDummy17(ProtobufInputStream.readInt32(is,cursor));
break;
case 18: 
message.setDummy18(ProtobufInputStream.readInt32(is,cursor));
break;
case 19: 
message.setDummy19(ProtobufInputStream.readInt32(is,cursor));
break;
case 20: 
message.setDummy20(ProtobufInputStream.readInt32(is,cursor));
break;
case 21: 
message.setDummy21(ProtobufInputStream.readInt32(is,cursor));
break;
case 22: 
message.setDummy22(ProtobufInputStream.readInt32(is,cursor));
break;
case 23: 
message.setDummy23(ProtobufInputStream.readInt32(is,cursor));
break;
case 24: 
message.setDummy24(ProtobufInputStream.readInt32(is,cursor));
break;
case 25: 
message.setDummy25(ProtobufInputStream.readInt32(is,cursor));
break;
case 26: 
message.setDummy26(ProtobufInputStream.readInt32(is,cursor));
break;
case 27: 
message.setDummy27(ProtobufInputStream.readInt32(is,cursor));
break;
case 28: 
message.setDummy28(ProtobufInputStream.readInt32(is,cursor));
break;
case 29: 
message.setDummy29(ProtobufInputStream.readInt32(is,cursor));
break;
case 30: 
message.setDummy30(ProtobufInputStream.readInt32(is,cursor));
break;
case 31: 
message.setDummy31(ProtobufInputStream.readInt32(is,cursor));
break;
case 32: 
message.setDummy32(ProtobufInputStream.readInt32(is,cursor));
break;
case 33: 
message.setC(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
private static void assertInitialized(protobuf_gcless_unittest.UnittestProto.TestRequired message) {
if( !message.hasA()) {
throw new IllegalArgumentException("Required field not initialized: a");
}
if( !message.hasB()) {
throw new IllegalArgumentException("Required field not initialized: b");
}
if( !message.hasC()) {
throw new IllegalArgumentException("Required field not initialized: c");
}
}
}
public static class TestRequiredForeign {
private protobuf_gcless_unittest.UnittestProto.TestRequired optionalMessage;
private boolean hasOptionalMessage;
public boolean hasOptionalMessage() {
return hasOptionalMessage;
}
public protobuf_gcless_unittest.UnittestProto.TestRequired getOptionalMessage() {
return optionalMessage;
}
public void setOptionalMessage(protobuf_gcless_unittest.UnittestProto.TestRequired OptionalMessage) {
this.optionalMessage = OptionalMessage;
this.hasOptionalMessage = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.TestRequired> repeatedMessage;
private boolean hasRepeatedMessage;
public boolean hasRepeatedMessage() {
return hasRepeatedMessage;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.TestRequired> getRepeatedMessage() {
return repeatedMessage;
}
public void setRepeatedMessage(java.util.List<protobuf_gcless_unittest.UnittestProto.TestRequired> RepeatedMessage) {
this.repeatedMessage = RepeatedMessage;
this.hasRepeatedMessage = true;
}
private int dummy;
private boolean hasDummy;
public boolean hasDummy() {
return hasDummy;
}
public int getDummy() {
return dummy;
}
public void setDummy(int Dummy) {
this.dummy = Dummy;
this.hasDummy = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestRequiredForeign [");
a_.append(" optionalMessage=");
if ( optionalMessage != null ) {
optionalMessage.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedMessage=");
if (repeatedMessage != null ) {
a_.append("[");
for( int i=0;i<repeatedMessage.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.TestRequired cur = repeatedMessage.get(i);
if( i != 0 ) {
 a_.append(", ");
}
cur.toString(a_);
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" dummy=" + dummy);
a_.append("]");
}
}
public static class TestRequiredForeignSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestRequiredForeign message) {
try {
int totalSize = 0;
byte[] optional_messageBuffer = null;
if (message.hasOptionalMessage()) {
optional_messageBuffer = protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getOptionalMessage());
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_messageBuffer.length);
totalSize += optional_messageBuffer.length;
}
byte[] repeated_messageBuffer = null;
if (message.hasRepeatedMessage()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedMessage().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getRepeatedMessage().get(i));
ProtobufOutputStream.writeMessageTag(2, baos);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, baos);
baos.write(curMessageData);
}
repeated_messageBuffer = baos.toByteArray();
totalSize += repeated_messageBuffer.length;
}
if (message.hasDummy()) {
totalSize += ProtobufOutputStream.computeInt32Size(3, message.getDummy());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasOptionalMessage()) {
position = ProtobufOutputStream.writeBytes(1, optional_messageBuffer, result, position);
}
if (message.hasRepeatedMessage()) {
position = ProtobufOutputStream.writeRawBytes(repeated_messageBuffer, result, position);
}
if (message.hasDummy()) {
position = ProtobufOutputStream.writeInt32(3, message.getDummy(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestRequiredForeign message, java.io.OutputStream os) {
try {
if (message.hasOptionalMessage()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getOptionalMessage());
ProtobufOutputStream.writeMessageTag(1, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasRepeatedMessage()) {
for( int i=0;i<message.getRepeatedMessage().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getRepeatedMessage().get(i));
ProtobufOutputStream.writeMessageTag(2, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
}
if (message.hasDummy()) {
ProtobufOutputStream.writeInt32(3, message.getDummy(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestRequiredForeign parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRequiredForeign parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRequiredForeign parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestRequiredForeign message = new protobuf_gcless_unittest.UnittestProto.TestRequiredForeign();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
int lengthOptionalMessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.setOptionalMessage(protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthOptionalMessage));
cursor.addToPosition(lengthOptionalMessage);
break;
case 2: 
if( message.getRepeatedMessage() == null || message.getRepeatedMessage().isEmpty()) {
message.setRepeatedMessage(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestRequired>());
}
int lengthRepeatedMessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.getRepeatedMessage().add(protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthRepeatedMessage));
cursor.addToPosition(lengthRepeatedMessage);
break;
case 3: 
message.setDummy(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestRequiredForeign parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRequiredForeign parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRequiredForeign parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestRequiredForeign message = new protobuf_gcless_unittest.UnittestProto.TestRequiredForeign();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
int lengthOptionalMessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.setOptionalMessage(protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthOptionalMessage));
cursor.addToPosition(lengthOptionalMessage);
break;
case 2: 
if( message.getRepeatedMessage() == null || message.getRepeatedMessage().isEmpty()) {
message.setRepeatedMessage(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.TestRequired>());
}
int lengthRepeatedMessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.getRepeatedMessage().add(protobuf_gcless_unittest.UnittestProto.TestRequiredSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthRepeatedMessage));
cursor.addToPosition(lengthRepeatedMessage);
break;
case 3: 
message.setDummy(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public static class TestForeignNested {
private protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage foreignNested;
private boolean hasForeignNested;
public boolean hasForeignNested() {
return hasForeignNested;
}
public protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage getForeignNested() {
return foreignNested;
}
public void setForeignNested(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage ForeignNested) {
this.foreignNested = ForeignNested;
this.hasForeignNested = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestForeignNested [");
a_.append(" foreignNested=");
if ( foreignNested != null ) {
foreignNested.toString(a_);
} else {
a_.append("null");
}
a_.append("]");
}
}
public static class TestForeignNestedSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestForeignNested message) {
try {
int totalSize = 0;
byte[] foreign_nestedBuffer = null;
if (message.hasForeignNested()) {
foreign_nestedBuffer = protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getForeignNested());
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(foreign_nestedBuffer.length);
totalSize += foreign_nestedBuffer.length;
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasForeignNested()) {
position = ProtobufOutputStream.writeBytes(1, foreign_nestedBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestForeignNested message, java.io.OutputStream os) {
try {
if (message.hasForeignNested()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getForeignNested());
ProtobufOutputStream.writeMessageTag(1, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestForeignNested parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestForeignNested parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestForeignNested parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestForeignNested message = new protobuf_gcless_unittest.UnittestProto.TestForeignNested();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
int lengthForeignNested = ProtobufInputStream.readRawVarint32(data,cursor);
message.setForeignNested(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthForeignNested));
cursor.addToPosition(lengthForeignNested);
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestForeignNested parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestForeignNested parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestForeignNested parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestForeignNested message = new protobuf_gcless_unittest.UnittestProto.TestForeignNested();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
int lengthForeignNested = ProtobufInputStream.readRawVarint32(is,cursor);
message.setForeignNested(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthForeignNested));
cursor.addToPosition(lengthForeignNested);
break;
}
}
}
}
public static class TestEmptyMessage {
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestEmptyMessage [");
a_.append("]");
}
}
public static class TestEmptyMessageSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestEmptyMessage message) {
return new byte[0];
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestEmptyMessage message, java.io.OutputStream os) {
return; 
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessage parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessage parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessage parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestEmptyMessage message = new protobuf_gcless_unittest.UnittestProto.TestEmptyMessage();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessage parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessage parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessage parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestEmptyMessage message = new protobuf_gcless_unittest.UnittestProto.TestEmptyMessage();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;}
}
}
}
public static class TestEmptyMessageWithExtensions {
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestEmptyMessageWithExtensions [");
a_.append("]");
}
}
public static class TestEmptyMessageWithExtensionsSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions message) {
return new byte[0];
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions message, java.io.OutputStream os) {
return; 
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions message = new protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions message = new protobuf_gcless_unittest.UnittestProto.TestEmptyMessageWithExtensions();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;}
}
}
}
public static class TestMultipleExtensionRanges {
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestMultipleExtensionRanges [");
a_.append("]");
}
}
public static class TestMultipleExtensionRangesSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges message) {
return new byte[0];
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges message, java.io.OutputStream os) {
return; 
}
public static protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges message = new protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges message = new protobuf_gcless_unittest.UnittestProto.TestMultipleExtensionRanges();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;}
}
}
}
public static class TestReallyLargeTagNumber {
private int a;
private boolean hasA;
public boolean hasA() {
return hasA;
}
public int getA() {
return a;
}
public void setA(int A) {
this.a = A;
this.hasA = true;
}
private int bb;
private boolean hasBb;
public boolean hasBb() {
return hasBb;
}
public int getBb() {
return bb;
}
public void setBb(int Bb) {
this.bb = Bb;
this.hasBb = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestReallyLargeTagNumber [");
a_.append(" a=" + a);
a_.append(",");
a_.append(" bb=" + bb);
a_.append("]");
}
}
public static class TestReallyLargeTagNumberSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber message) {
try {
int totalSize = 0;
if (message.hasA()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getA());
}
if (message.hasBb()) {
totalSize += ProtobufOutputStream.computeInt32Size(268435455, message.getBb());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasA()) {
position = ProtobufOutputStream.writeInt32(1, message.getA(), result, position);
}
if (message.hasBb()) {
position = ProtobufOutputStream.writeInt32(268435455, message.getBb(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber message, java.io.OutputStream os) {
try {
if (message.hasA()) {
ProtobufOutputStream.writeInt32(1, message.getA(), os);
}
if (message.hasBb()) {
ProtobufOutputStream.writeInt32(268435455, message.getBb(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber message = new protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setA(ProtobufInputStream.readInt32(data,cursor));
break;
case 268435455: 
message.setBb(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber message = new protobuf_gcless_unittest.UnittestProto.TestReallyLargeTagNumber();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setA(ProtobufInputStream.readInt32(is,cursor));
break;
case 268435455: 
message.setBb(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public static class TestRecursiveMessage {
private protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage a;
private boolean hasA;
public boolean hasA() {
return hasA;
}
public protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage getA() {
return a;
}
public void setA(protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage A) {
this.a = A;
this.hasA = true;
}
private int i;
private boolean hasI;
public boolean hasI() {
return hasI;
}
public int getI() {
return i;
}
public void setI(int I) {
this.i = I;
this.hasI = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestRecursiveMessage [");
a_.append(" a=");
if ( a != null ) {
a.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" i=" + i);
a_.append("]");
}
}
public static class TestRecursiveMessageSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage message) {
try {
int totalSize = 0;
byte[] aBuffer = null;
if (message.hasA()) {
aBuffer = protobuf_gcless_unittest.UnittestProto.TestRecursiveMessageSerializer.serialize(message.getA());
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(aBuffer.length);
totalSize += aBuffer.length;
}
if (message.hasI()) {
totalSize += ProtobufOutputStream.computeInt32Size(2, message.getI());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasA()) {
position = ProtobufOutputStream.writeBytes(1, aBuffer, result, position);
}
if (message.hasI()) {
position = ProtobufOutputStream.writeInt32(2, message.getI(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage message, java.io.OutputStream os) {
try {
if (message.hasA()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestRecursiveMessageSerializer.serialize(message.getA());
ProtobufOutputStream.writeMessageTag(1, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasI()) {
ProtobufOutputStream.writeInt32(2, message.getI(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage message = new protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
int lengthA = ProtobufInputStream.readRawVarint32(data,cursor);
message.setA(protobuf_gcless_unittest.UnittestProto.TestRecursiveMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthA));
cursor.addToPosition(lengthA);
break;
case 2: 
message.setI(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage message = new protobuf_gcless_unittest.UnittestProto.TestRecursiveMessage();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
int lengthA = ProtobufInputStream.readRawVarint32(is,cursor);
message.setA(protobuf_gcless_unittest.UnittestProto.TestRecursiveMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthA));
cursor.addToPosition(lengthA);
break;
case 2: 
message.setI(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public static class TestMutualRecursionA {
private protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB bb;
private boolean hasBb;
public boolean hasBb() {
return hasBb;
}
public protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB getBb() {
return bb;
}
public void setBb(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB Bb) {
this.bb = Bb;
this.hasBb = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestMutualRecursionA [");
a_.append(" bb=");
if ( bb != null ) {
bb.toString(a_);
} else {
a_.append("null");
}
a_.append("]");
}
}
public static class TestMutualRecursionASerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA message) {
try {
int totalSize = 0;
byte[] bbBuffer = null;
if (message.hasBb()) {
bbBuffer = protobuf_gcless_unittest.UnittestProto.TestMutualRecursionBSerializer.serialize(message.getBb());
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(bbBuffer.length);
totalSize += bbBuffer.length;
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasBb()) {
position = ProtobufOutputStream.writeBytes(1, bbBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA message, java.io.OutputStream os) {
try {
if (message.hasBb()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestMutualRecursionBSerializer.serialize(message.getBb());
ProtobufOutputStream.writeMessageTag(1, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA message = new protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
int lengthBb = ProtobufInputStream.readRawVarint32(data,cursor);
message.setBb(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionBSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthBb));
cursor.addToPosition(lengthBb);
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA message = new protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
int lengthBb = ProtobufInputStream.readRawVarint32(is,cursor);
message.setBb(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionBSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthBb));
cursor.addToPosition(lengthBb);
break;
}
}
}
}
public static class TestMutualRecursionB {
private protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA a;
private boolean hasA;
public boolean hasA() {
return hasA;
}
public protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA getA() {
return a;
}
public void setA(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionA A) {
this.a = A;
this.hasA = true;
}
private int optionalInt32;
private boolean hasOptionalInt32;
public boolean hasOptionalInt32() {
return hasOptionalInt32;
}
public int getOptionalInt32() {
return optionalInt32;
}
public void setOptionalInt32(int OptionalInt32) {
this.optionalInt32 = OptionalInt32;
this.hasOptionalInt32 = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestMutualRecursionB [");
a_.append(" a=");
if ( a != null ) {
a.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" optionalInt32=" + optionalInt32);
a_.append("]");
}
}
public static class TestMutualRecursionBSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB message) {
try {
int totalSize = 0;
byte[] aBuffer = null;
if (message.hasA()) {
aBuffer = protobuf_gcless_unittest.UnittestProto.TestMutualRecursionASerializer.serialize(message.getA());
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(aBuffer.length);
totalSize += aBuffer.length;
}
if (message.hasOptionalInt32()) {
totalSize += ProtobufOutputStream.computeInt32Size(2, message.getOptionalInt32());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasA()) {
position = ProtobufOutputStream.writeBytes(1, aBuffer, result, position);
}
if (message.hasOptionalInt32()) {
position = ProtobufOutputStream.writeInt32(2, message.getOptionalInt32(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB message, java.io.OutputStream os) {
try {
if (message.hasA()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestMutualRecursionASerializer.serialize(message.getA());
ProtobufOutputStream.writeMessageTag(1, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasOptionalInt32()) {
ProtobufOutputStream.writeInt32(2, message.getOptionalInt32(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB message = new protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
int lengthA = ProtobufInputStream.readRawVarint32(data,cursor);
message.setA(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionASerializer.parseFrom(data, cursor.getCurrentPosition(), lengthA));
cursor.addToPosition(lengthA);
break;
case 2: 
message.setOptionalInt32(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB message = new protobuf_gcless_unittest.UnittestProto.TestMutualRecursionB();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
int lengthA = ProtobufInputStream.readRawVarint32(is,cursor);
message.setA(protobuf_gcless_unittest.UnittestProto.TestMutualRecursionASerializer.parseFrom(is, cursor.getCurrentPosition(), lengthA));
cursor.addToPosition(lengthA);
break;
case 2: 
message.setOptionalInt32(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public static class TestDupFieldNumber {
private int a;
private boolean hasA;
public boolean hasA() {
return hasA;
}
public int getA() {
return a;
}
public void setA(int A) {
this.a = A;
this.hasA = true;
}
private protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo foo;
private boolean hasFoo;
public boolean hasFoo() {
return hasFoo;
}
public protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo getFoo() {
return foo;
}
public void setFoo(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo Foo) {
this.foo = Foo;
this.hasFoo = true;
}
private protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar bar;
private boolean hasBar;
public boolean hasBar() {
return hasBar;
}
public protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar getBar() {
return bar;
}
public void setBar(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar Bar) {
this.bar = Bar;
this.hasBar = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestDupFieldNumber [");
a_.append(" a=" + a);
a_.append(",");
a_.append(" foo=");
if ( foo != null ) {
foo.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" bar=");
if ( bar != null ) {
bar.toString(a_);
} else {
a_.append("null");
}
a_.append("]");
}
public static class Foo {
private int a;
private boolean hasA;
public boolean hasA() {
return hasA;
}
public int getA() {
return a;
}
public void setA(int A) {
this.a = A;
this.hasA = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("Foo [");
a_.append(" a=" + a);
a_.append("]");
}
}
public static class FooSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo message) {
try {
int totalSize = 0;
if (message.hasA()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getA());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasA()) {
position = ProtobufOutputStream.writeInt32(1, message.getA(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo message, java.io.OutputStream os) {
try {
if (message.hasA()) {
ProtobufOutputStream.writeInt32(1, message.getA(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo message = new protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setA(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo message = new protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setA(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public static class Bar {
private int a;
private boolean hasA;
public boolean hasA() {
return hasA;
}
public int getA() {
return a;
}
public void setA(int A) {
this.a = A;
this.hasA = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("Bar [");
a_.append(" a=" + a);
a_.append("]");
}
}
public static class BarSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar message) {
try {
int totalSize = 0;
if (message.hasA()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getA());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasA()) {
position = ProtobufOutputStream.writeInt32(1, message.getA(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar message, java.io.OutputStream os) {
try {
if (message.hasA()) {
ProtobufOutputStream.writeInt32(1, message.getA(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar message = new protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setA(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar message = new protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
int wireType = varint & ProtobufInputStream.TAG_TYPE_MASK;
if (wireType == ProtobufInputStream.WIRETYPE_GROUP_END) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setA(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
}
public static class TestDupFieldNumberSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber message) {
try {
int totalSize = 0;
if (message.hasA()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getA());
}
byte[] fooBuffer = null;
if (message.hasFoo()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
ProtobufOutputStream.writeTag(2, ProtobufInputStream.WIRETYPE_GROUP_START, baos);
baos.write(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.FooSerializer.serialize(message.getFoo()));
ProtobufOutputStream.writeTag(2, ProtobufInputStream.WIRETYPE_GROUP_END, baos);
fooBuffer = baos.toByteArray();
totalSize += fooBuffer.length;
}
byte[] barBuffer = null;
if (message.hasBar()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
ProtobufOutputStream.writeTag(3, ProtobufInputStream.WIRETYPE_GROUP_START, baos);
baos.write(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.BarSerializer.serialize(message.getBar()));
ProtobufOutputStream.writeTag(3, ProtobufInputStream.WIRETYPE_GROUP_END, baos);
barBuffer = baos.toByteArray();
totalSize += barBuffer.length;
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasA()) {
position = ProtobufOutputStream.writeInt32(1, message.getA(), result, position);
}
if (message.hasFoo()) {
position = ProtobufOutputStream.writeRawBytes(fooBuffer, result, position);
}
if (message.hasBar()) {
position = ProtobufOutputStream.writeRawBytes(barBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber message, java.io.OutputStream os) {
try {
if (message.hasA()) {
ProtobufOutputStream.writeInt32(1, message.getA(), os);
}
if (message.hasFoo()) {
ProtobufOutputStream.writeTag(2, ProtobufInputStream.WIRETYPE_GROUP_START, os);
os.write(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.FooSerializer.serialize(message.getFoo()));
ProtobufOutputStream.writeTag(2, ProtobufInputStream.WIRETYPE_GROUP_END, os);
}
if (message.hasBar()) {
ProtobufOutputStream.writeTag(3, ProtobufInputStream.WIRETYPE_GROUP_START, os);
os.write(protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.BarSerializer.serialize(message.getBar()));
ProtobufOutputStream.writeTag(3, ProtobufInputStream.WIRETYPE_GROUP_END, os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber message = new protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setA(ProtobufInputStream.readInt32(data,cursor));
break;
case 2: 
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo tempFoo = protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.FooSerializer.parseFrom(data, cursor);
message.setFoo(tempFoo);
break;
case 3: 
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar tempBar = protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.BarSerializer.parseFrom(data, cursor);
message.setBar(tempBar);
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber message = new protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setA(ProtobufInputStream.readInt32(is,cursor));
break;
case 2: 
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Foo tempFoo = protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.FooSerializer.parseFrom(is, cursor);
message.setFoo(tempFoo);
break;
case 3: 
protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.Bar tempBar = protobuf_gcless_unittest.UnittestProto.TestDupFieldNumber.BarSerializer.parseFrom(is, cursor);
message.setBar(tempBar);
break;
}
}
}
}
public static class TestNestedMessageHasBits {
private protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage optionalNestedMessage;
private boolean hasOptionalNestedMessage;
public boolean hasOptionalNestedMessage() {
return hasOptionalNestedMessage;
}
public protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage getOptionalNestedMessage() {
return optionalNestedMessage;
}
public void setOptionalNestedMessage(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessage OptionalNestedMessage) {
this.optionalNestedMessage = OptionalNestedMessage;
this.hasOptionalNestedMessage = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestNestedMessageHasBits [");
a_.append(" optionalNestedMessage=");
if ( optionalNestedMessage != null ) {
optionalNestedMessage.toString(a_);
} else {
a_.append("null");
}
a_.append("]");
}
public static class NestedMessage {
private java.util.List<Integer> nestedmessageRepeatedInt32;
private boolean hasNestedmessageRepeatedInt32;
public boolean hasNestedmessageRepeatedInt32() {
return hasNestedmessageRepeatedInt32;
}
public java.util.List<Integer> getNestedmessageRepeatedInt32() {
return nestedmessageRepeatedInt32;
}
public void setNestedmessageRepeatedInt32(java.util.List<Integer> NestedmessageRepeatedInt32) {
this.nestedmessageRepeatedInt32 = NestedmessageRepeatedInt32;
this.hasNestedmessageRepeatedInt32 = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignMessage> nestedmessageRepeatedForeignmessage;
private boolean hasNestedmessageRepeatedForeignmessage;
public boolean hasNestedmessageRepeatedForeignmessage() {
return hasNestedmessageRepeatedForeignmessage;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignMessage> getNestedmessageRepeatedForeignmessage() {
return nestedmessageRepeatedForeignmessage;
}
public void setNestedmessageRepeatedForeignmessage(java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignMessage> NestedmessageRepeatedForeignmessage) {
this.nestedmessageRepeatedForeignmessage = NestedmessageRepeatedForeignmessage;
this.hasNestedmessageRepeatedForeignmessage = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("NestedMessage [");
a_.append(" nestedmessageRepeatedInt32=" + nestedmessageRepeatedInt32);
a_.append(",");
a_.append(" nestedmessageRepeatedForeignmessage=");
if (nestedmessageRepeatedForeignmessage != null ) {
a_.append("[");
for( int i=0;i<nestedmessageRepeatedForeignmessage.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.ForeignMessage cur = nestedmessageRepeatedForeignmessage.get(i);
if( i != 0 ) {
 a_.append(", ");
}
cur.toString(a_);
}
a_.append("]");
} else {
a_.append("null");
}
a_.append("]");
}
}
public static class NestedMessageSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage message) {
try {
int totalSize = 0;
if (message.hasNestedmessageRepeatedInt32()) {
for(int i=0;i<message.getNestedmessageRepeatedInt32().size();i++) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getNestedmessageRepeatedInt32().get(i));
}
}
byte[] nestedmessage_repeated_foreignmessageBuffer = null;
if (message.hasNestedmessageRepeatedForeignmessage()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getNestedmessageRepeatedForeignmessage().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getNestedmessageRepeatedForeignmessage().get(i));
ProtobufOutputStream.writeMessageTag(2, baos);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, baos);
baos.write(curMessageData);
}
nestedmessage_repeated_foreignmessageBuffer = baos.toByteArray();
totalSize += nestedmessage_repeated_foreignmessageBuffer.length;
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasNestedmessageRepeatedInt32()) {
position = ProtobufOutputStream.writeRepeatedInt32(1, message.getNestedmessageRepeatedInt32(), result, position);
}
if (message.hasNestedmessageRepeatedForeignmessage()) {
position = ProtobufOutputStream.writeRawBytes(nestedmessage_repeated_foreignmessageBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage message, java.io.OutputStream os) {
try {
if (message.hasNestedmessageRepeatedInt32()) {
for( int i=0;i<message.getNestedmessageRepeatedInt32().size();i++) {
ProtobufOutputStream.writeInt32(1, message.getNestedmessageRepeatedInt32().get(i), os);
}
}
if (message.hasNestedmessageRepeatedForeignmessage()) {
for( int i=0;i<message.getNestedmessageRepeatedForeignmessage().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getNestedmessageRepeatedForeignmessage().get(i));
ProtobufOutputStream.writeMessageTag(2, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage message = new protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
if( message.getNestedmessageRepeatedInt32() == null || message.getNestedmessageRepeatedInt32().isEmpty()) {
message.setNestedmessageRepeatedInt32(new java.util.ArrayList<Integer>());
}
message.getNestedmessageRepeatedInt32().add(ProtobufInputStream.readInt32(data,cursor));
break;
case 2: 
if( message.getNestedmessageRepeatedForeignmessage() == null || message.getNestedmessageRepeatedForeignmessage().isEmpty()) {
message.setNestedmessageRepeatedForeignmessage(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignMessage>());
}
int lengthNestedmessageRepeatedForeignmessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.getNestedmessageRepeatedForeignmessage().add(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthNestedmessageRepeatedForeignmessage));
cursor.addToPosition(lengthNestedmessageRepeatedForeignmessage);
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage message = new protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
if( message.getNestedmessageRepeatedInt32() == null || message.getNestedmessageRepeatedInt32().isEmpty()) {
message.setNestedmessageRepeatedInt32(new java.util.ArrayList<Integer>());
}
message.getNestedmessageRepeatedInt32().add(ProtobufInputStream.readInt32(is,cursor));
break;
case 2: 
if( message.getNestedmessageRepeatedForeignmessage() == null || message.getNestedmessageRepeatedForeignmessage().isEmpty()) {
message.setNestedmessageRepeatedForeignmessage(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignMessage>());
}
int lengthNestedmessageRepeatedForeignmessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.getNestedmessageRepeatedForeignmessage().add(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthNestedmessageRepeatedForeignmessage));
cursor.addToPosition(lengthNestedmessageRepeatedForeignmessage);
break;
}
}
}
}
}
public static class TestNestedMessageHasBitsSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits message) {
try {
int totalSize = 0;
byte[] optional_nested_messageBuffer = null;
if (message.hasOptionalNestedMessage()) {
optional_nested_messageBuffer = protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getOptionalNestedMessage());
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_nested_messageBuffer.length);
totalSize += optional_nested_messageBuffer.length;
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasOptionalNestedMessage()) {
position = ProtobufOutputStream.writeBytes(1, optional_nested_messageBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits message, java.io.OutputStream os) {
try {
if (message.hasOptionalNestedMessage()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getOptionalNestedMessage());
ProtobufOutputStream.writeMessageTag(1, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits message = new protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
int lengthOptionalNestedMessage = ProtobufInputStream.readRawVarint32(data,cursor);
message.setOptionalNestedMessage(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthOptionalNestedMessage));
cursor.addToPosition(lengthOptionalNestedMessage);
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits message = new protobuf_gcless_unittest.UnittestProto.TestNestedMessageHasBits();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
int lengthOptionalNestedMessage = ProtobufInputStream.readRawVarint32(is,cursor);
message.setOptionalNestedMessage(protobuf_gcless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthOptionalNestedMessage));
cursor.addToPosition(lengthOptionalNestedMessage);
break;
}
}
}
}
public static class TestCamelCaseFieldNames {
private int primitiveField;
private boolean hasPrimitiveField;
public boolean hasPrimitiveField() {
return hasPrimitiveField;
}
public int getPrimitiveField() {
return primitiveField;
}
public void setPrimitiveField(int PrimitiveField) {
this.primitiveField = PrimitiveField;
this.hasPrimitiveField = true;
}
private String stringField;
private boolean hasStringField;
public boolean hasStringField() {
return hasStringField;
}
public String getStringField() {
return stringField;
}
public void setStringField(String StringField) {
this.stringField = StringField;
this.hasStringField = true;
}
private protobuf_gcless_unittest.UnittestProto.ForeignEnum enumField;
private boolean hasEnumField;
public boolean hasEnumField() {
return hasEnumField;
}
public protobuf_gcless_unittest.UnittestProto.ForeignEnum getEnumField() {
return enumField;
}
public void setEnumField(protobuf_gcless_unittest.UnittestProto.ForeignEnum EnumField) {
this.enumField = EnumField;
this.hasEnumField = true;
}
private protobuf_gcless_unittest.UnittestProto.ForeignMessage messageField;
private boolean hasMessageField;
public boolean hasMessageField() {
return hasMessageField;
}
public protobuf_gcless_unittest.UnittestProto.ForeignMessage getMessageField() {
return messageField;
}
public void setMessageField(protobuf_gcless_unittest.UnittestProto.ForeignMessage MessageField) {
this.messageField = MessageField;
this.hasMessageField = true;
}
private String stringPieceField;
private boolean hasStringPieceField;
public boolean hasStringPieceField() {
return hasStringPieceField;
}
public String getStringPieceField() {
return stringPieceField;
}
public void setStringPieceField(String StringPieceField) {
this.stringPieceField = StringPieceField;
this.hasStringPieceField = true;
}
private String cordField;
private boolean hasCordField;
public boolean hasCordField() {
return hasCordField;
}
public String getCordField() {
return cordField;
}
public void setCordField(String CordField) {
this.cordField = CordField;
this.hasCordField = true;
}
private java.util.List<Integer> repeatedPrimitiveField;
private boolean hasRepeatedPrimitiveField;
public boolean hasRepeatedPrimitiveField() {
return hasRepeatedPrimitiveField;
}
public java.util.List<Integer> getRepeatedPrimitiveField() {
return repeatedPrimitiveField;
}
public void setRepeatedPrimitiveField(java.util.List<Integer> RepeatedPrimitiveField) {
this.repeatedPrimitiveField = RepeatedPrimitiveField;
this.hasRepeatedPrimitiveField = true;
}
private java.util.List<String> repeatedStringField;
private boolean hasRepeatedStringField;
public boolean hasRepeatedStringField() {
return hasRepeatedStringField;
}
public java.util.List<String> getRepeatedStringField() {
return repeatedStringField;
}
public void setRepeatedStringField(java.util.List<String> RepeatedStringField) {
this.repeatedStringField = RepeatedStringField;
this.hasRepeatedStringField = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> repeatedEnumField;
private boolean hasRepeatedEnumField;
public boolean hasRepeatedEnumField() {
return hasRepeatedEnumField;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> getRepeatedEnumField() {
return repeatedEnumField;
}
public void setRepeatedEnumField(java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> RepeatedEnumField) {
this.repeatedEnumField = RepeatedEnumField;
this.hasRepeatedEnumField = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignMessage> repeatedMessageField;
private boolean hasRepeatedMessageField;
public boolean hasRepeatedMessageField() {
return hasRepeatedMessageField;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignMessage> getRepeatedMessageField() {
return repeatedMessageField;
}
public void setRepeatedMessageField(java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignMessage> RepeatedMessageField) {
this.repeatedMessageField = RepeatedMessageField;
this.hasRepeatedMessageField = true;
}
private java.util.List<String> repeatedStringPieceField;
private boolean hasRepeatedStringPieceField;
public boolean hasRepeatedStringPieceField() {
return hasRepeatedStringPieceField;
}
public java.util.List<String> getRepeatedStringPieceField() {
return repeatedStringPieceField;
}
public void setRepeatedStringPieceField(java.util.List<String> RepeatedStringPieceField) {
this.repeatedStringPieceField = RepeatedStringPieceField;
this.hasRepeatedStringPieceField = true;
}
private java.util.List<String> repeatedCordField;
private boolean hasRepeatedCordField;
public boolean hasRepeatedCordField() {
return hasRepeatedCordField;
}
public java.util.List<String> getRepeatedCordField() {
return repeatedCordField;
}
public void setRepeatedCordField(java.util.List<String> RepeatedCordField) {
this.repeatedCordField = RepeatedCordField;
this.hasRepeatedCordField = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestCamelCaseFieldNames [");
a_.append(" primitiveField=" + primitiveField);
a_.append(",");
a_.append(" stringField=" + stringField);
a_.append(",");
a_.append(" enumField=");
if ( enumField != null ) {
a_.append(enumField.toString());
} else {
a_.append("null");
}
a_.append(",");
a_.append(" messageField=");
if ( messageField != null ) {
messageField.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" stringPieceField=" + stringPieceField);
a_.append(",");
a_.append(" cordField=" + cordField);
a_.append(",");
a_.append(" repeatedPrimitiveField=" + repeatedPrimitiveField);
a_.append(",");
a_.append(" repeatedStringField=" + repeatedStringField);
a_.append(",");
a_.append(" repeatedEnumField=");
if (repeatedEnumField != null ) {
a_.append("[");
for( int i=0;i<repeatedEnumField.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.ForeignEnum cur = repeatedEnumField.get(i);
if( i != 0 ) {
 a_.append(", ");
}
a_.append(cur.toString());
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedMessageField=");
if (repeatedMessageField != null ) {
a_.append("[");
for( int i=0;i<repeatedMessageField.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.ForeignMessage cur = repeatedMessageField.get(i);
if( i != 0 ) {
 a_.append(", ");
}
cur.toString(a_);
}
a_.append("]");
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedStringPieceField=" + repeatedStringPieceField);
a_.append(",");
a_.append(" repeatedCordField=" + repeatedCordField);
a_.append("]");
}
}
public static class TestCamelCaseFieldNamesSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames message) {
try {
int totalSize = 0;
if (message.hasPrimitiveField()) {
totalSize += ProtobufOutputStream.computeInt32Size(1, message.getPrimitiveField());
}
byte[] StringFieldBuffer = null;
if (message.hasStringField()) {
StringFieldBuffer = message.getStringField().getBytes("UTF-8");
totalSize += StringFieldBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(2);
totalSize += ProtobufOutputStream.computeRawVarint32Size(StringFieldBuffer.length);
}
if (message.hasEnumField()) {
totalSize += ProtobufOutputStream.computeEnumSize(3, message.getEnumField().getValue());
}
byte[] MessageFieldBuffer = null;
if (message.hasMessageField()) {
MessageFieldBuffer = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getMessageField());
totalSize += ProtobufOutputStream.computeTagSize(4);
totalSize += ProtobufOutputStream.computeRawVarint32Size(MessageFieldBuffer.length);
totalSize += MessageFieldBuffer.length;
}
byte[] StringPieceFieldBuffer = null;
if (message.hasStringPieceField()) {
StringPieceFieldBuffer = message.getStringPieceField().getBytes("UTF-8");
totalSize += StringPieceFieldBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(5);
totalSize += ProtobufOutputStream.computeRawVarint32Size(StringPieceFieldBuffer.length);
}
byte[] CordFieldBuffer = null;
if (message.hasCordField()) {
CordFieldBuffer = message.getCordField().getBytes("UTF-8");
totalSize += CordFieldBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(6);
totalSize += ProtobufOutputStream.computeRawVarint32Size(CordFieldBuffer.length);
}
if (message.hasRepeatedPrimitiveField()) {
for(int i=0;i<message.getRepeatedPrimitiveField().size();i++) {
totalSize += ProtobufOutputStream.computeInt32Size(7, message.getRepeatedPrimitiveField().get(i));
}
}
byte[] RepeatedStringFieldBuffer = null;
if (message.hasRepeatedStringField()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedStringField().size();i++) {
ProtobufOutputStream.writeString(8, message.getRepeatedStringField().get(i), baos);
}
RepeatedStringFieldBuffer = baos.toByteArray();
totalSize += RepeatedStringFieldBuffer.length;
}
byte[] RepeatedEnumFieldBuffer = null;
if (message.hasRepeatedEnumField()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedEnumField().size();i++) {
ProtobufOutputStream.writeEnum(9, message.getRepeatedEnumField().get(i).getValue(), baos);
}
RepeatedEnumFieldBuffer = baos.toByteArray();
totalSize += RepeatedEnumFieldBuffer.length;
}
byte[] RepeatedMessageFieldBuffer = null;
if (message.hasRepeatedMessageField()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedMessageField().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getRepeatedMessageField().get(i));
ProtobufOutputStream.writeMessageTag(10, baos);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, baos);
baos.write(curMessageData);
}
RepeatedMessageFieldBuffer = baos.toByteArray();
totalSize += RepeatedMessageFieldBuffer.length;
}
byte[] RepeatedStringPieceFieldBuffer = null;
if (message.hasRepeatedStringPieceField()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedStringPieceField().size();i++) {
ProtobufOutputStream.writeString(11, message.getRepeatedStringPieceField().get(i), baos);
}
RepeatedStringPieceFieldBuffer = baos.toByteArray();
totalSize += RepeatedStringPieceFieldBuffer.length;
}
byte[] RepeatedCordFieldBuffer = null;
if (message.hasRepeatedCordField()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedCordField().size();i++) {
ProtobufOutputStream.writeString(12, message.getRepeatedCordField().get(i), baos);
}
RepeatedCordFieldBuffer = baos.toByteArray();
totalSize += RepeatedCordFieldBuffer.length;
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasPrimitiveField()) {
position = ProtobufOutputStream.writeInt32(1, message.getPrimitiveField(), result, position);
}
if (message.hasStringField()) {
position = ProtobufOutputStream.writeString(2,StringFieldBuffer, result, position);
}
if (message.hasEnumField()) {
position = ProtobufOutputStream.writeEnum(3, message.getEnumField().getValue(), result, position);
}
if (message.hasMessageField()) {
position = ProtobufOutputStream.writeBytes(4, MessageFieldBuffer, result, position);
}
if (message.hasStringPieceField()) {
position = ProtobufOutputStream.writeString(5,StringPieceFieldBuffer, result, position);
}
if (message.hasCordField()) {
position = ProtobufOutputStream.writeString(6,CordFieldBuffer, result, position);
}
if (message.hasRepeatedPrimitiveField()) {
position = ProtobufOutputStream.writeRepeatedInt32(7, message.getRepeatedPrimitiveField(), result, position);
}
if (message.hasRepeatedStringField()) {
position = ProtobufOutputStream.writeRawBytes(RepeatedStringFieldBuffer, result, position);
}
if (message.hasRepeatedEnumField()) {
position = ProtobufOutputStream.writeRawBytes(RepeatedEnumFieldBuffer, result, position);
}
if (message.hasRepeatedMessageField()) {
position = ProtobufOutputStream.writeRawBytes(RepeatedMessageFieldBuffer, result, position);
}
if (message.hasRepeatedStringPieceField()) {
position = ProtobufOutputStream.writeRawBytes(RepeatedStringPieceFieldBuffer, result, position);
}
if (message.hasRepeatedCordField()) {
position = ProtobufOutputStream.writeRawBytes(RepeatedCordFieldBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames message, java.io.OutputStream os) {
try {
if (message.hasPrimitiveField()) {
ProtobufOutputStream.writeInt32(1, message.getPrimitiveField(), os);
}
if (message.hasStringField()) {
ProtobufOutputStream.writeString(2, message.getStringField(), os);
}
if (message.hasEnumField()) {
ProtobufOutputStream.writeEnum(3, message.getEnumField().getValue(), os);
}
if (message.hasMessageField()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getMessageField());
ProtobufOutputStream.writeMessageTag(4, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasStringPieceField()) {
ProtobufOutputStream.writeString(5, message.getStringPieceField(), os);
}
if (message.hasCordField()) {
ProtobufOutputStream.writeString(6, message.getCordField(), os);
}
if (message.hasRepeatedPrimitiveField()) {
for( int i=0;i<message.getRepeatedPrimitiveField().size();i++) {
ProtobufOutputStream.writeInt32(7, message.getRepeatedPrimitiveField().get(i), os);
}
}
if (message.hasRepeatedStringField()) {
for( int i=0;i<message.getRepeatedStringField().size();i++) {
ProtobufOutputStream.writeString(8, message.getRepeatedStringField().get(i), os);
}
}
if (message.hasRepeatedEnumField()) {
for( int i=0;i<message.getRepeatedEnumField().size();i++) {
ProtobufOutputStream.writeEnum(9, message.getRepeatedEnumField().get(i).getValue(), os);
}
}
if (message.hasRepeatedMessageField()) {
for( int i=0;i<message.getRepeatedMessageField().size();i++) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getRepeatedMessageField().get(i));
ProtobufOutputStream.writeMessageTag(10, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
}
if (message.hasRepeatedStringPieceField()) {
for( int i=0;i<message.getRepeatedStringPieceField().size();i++) {
ProtobufOutputStream.writeString(11, message.getRepeatedStringPieceField().get(i), os);
}
}
if (message.hasRepeatedCordField()) {
for( int i=0;i<message.getRepeatedCordField().size();i++) {
ProtobufOutputStream.writeString(12, message.getRepeatedCordField().get(i), os);
}
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames message = new protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setPrimitiveField(ProtobufInputStream.readInt32(data,cursor));
break;
case 2: 
message.setStringField(ProtobufInputStream.readString(data,cursor));
break;
case 3: 
message.setEnumField(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 4: 
int lengthMessageField = ProtobufInputStream.readRawVarint32(data,cursor);
message.setMessageField(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthMessageField));
cursor.addToPosition(lengthMessageField);
break;
case 5: 
message.setStringPieceField(ProtobufInputStream.readString(data,cursor));
break;
case 6: 
message.setCordField(ProtobufInputStream.readString(data,cursor));
break;
case 7: 
if( message.getRepeatedPrimitiveField() == null || message.getRepeatedPrimitiveField().isEmpty()) {
message.setRepeatedPrimitiveField(new java.util.ArrayList<Integer>());
}
message.getRepeatedPrimitiveField().add(ProtobufInputStream.readInt32(data,cursor));
break;
case 8: 
if( message.getRepeatedStringField() == null || message.getRepeatedStringField().isEmpty()) {
message.setRepeatedStringField(new java.util.ArrayList<String>());
}
message.getRepeatedStringField().add(ProtobufInputStream.readString(data,cursor));
break;
case 9: 
if( message.getRepeatedEnumField() == null || message.getRepeatedEnumField().isEmpty()) {
message.setRepeatedEnumField(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignEnum>());
}
message.getRepeatedEnumField().add(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 10: 
if( message.getRepeatedMessageField() == null || message.getRepeatedMessageField().isEmpty()) {
message.setRepeatedMessageField(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignMessage>());
}
int lengthRepeatedMessageField = ProtobufInputStream.readRawVarint32(data,cursor);
message.getRepeatedMessageField().add(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthRepeatedMessageField));
cursor.addToPosition(lengthRepeatedMessageField);
break;
case 11: 
if( message.getRepeatedStringPieceField() == null || message.getRepeatedStringPieceField().isEmpty()) {
message.setRepeatedStringPieceField(new java.util.ArrayList<String>());
}
message.getRepeatedStringPieceField().add(ProtobufInputStream.readString(data,cursor));
break;
case 12: 
if( message.getRepeatedCordField() == null || message.getRepeatedCordField().isEmpty()) {
message.setRepeatedCordField(new java.util.ArrayList<String>());
}
message.getRepeatedCordField().add(ProtobufInputStream.readString(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames message = new protobuf_gcless_unittest.UnittestProto.TestCamelCaseFieldNames();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setPrimitiveField(ProtobufInputStream.readInt32(is,cursor));
break;
case 2: 
message.setStringField(ProtobufInputStream.readString(is,cursor));
break;
case 3: 
message.setEnumField(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 4: 
int lengthMessageField = ProtobufInputStream.readRawVarint32(is,cursor);
message.setMessageField(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthMessageField));
cursor.addToPosition(lengthMessageField);
break;
case 5: 
message.setStringPieceField(ProtobufInputStream.readString(is,cursor));
break;
case 6: 
message.setCordField(ProtobufInputStream.readString(is,cursor));
break;
case 7: 
if( message.getRepeatedPrimitiveField() == null || message.getRepeatedPrimitiveField().isEmpty()) {
message.setRepeatedPrimitiveField(new java.util.ArrayList<Integer>());
}
message.getRepeatedPrimitiveField().add(ProtobufInputStream.readInt32(is,cursor));
break;
case 8: 
if( message.getRepeatedStringField() == null || message.getRepeatedStringField().isEmpty()) {
message.setRepeatedStringField(new java.util.ArrayList<String>());
}
message.getRepeatedStringField().add(ProtobufInputStream.readString(is,cursor));
break;
case 9: 
if( message.getRepeatedEnumField() == null || message.getRepeatedEnumField().isEmpty()) {
message.setRepeatedEnumField(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignEnum>());
}
message.getRepeatedEnumField().add(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 10: 
if( message.getRepeatedMessageField() == null || message.getRepeatedMessageField().isEmpty()) {
message.setRepeatedMessageField(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignMessage>());
}
int lengthRepeatedMessageField = ProtobufInputStream.readRawVarint32(is,cursor);
message.getRepeatedMessageField().add(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthRepeatedMessageField));
cursor.addToPosition(lengthRepeatedMessageField);
break;
case 11: 
if( message.getRepeatedStringPieceField() == null || message.getRepeatedStringPieceField().isEmpty()) {
message.setRepeatedStringPieceField(new java.util.ArrayList<String>());
}
message.getRepeatedStringPieceField().add(ProtobufInputStream.readString(is,cursor));
break;
case 12: 
if( message.getRepeatedCordField() == null || message.getRepeatedCordField().isEmpty()) {
message.setRepeatedCordField(new java.util.ArrayList<String>());
}
message.getRepeatedCordField().add(ProtobufInputStream.readString(is,cursor));
break;
}
}
}
}
public static class TestFieldOrderings {
private String myString;
private boolean hasMyString;
public boolean hasMyString() {
return hasMyString;
}
public String getMyString() {
return myString;
}
public void setMyString(String MyString) {
this.myString = MyString;
this.hasMyString = true;
}
private long myInt;
private boolean hasMyInt;
public boolean hasMyInt() {
return hasMyInt;
}
public long getMyInt() {
return myInt;
}
public void setMyInt(long MyInt) {
this.myInt = MyInt;
this.hasMyInt = true;
}
private float myFloat;
private boolean hasMyFloat;
public boolean hasMyFloat() {
return hasMyFloat;
}
public float getMyFloat() {
return myFloat;
}
public void setMyFloat(float MyFloat) {
this.myFloat = MyFloat;
this.hasMyFloat = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestFieldOrderings [");
a_.append(" myString=" + myString);
a_.append(",");
a_.append(" myInt=" + myInt);
a_.append(",");
a_.append(" myFloat=" + myFloat);
a_.append("]");
}
}
public static class TestFieldOrderingsSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestFieldOrderings message) {
try {
int totalSize = 0;
byte[] my_stringBuffer = null;
if (message.hasMyString()) {
my_stringBuffer = message.getMyString().getBytes("UTF-8");
totalSize += my_stringBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(11);
totalSize += ProtobufOutputStream.computeRawVarint32Size(my_stringBuffer.length);
}
if (message.hasMyInt()) {
totalSize += ProtobufOutputStream.computeInt64Size(1, message.getMyInt());
}
if (message.hasMyFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(101, message.getMyFloat());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasMyString()) {
position = ProtobufOutputStream.writeString(11,my_stringBuffer, result, position);
}
if (message.hasMyInt()) {
position = ProtobufOutputStream.writeInt64(1, message.getMyInt(), result, position);
}
if (message.hasMyFloat()) {
position = ProtobufOutputStream.writeFloat(101, message.getMyFloat(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestFieldOrderings message, java.io.OutputStream os) {
try {
if (message.hasMyString()) {
ProtobufOutputStream.writeString(11, message.getMyString(), os);
}
if (message.hasMyInt()) {
ProtobufOutputStream.writeInt64(1, message.getMyInt(), os);
}
if (message.hasMyFloat()) {
ProtobufOutputStream.writeFloat(101, message.getMyFloat(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestFieldOrderings parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestFieldOrderings parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestFieldOrderings parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestFieldOrderings message = new protobuf_gcless_unittest.UnittestProto.TestFieldOrderings();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 11: 
message.setMyString(ProtobufInputStream.readString(data,cursor));
break;
case 1: 
message.setMyInt(ProtobufInputStream.readInt64(data,cursor));
break;
case 101: 
message.setMyFloat(ProtobufInputStream.readFloat(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestFieldOrderings parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestFieldOrderings parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestFieldOrderings parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestFieldOrderings message = new protobuf_gcless_unittest.UnittestProto.TestFieldOrderings();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 11: 
message.setMyString(ProtobufInputStream.readString(is,cursor));
break;
case 1: 
message.setMyInt(ProtobufInputStream.readInt64(is,cursor));
break;
case 101: 
message.setMyFloat(ProtobufInputStream.readFloat(is,cursor));
break;
}
}
}
}
public static class TestExtremeDefaultValues {
private byte[] escapedBytes;
private boolean hasEscapedBytes;
public boolean hasEscapedBytes() {
return hasEscapedBytes;
}
public byte[] getEscapedBytes() {
return escapedBytes;
}
public void setEscapedBytes(byte[] EscapedBytes) {
this.escapedBytes = EscapedBytes;
this.hasEscapedBytes = true;
}
private int largeUint32;
private boolean hasLargeUint32;
public boolean hasLargeUint32() {
return hasLargeUint32;
}
public int getLargeUint32() {
return largeUint32;
}
public void setLargeUint32(int LargeUint32) {
this.largeUint32 = LargeUint32;
this.hasLargeUint32 = true;
}
private long largeUint64;
private boolean hasLargeUint64;
public boolean hasLargeUint64() {
return hasLargeUint64;
}
public long getLargeUint64() {
return largeUint64;
}
public void setLargeUint64(long LargeUint64) {
this.largeUint64 = LargeUint64;
this.hasLargeUint64 = true;
}
private int smallInt32;
private boolean hasSmallInt32;
public boolean hasSmallInt32() {
return hasSmallInt32;
}
public int getSmallInt32() {
return smallInt32;
}
public void setSmallInt32(int SmallInt32) {
this.smallInt32 = SmallInt32;
this.hasSmallInt32 = true;
}
private long smallInt64;
private boolean hasSmallInt64;
public boolean hasSmallInt64() {
return hasSmallInt64;
}
public long getSmallInt64() {
return smallInt64;
}
public void setSmallInt64(long SmallInt64) {
this.smallInt64 = SmallInt64;
this.hasSmallInt64 = true;
}
private String utf8String;
private boolean hasUtf8String;
public boolean hasUtf8String() {
return hasUtf8String;
}
public String getUtf8String() {
return utf8String;
}
public void setUtf8String(String Utf8String) {
this.utf8String = Utf8String;
this.hasUtf8String = true;
}
private float zeroFloat;
private boolean hasZeroFloat;
public boolean hasZeroFloat() {
return hasZeroFloat;
}
public float getZeroFloat() {
return zeroFloat;
}
public void setZeroFloat(float ZeroFloat) {
this.zeroFloat = ZeroFloat;
this.hasZeroFloat = true;
}
private float oneFloat;
private boolean hasOneFloat;
public boolean hasOneFloat() {
return hasOneFloat;
}
public float getOneFloat() {
return oneFloat;
}
public void setOneFloat(float OneFloat) {
this.oneFloat = OneFloat;
this.hasOneFloat = true;
}
private float smallFloat;
private boolean hasSmallFloat;
public boolean hasSmallFloat() {
return hasSmallFloat;
}
public float getSmallFloat() {
return smallFloat;
}
public void setSmallFloat(float SmallFloat) {
this.smallFloat = SmallFloat;
this.hasSmallFloat = true;
}
private float negativeOneFloat;
private boolean hasNegativeOneFloat;
public boolean hasNegativeOneFloat() {
return hasNegativeOneFloat;
}
public float getNegativeOneFloat() {
return negativeOneFloat;
}
public void setNegativeOneFloat(float NegativeOneFloat) {
this.negativeOneFloat = NegativeOneFloat;
this.hasNegativeOneFloat = true;
}
private float negativeFloat;
private boolean hasNegativeFloat;
public boolean hasNegativeFloat() {
return hasNegativeFloat;
}
public float getNegativeFloat() {
return negativeFloat;
}
public void setNegativeFloat(float NegativeFloat) {
this.negativeFloat = NegativeFloat;
this.hasNegativeFloat = true;
}
private float largeFloat;
private boolean hasLargeFloat;
public boolean hasLargeFloat() {
return hasLargeFloat;
}
public float getLargeFloat() {
return largeFloat;
}
public void setLargeFloat(float LargeFloat) {
this.largeFloat = LargeFloat;
this.hasLargeFloat = true;
}
private float smallNegativeFloat;
private boolean hasSmallNegativeFloat;
public boolean hasSmallNegativeFloat() {
return hasSmallNegativeFloat;
}
public float getSmallNegativeFloat() {
return smallNegativeFloat;
}
public void setSmallNegativeFloat(float SmallNegativeFloat) {
this.smallNegativeFloat = SmallNegativeFloat;
this.hasSmallNegativeFloat = true;
}
private double infDouble;
private boolean hasInfDouble;
public boolean hasInfDouble() {
return hasInfDouble;
}
public double getInfDouble() {
return infDouble;
}
public void setInfDouble(double InfDouble) {
this.infDouble = InfDouble;
this.hasInfDouble = true;
}
private double negInfDouble;
private boolean hasNegInfDouble;
public boolean hasNegInfDouble() {
return hasNegInfDouble;
}
public double getNegInfDouble() {
return negInfDouble;
}
public void setNegInfDouble(double NegInfDouble) {
this.negInfDouble = NegInfDouble;
this.hasNegInfDouble = true;
}
private double nanDouble;
private boolean hasNanDouble;
public boolean hasNanDouble() {
return hasNanDouble;
}
public double getNanDouble() {
return nanDouble;
}
public void setNanDouble(double NanDouble) {
this.nanDouble = NanDouble;
this.hasNanDouble = true;
}
private float infFloat;
private boolean hasInfFloat;
public boolean hasInfFloat() {
return hasInfFloat;
}
public float getInfFloat() {
return infFloat;
}
public void setInfFloat(float InfFloat) {
this.infFloat = InfFloat;
this.hasInfFloat = true;
}
private float negInfFloat;
private boolean hasNegInfFloat;
public boolean hasNegInfFloat() {
return hasNegInfFloat;
}
public float getNegInfFloat() {
return negInfFloat;
}
public void setNegInfFloat(float NegInfFloat) {
this.negInfFloat = NegInfFloat;
this.hasNegInfFloat = true;
}
private float nanFloat;
private boolean hasNanFloat;
public boolean hasNanFloat() {
return hasNanFloat;
}
public float getNanFloat() {
return nanFloat;
}
public void setNanFloat(float NanFloat) {
this.nanFloat = NanFloat;
this.hasNanFloat = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestExtremeDefaultValues [");
a_.append(" escapedBytes=" + escapedBytes);
a_.append(",");
a_.append(" largeUint32=" + largeUint32);
a_.append(",");
a_.append(" largeUint64=" + largeUint64);
a_.append(",");
a_.append(" smallInt32=" + smallInt32);
a_.append(",");
a_.append(" smallInt64=" + smallInt64);
a_.append(",");
a_.append(" utf8String=" + utf8String);
a_.append(",");
a_.append(" zeroFloat=" + zeroFloat);
a_.append(",");
a_.append(" oneFloat=" + oneFloat);
a_.append(",");
a_.append(" smallFloat=" + smallFloat);
a_.append(",");
a_.append(" negativeOneFloat=" + negativeOneFloat);
a_.append(",");
a_.append(" negativeFloat=" + negativeFloat);
a_.append(",");
a_.append(" largeFloat=" + largeFloat);
a_.append(",");
a_.append(" smallNegativeFloat=" + smallNegativeFloat);
a_.append(",");
a_.append(" infDouble=" + infDouble);
a_.append(",");
a_.append(" negInfDouble=" + negInfDouble);
a_.append(",");
a_.append(" nanDouble=" + nanDouble);
a_.append(",");
a_.append(" infFloat=" + infFloat);
a_.append(",");
a_.append(" negInfFloat=" + negInfFloat);
a_.append(",");
a_.append(" nanFloat=" + nanFloat);
a_.append("]");
}
}
public static class TestExtremeDefaultValuesSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues message) {
try {
int totalSize = 0;
if (message.hasEscapedBytes()) {
totalSize += message.getEscapedBytes().length;
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getEscapedBytes().length);
}
if (message.hasLargeUint32()) {
totalSize += ProtobufOutputStream.computeUint32Size(2, message.getLargeUint32());
}
if (message.hasLargeUint64()) {
totalSize += ProtobufOutputStream.computeUint64Size(3, message.getLargeUint64());
}
if (message.hasSmallInt32()) {
totalSize += ProtobufOutputStream.computeInt32Size(4, message.getSmallInt32());
}
if (message.hasSmallInt64()) {
totalSize += ProtobufOutputStream.computeInt64Size(5, message.getSmallInt64());
}
byte[] utf8_stringBuffer = null;
if (message.hasUtf8String()) {
utf8_stringBuffer = message.getUtf8String().getBytes("UTF-8");
totalSize += utf8_stringBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(6);
totalSize += ProtobufOutputStream.computeRawVarint32Size(utf8_stringBuffer.length);
}
if (message.hasZeroFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(7, message.getZeroFloat());
}
if (message.hasOneFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(8, message.getOneFloat());
}
if (message.hasSmallFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(9, message.getSmallFloat());
}
if (message.hasNegativeOneFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(10, message.getNegativeOneFloat());
}
if (message.hasNegativeFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(11, message.getNegativeFloat());
}
if (message.hasLargeFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(12, message.getLargeFloat());
}
if (message.hasSmallNegativeFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(13, message.getSmallNegativeFloat());
}
if (message.hasInfDouble()) {
totalSize += ProtobufOutputStream.computeDoubleSize(14, message.getInfDouble());
}
if (message.hasNegInfDouble()) {
totalSize += ProtobufOutputStream.computeDoubleSize(15, message.getNegInfDouble());
}
if (message.hasNanDouble()) {
totalSize += ProtobufOutputStream.computeDoubleSize(16, message.getNanDouble());
}
if (message.hasInfFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(17, message.getInfFloat());
}
if (message.hasNegInfFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(18, message.getNegInfFloat());
}
if (message.hasNanFloat()) {
totalSize += ProtobufOutputStream.computeFloatSize(19, message.getNanFloat());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasEscapedBytes()) {
position = ProtobufOutputStream.writeBytes(1, message.getEscapedBytes(), result, position);
}
if (message.hasLargeUint32()) {
position = ProtobufOutputStream.writeUint32(2, message.getLargeUint32(), result, position);
}
if (message.hasLargeUint64()) {
position = ProtobufOutputStream.writeUint64(3, message.getLargeUint64(), result, position);
}
if (message.hasSmallInt32()) {
position = ProtobufOutputStream.writeInt32(4, message.getSmallInt32(), result, position);
}
if (message.hasSmallInt64()) {
position = ProtobufOutputStream.writeInt64(5, message.getSmallInt64(), result, position);
}
if (message.hasUtf8String()) {
position = ProtobufOutputStream.writeString(6,utf8_stringBuffer, result, position);
}
if (message.hasZeroFloat()) {
position = ProtobufOutputStream.writeFloat(7, message.getZeroFloat(), result, position);
}
if (message.hasOneFloat()) {
position = ProtobufOutputStream.writeFloat(8, message.getOneFloat(), result, position);
}
if (message.hasSmallFloat()) {
position = ProtobufOutputStream.writeFloat(9, message.getSmallFloat(), result, position);
}
if (message.hasNegativeOneFloat()) {
position = ProtobufOutputStream.writeFloat(10, message.getNegativeOneFloat(), result, position);
}
if (message.hasNegativeFloat()) {
position = ProtobufOutputStream.writeFloat(11, message.getNegativeFloat(), result, position);
}
if (message.hasLargeFloat()) {
position = ProtobufOutputStream.writeFloat(12, message.getLargeFloat(), result, position);
}
if (message.hasSmallNegativeFloat()) {
position = ProtobufOutputStream.writeFloat(13, message.getSmallNegativeFloat(), result, position);
}
if (message.hasInfDouble()) {
position = ProtobufOutputStream.writeDouble(14, message.getInfDouble(), result, position);
}
if (message.hasNegInfDouble()) {
position = ProtobufOutputStream.writeDouble(15, message.getNegInfDouble(), result, position);
}
if (message.hasNanDouble()) {
position = ProtobufOutputStream.writeDouble(16, message.getNanDouble(), result, position);
}
if (message.hasInfFloat()) {
position = ProtobufOutputStream.writeFloat(17, message.getInfFloat(), result, position);
}
if (message.hasNegInfFloat()) {
position = ProtobufOutputStream.writeFloat(18, message.getNegInfFloat(), result, position);
}
if (message.hasNanFloat()) {
position = ProtobufOutputStream.writeFloat(19, message.getNanFloat(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues message, java.io.OutputStream os) {
try {
if (message.hasEscapedBytes()) {
ProtobufOutputStream.writeBytes(1, message.getEscapedBytes(), os);
}
if (message.hasLargeUint32()) {
ProtobufOutputStream.writeUint32(2, message.getLargeUint32(), os);
}
if (message.hasLargeUint64()) {
ProtobufOutputStream.writeUint64(3, message.getLargeUint64(), os);
}
if (message.hasSmallInt32()) {
ProtobufOutputStream.writeInt32(4, message.getSmallInt32(), os);
}
if (message.hasSmallInt64()) {
ProtobufOutputStream.writeInt64(5, message.getSmallInt64(), os);
}
if (message.hasUtf8String()) {
ProtobufOutputStream.writeString(6, message.getUtf8String(), os);
}
if (message.hasZeroFloat()) {
ProtobufOutputStream.writeFloat(7, message.getZeroFloat(), os);
}
if (message.hasOneFloat()) {
ProtobufOutputStream.writeFloat(8, message.getOneFloat(), os);
}
if (message.hasSmallFloat()) {
ProtobufOutputStream.writeFloat(9, message.getSmallFloat(), os);
}
if (message.hasNegativeOneFloat()) {
ProtobufOutputStream.writeFloat(10, message.getNegativeOneFloat(), os);
}
if (message.hasNegativeFloat()) {
ProtobufOutputStream.writeFloat(11, message.getNegativeFloat(), os);
}
if (message.hasLargeFloat()) {
ProtobufOutputStream.writeFloat(12, message.getLargeFloat(), os);
}
if (message.hasSmallNegativeFloat()) {
ProtobufOutputStream.writeFloat(13, message.getSmallNegativeFloat(), os);
}
if (message.hasInfDouble()) {
ProtobufOutputStream.writeDouble(14, message.getInfDouble(), os);
}
if (message.hasNegInfDouble()) {
ProtobufOutputStream.writeDouble(15, message.getNegInfDouble(), os);
}
if (message.hasNanDouble()) {
ProtobufOutputStream.writeDouble(16, message.getNanDouble(), os);
}
if (message.hasInfFloat()) {
ProtobufOutputStream.writeFloat(17, message.getInfFloat(), os);
}
if (message.hasNegInfFloat()) {
ProtobufOutputStream.writeFloat(18, message.getNegInfFloat(), os);
}
if (message.hasNanFloat()) {
ProtobufOutputStream.writeFloat(19, message.getNanFloat(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues message = new protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setEscapedBytes(ProtobufInputStream.readBytes(data,cursor));
break;
case 2: 
message.setLargeUint32(ProtobufInputStream.readUint32(data,cursor));
break;
case 3: 
message.setLargeUint64(ProtobufInputStream.readUint64(data,cursor));
break;
case 4: 
message.setSmallInt32(ProtobufInputStream.readInt32(data,cursor));
break;
case 5: 
message.setSmallInt64(ProtobufInputStream.readInt64(data,cursor));
break;
case 6: 
message.setUtf8String(ProtobufInputStream.readString(data,cursor));
break;
case 7: 
message.setZeroFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 8: 
message.setOneFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 9: 
message.setSmallFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 10: 
message.setNegativeOneFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 11: 
message.setNegativeFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 12: 
message.setLargeFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 13: 
message.setSmallNegativeFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 14: 
message.setInfDouble(ProtobufInputStream.readDouble(data,cursor));
break;
case 15: 
message.setNegInfDouble(ProtobufInputStream.readDouble(data,cursor));
break;
case 16: 
message.setNanDouble(ProtobufInputStream.readDouble(data,cursor));
break;
case 17: 
message.setInfFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 18: 
message.setNegInfFloat(ProtobufInputStream.readFloat(data,cursor));
break;
case 19: 
message.setNanFloat(ProtobufInputStream.readFloat(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues message = new protobuf_gcless_unittest.UnittestProto.TestExtremeDefaultValues();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setEscapedBytes(ProtobufInputStream.readBytes(is,cursor));
break;
case 2: 
message.setLargeUint32(ProtobufInputStream.readUint32(is,cursor));
break;
case 3: 
message.setLargeUint64(ProtobufInputStream.readUint64(is,cursor));
break;
case 4: 
message.setSmallInt32(ProtobufInputStream.readInt32(is,cursor));
break;
case 5: 
message.setSmallInt64(ProtobufInputStream.readInt64(is,cursor));
break;
case 6: 
message.setUtf8String(ProtobufInputStream.readString(is,cursor));
break;
case 7: 
message.setZeroFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 8: 
message.setOneFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 9: 
message.setSmallFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 10: 
message.setNegativeOneFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 11: 
message.setNegativeFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 12: 
message.setLargeFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 13: 
message.setSmallNegativeFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 14: 
message.setInfDouble(ProtobufInputStream.readDouble(is,cursor));
break;
case 15: 
message.setNegInfDouble(ProtobufInputStream.readDouble(is,cursor));
break;
case 16: 
message.setNanDouble(ProtobufInputStream.readDouble(is,cursor));
break;
case 17: 
message.setInfFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 18: 
message.setNegInfFloat(ProtobufInputStream.readFloat(is,cursor));
break;
case 19: 
message.setNanFloat(ProtobufInputStream.readFloat(is,cursor));
break;
}
}
}
}
public static class OneString {
private String data;
private boolean hasData;
public boolean hasData() {
return hasData;
}
public String getData() {
return data;
}
public void setData(String Data) {
this.data = Data;
this.hasData = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("OneString [");
a_.append(" data=" + data);
a_.append("]");
}
}
public static class OneStringSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.OneString message) {
try {
int totalSize = 0;
byte[] dataBuffer = null;
if (message.hasData()) {
dataBuffer = message.getData().getBytes("UTF-8");
totalSize += dataBuffer.length;
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(dataBuffer.length);
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasData()) {
position = ProtobufOutputStream.writeString(1,dataBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.OneString message, java.io.OutputStream os) {
try {
if (message.hasData()) {
ProtobufOutputStream.writeString(1, message.getData(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.OneString parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.OneString parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.OneString parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.OneString message = new protobuf_gcless_unittest.UnittestProto.OneString();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setData(ProtobufInputStream.readString(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.OneString parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.OneString parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.OneString parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.OneString message = new protobuf_gcless_unittest.UnittestProto.OneString();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setData(ProtobufInputStream.readString(is,cursor));
break;
}
}
}
}
public static class OneBytes {
private byte[] data;
private boolean hasData;
public boolean hasData() {
return hasData;
}
public byte[] getData() {
return data;
}
public void setData(byte[] Data) {
this.data = Data;
this.hasData = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("OneBytes [");
a_.append(" data=" + data);
a_.append("]");
}
}
public static class OneBytesSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.OneBytes message) {
try {
int totalSize = 0;
if (message.hasData()) {
totalSize += message.getData().length;
totalSize += ProtobufOutputStream.computeTagSize(1);
totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getData().length);
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasData()) {
position = ProtobufOutputStream.writeBytes(1, message.getData(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.OneBytes message, java.io.OutputStream os) {
try {
if (message.hasData()) {
ProtobufOutputStream.writeBytes(1, message.getData(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.OneBytes parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.OneBytes parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.OneBytes parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.OneBytes message = new protobuf_gcless_unittest.UnittestProto.OneBytes();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 1: 
message.setData(ProtobufInputStream.readBytes(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.OneBytes parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.OneBytes parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.OneBytes parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.OneBytes message = new protobuf_gcless_unittest.UnittestProto.OneBytes();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 1: 
message.setData(ProtobufInputStream.readBytes(is,cursor));
break;
}
}
}
}
public static class TestPackedTypes {
private java.util.List<Integer> packedInt32;
private boolean hasPackedInt32;
public boolean hasPackedInt32() {
return hasPackedInt32;
}
public java.util.List<Integer> getPackedInt32() {
return packedInt32;
}
public void setPackedInt32(java.util.List<Integer> PackedInt32) {
this.packedInt32 = PackedInt32;
this.hasPackedInt32 = true;
}
private java.util.List<Long> packedInt64;
private boolean hasPackedInt64;
public boolean hasPackedInt64() {
return hasPackedInt64;
}
public java.util.List<Long> getPackedInt64() {
return packedInt64;
}
public void setPackedInt64(java.util.List<Long> PackedInt64) {
this.packedInt64 = PackedInt64;
this.hasPackedInt64 = true;
}
private java.util.List<Integer> packedUint32;
private boolean hasPackedUint32;
public boolean hasPackedUint32() {
return hasPackedUint32;
}
public java.util.List<Integer> getPackedUint32() {
return packedUint32;
}
public void setPackedUint32(java.util.List<Integer> PackedUint32) {
this.packedUint32 = PackedUint32;
this.hasPackedUint32 = true;
}
private java.util.List<Long> packedUint64;
private boolean hasPackedUint64;
public boolean hasPackedUint64() {
return hasPackedUint64;
}
public java.util.List<Long> getPackedUint64() {
return packedUint64;
}
public void setPackedUint64(java.util.List<Long> PackedUint64) {
this.packedUint64 = PackedUint64;
this.hasPackedUint64 = true;
}
private java.util.List<Integer> packedSint32;
private boolean hasPackedSint32;
public boolean hasPackedSint32() {
return hasPackedSint32;
}
public java.util.List<Integer> getPackedSint32() {
return packedSint32;
}
public void setPackedSint32(java.util.List<Integer> PackedSint32) {
this.packedSint32 = PackedSint32;
this.hasPackedSint32 = true;
}
private java.util.List<Long> packedSint64;
private boolean hasPackedSint64;
public boolean hasPackedSint64() {
return hasPackedSint64;
}
public java.util.List<Long> getPackedSint64() {
return packedSint64;
}
public void setPackedSint64(java.util.List<Long> PackedSint64) {
this.packedSint64 = PackedSint64;
this.hasPackedSint64 = true;
}
private java.util.List<Integer> packedFixed32;
private boolean hasPackedFixed32;
public boolean hasPackedFixed32() {
return hasPackedFixed32;
}
public java.util.List<Integer> getPackedFixed32() {
return packedFixed32;
}
public void setPackedFixed32(java.util.List<Integer> PackedFixed32) {
this.packedFixed32 = PackedFixed32;
this.hasPackedFixed32 = true;
}
private java.util.List<Long> packedFixed64;
private boolean hasPackedFixed64;
public boolean hasPackedFixed64() {
return hasPackedFixed64;
}
public java.util.List<Long> getPackedFixed64() {
return packedFixed64;
}
public void setPackedFixed64(java.util.List<Long> PackedFixed64) {
this.packedFixed64 = PackedFixed64;
this.hasPackedFixed64 = true;
}
private java.util.List<Integer> packedSfixed32;
private boolean hasPackedSfixed32;
public boolean hasPackedSfixed32() {
return hasPackedSfixed32;
}
public java.util.List<Integer> getPackedSfixed32() {
return packedSfixed32;
}
public void setPackedSfixed32(java.util.List<Integer> PackedSfixed32) {
this.packedSfixed32 = PackedSfixed32;
this.hasPackedSfixed32 = true;
}
private java.util.List<Long> packedSfixed64;
private boolean hasPackedSfixed64;
public boolean hasPackedSfixed64() {
return hasPackedSfixed64;
}
public java.util.List<Long> getPackedSfixed64() {
return packedSfixed64;
}
public void setPackedSfixed64(java.util.List<Long> PackedSfixed64) {
this.packedSfixed64 = PackedSfixed64;
this.hasPackedSfixed64 = true;
}
private java.util.List<Float> packedFloat;
private boolean hasPackedFloat;
public boolean hasPackedFloat() {
return hasPackedFloat;
}
public java.util.List<Float> getPackedFloat() {
return packedFloat;
}
public void setPackedFloat(java.util.List<Float> PackedFloat) {
this.packedFloat = PackedFloat;
this.hasPackedFloat = true;
}
private java.util.List<Double> packedDouble;
private boolean hasPackedDouble;
public boolean hasPackedDouble() {
return hasPackedDouble;
}
public java.util.List<Double> getPackedDouble() {
return packedDouble;
}
public void setPackedDouble(java.util.List<Double> PackedDouble) {
this.packedDouble = PackedDouble;
this.hasPackedDouble = true;
}
private java.util.List<Boolean> packedBool;
private boolean hasPackedBool;
public boolean hasPackedBool() {
return hasPackedBool;
}
public java.util.List<Boolean> getPackedBool() {
return packedBool;
}
public void setPackedBool(java.util.List<Boolean> PackedBool) {
this.packedBool = PackedBool;
this.hasPackedBool = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> packedEnum;
private boolean hasPackedEnum;
public boolean hasPackedEnum() {
return hasPackedEnum;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> getPackedEnum() {
return packedEnum;
}
public void setPackedEnum(java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> PackedEnum) {
this.packedEnum = PackedEnum;
this.hasPackedEnum = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestPackedTypes [");
a_.append(" packedInt32=" + packedInt32);
a_.append(",");
a_.append(" packedInt64=" + packedInt64);
a_.append(",");
a_.append(" packedUint32=" + packedUint32);
a_.append(",");
a_.append(" packedUint64=" + packedUint64);
a_.append(",");
a_.append(" packedSint32=" + packedSint32);
a_.append(",");
a_.append(" packedSint64=" + packedSint64);
a_.append(",");
a_.append(" packedFixed32=" + packedFixed32);
a_.append(",");
a_.append(" packedFixed64=" + packedFixed64);
a_.append(",");
a_.append(" packedSfixed32=" + packedSfixed32);
a_.append(",");
a_.append(" packedSfixed64=" + packedSfixed64);
a_.append(",");
a_.append(" packedFloat=" + packedFloat);
a_.append(",");
a_.append(" packedDouble=" + packedDouble);
a_.append(",");
a_.append(" packedBool=" + packedBool);
a_.append(",");
a_.append(" packedEnum=");
if (packedEnum != null ) {
a_.append("[");
for( int i=0;i<packedEnum.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.ForeignEnum cur = packedEnum.get(i);
if( i != 0 ) {
 a_.append(", ");
}
a_.append(cur.toString());
}
a_.append("]");
} else {
a_.append("null");
}
a_.append("]");
}
}
public static class TestPackedTypesSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestPackedTypes message) {
try {
int totalSize = 0;
if (message.hasPackedInt32()) {
for(int i=0;i<message.getPackedInt32().size();i++) {
totalSize += ProtobufOutputStream.computeInt32Size(90, message.getPackedInt32().get(i));
}
}
if (message.hasPackedInt64()) {
for(int i=0;i<message.getPackedInt64().size();i++) {
totalSize += ProtobufOutputStream.computeInt64Size(91, message.getPackedInt64().get(i));
}
}
if (message.hasPackedUint32()) {
for(int i=0;i<message.getPackedUint32().size();i++) {
totalSize += ProtobufOutputStream.computeUint32Size(92, message.getPackedUint32().get(i));
}
}
if (message.hasPackedUint64()) {
for(int i=0;i<message.getPackedUint64().size();i++) {
totalSize += ProtobufOutputStream.computeUint64Size(93, message.getPackedUint64().get(i));
}
}
if (message.hasPackedSint32()) {
for(int i=0;i<message.getPackedSint32().size();i++) {
totalSize += ProtobufOutputStream.computeSint32Size(94, message.getPackedSint32().get(i));
}
}
if (message.hasPackedSint64()) {
for(int i=0;i<message.getPackedSint64().size();i++) {
totalSize += ProtobufOutputStream.computeSint64Size(95, message.getPackedSint64().get(i));
}
}
if (message.hasPackedFixed32()) {
for(int i=0;i<message.getPackedFixed32().size();i++) {
totalSize += ProtobufOutputStream.computeFixed32Size(96, message.getPackedFixed32().get(i));
}
}
if (message.hasPackedFixed64()) {
for(int i=0;i<message.getPackedFixed64().size();i++) {
totalSize += ProtobufOutputStream.computeFixed64Size(97, message.getPackedFixed64().get(i));
}
}
if (message.hasPackedSfixed32()) {
for(int i=0;i<message.getPackedSfixed32().size();i++) {
totalSize += ProtobufOutputStream.computeSfixed32Size(98, message.getPackedSfixed32().get(i));
}
}
if (message.hasPackedSfixed64()) {
for(int i=0;i<message.getPackedSfixed64().size();i++) {
totalSize += ProtobufOutputStream.computeSfixed64Size(99, message.getPackedSfixed64().get(i));
}
}
if (message.hasPackedFloat()) {
for(int i=0;i<message.getPackedFloat().size();i++) {
totalSize += ProtobufOutputStream.computeFloatSize(100, message.getPackedFloat().get(i));
}
}
if (message.hasPackedDouble()) {
for(int i=0;i<message.getPackedDouble().size();i++) {
totalSize += ProtobufOutputStream.computeDoubleSize(101, message.getPackedDouble().get(i));
}
}
if (message.hasPackedBool()) {
for(int i=0;i<message.getPackedBool().size();i++) {
totalSize += ProtobufOutputStream.computeBoolSize(102, message.getPackedBool().get(i));
}
}
byte[] packed_enumBuffer = null;
if (message.hasPackedEnum()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getPackedEnum().size();i++) {
ProtobufOutputStream.writeEnum(103, message.getPackedEnum().get(i).getValue(), baos);
}
packed_enumBuffer = baos.toByteArray();
totalSize += packed_enumBuffer.length;
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasPackedInt32()) {
position = ProtobufOutputStream.writeRepeatedInt32(90, message.getPackedInt32(), result, position);
}
if (message.hasPackedInt64()) {
position = ProtobufOutputStream.writeRepeatedInt64(91, message.getPackedInt64(), result, position);
}
if (message.hasPackedUint32()) {
position = ProtobufOutputStream.writeRepeatedUint32(92, message.getPackedUint32(), result, position);
}
if (message.hasPackedUint64()) {
position = ProtobufOutputStream.writeRepeatedUint64(93, message.getPackedUint64(), result, position);
}
if (message.hasPackedSint32()) {
position = ProtobufOutputStream.writeRepeatedSint32(94, message.getPackedSint32(), result, position);
}
if (message.hasPackedSint64()) {
position = ProtobufOutputStream.writeRepeatedSint64(95, message.getPackedSint64(), result, position);
}
if (message.hasPackedFixed32()) {
position = ProtobufOutputStream.writeRepeatedFixed32(96, message.getPackedFixed32(), result, position);
}
if (message.hasPackedFixed64()) {
position = ProtobufOutputStream.writeRepeatedFixed64(97, message.getPackedFixed64(), result, position);
}
if (message.hasPackedSfixed32()) {
position = ProtobufOutputStream.writeRepeatedSfixed32(98, message.getPackedSfixed32(), result, position);
}
if (message.hasPackedSfixed64()) {
position = ProtobufOutputStream.writeRepeatedSfixed64(99, message.getPackedSfixed64(), result, position);
}
if (message.hasPackedFloat()) {
position = ProtobufOutputStream.writeRepeatedFloat(100, message.getPackedFloat(), result, position);
}
if (message.hasPackedDouble()) {
position = ProtobufOutputStream.writeRepeatedDouble(101, message.getPackedDouble(), result, position);
}
if (message.hasPackedBool()) {
position = ProtobufOutputStream.writeRepeatedBool(102, message.getPackedBool(), result, position);
}
if (message.hasPackedEnum()) {
position = ProtobufOutputStream.writeRawBytes(packed_enumBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestPackedTypes message, java.io.OutputStream os) {
try {
if (message.hasPackedInt32()) {
for( int i=0;i<message.getPackedInt32().size();i++) {
ProtobufOutputStream.writeInt32(90, message.getPackedInt32().get(i), os);
}
}
if (message.hasPackedInt64()) {
for( int i=0;i<message.getPackedInt64().size();i++) {
ProtobufOutputStream.writeInt64(91, message.getPackedInt64().get(i), os);
}
}
if (message.hasPackedUint32()) {
for( int i=0;i<message.getPackedUint32().size();i++) {
ProtobufOutputStream.writeUint32(92, message.getPackedUint32().get(i), os);
}
}
if (message.hasPackedUint64()) {
for( int i=0;i<message.getPackedUint64().size();i++) {
ProtobufOutputStream.writeUint64(93, message.getPackedUint64().get(i), os);
}
}
if (message.hasPackedSint32()) {
for( int i=0;i<message.getPackedSint32().size();i++) {
ProtobufOutputStream.writeSint32(94, message.getPackedSint32().get(i), os);
}
}
if (message.hasPackedSint64()) {
for( int i=0;i<message.getPackedSint64().size();i++) {
ProtobufOutputStream.writeSint64(95, message.getPackedSint64().get(i), os);
}
}
if (message.hasPackedFixed32()) {
for( int i=0;i<message.getPackedFixed32().size();i++) {
ProtobufOutputStream.writeFixed32(96, message.getPackedFixed32().get(i), os);
}
}
if (message.hasPackedFixed64()) {
for( int i=0;i<message.getPackedFixed64().size();i++) {
ProtobufOutputStream.writeFixed64(97, message.getPackedFixed64().get(i), os);
}
}
if (message.hasPackedSfixed32()) {
for( int i=0;i<message.getPackedSfixed32().size();i++) {
ProtobufOutputStream.writeSfixed32(98, message.getPackedSfixed32().get(i), os);
}
}
if (message.hasPackedSfixed64()) {
for( int i=0;i<message.getPackedSfixed64().size();i++) {
ProtobufOutputStream.writeSfixed64(99, message.getPackedSfixed64().get(i), os);
}
}
if (message.hasPackedFloat()) {
for( int i=0;i<message.getPackedFloat().size();i++) {
ProtobufOutputStream.writeFloat(100, message.getPackedFloat().get(i), os);
}
}
if (message.hasPackedDouble()) {
for( int i=0;i<message.getPackedDouble().size();i++) {
ProtobufOutputStream.writeDouble(101, message.getPackedDouble().get(i), os);
}
}
if (message.hasPackedBool()) {
for( int i=0;i<message.getPackedBool().size();i++) {
ProtobufOutputStream.writeBool(102, message.getPackedBool().get(i), os);
}
}
if (message.hasPackedEnum()) {
for( int i=0;i<message.getPackedEnum().size();i++) {
ProtobufOutputStream.writeEnum(103, message.getPackedEnum().get(i).getValue(), os);
}
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedTypes parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedTypes parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedTypes parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestPackedTypes message = new protobuf_gcless_unittest.UnittestProto.TestPackedTypes();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 90: 
if( message.getPackedInt32() == null || message.getPackedInt32().isEmpty()) {
message.setPackedInt32(new java.util.ArrayList<Integer>());
}
message.getPackedInt32().add(ProtobufInputStream.readInt32(data,cursor));
break;
case 91: 
if( message.getPackedInt64() == null || message.getPackedInt64().isEmpty()) {
message.setPackedInt64(new java.util.ArrayList<Long>());
}
message.getPackedInt64().add(ProtobufInputStream.readInt64(data,cursor));
break;
case 92: 
if( message.getPackedUint32() == null || message.getPackedUint32().isEmpty()) {
message.setPackedUint32(new java.util.ArrayList<Integer>());
}
message.getPackedUint32().add(ProtobufInputStream.readUint32(data,cursor));
break;
case 93: 
if( message.getPackedUint64() == null || message.getPackedUint64().isEmpty()) {
message.setPackedUint64(new java.util.ArrayList<Long>());
}
message.getPackedUint64().add(ProtobufInputStream.readUint64(data,cursor));
break;
case 94: 
if( message.getPackedSint32() == null || message.getPackedSint32().isEmpty()) {
message.setPackedSint32(new java.util.ArrayList<Integer>());
}
message.getPackedSint32().add(ProtobufInputStream.readSint32(data,cursor));
break;
case 95: 
if( message.getPackedSint64() == null || message.getPackedSint64().isEmpty()) {
message.setPackedSint64(new java.util.ArrayList<Long>());
}
message.getPackedSint64().add(ProtobufInputStream.readSint64(data,cursor));
break;
case 96: 
if( message.getPackedFixed32() == null || message.getPackedFixed32().isEmpty()) {
message.setPackedFixed32(new java.util.ArrayList<Integer>());
}
message.getPackedFixed32().add(ProtobufInputStream.readFixed32(data,cursor));
break;
case 97: 
if( message.getPackedFixed64() == null || message.getPackedFixed64().isEmpty()) {
message.setPackedFixed64(new java.util.ArrayList<Long>());
}
message.getPackedFixed64().add(ProtobufInputStream.readFixed64(data,cursor));
break;
case 98: 
if( message.getPackedSfixed32() == null || message.getPackedSfixed32().isEmpty()) {
message.setPackedSfixed32(new java.util.ArrayList<Integer>());
}
message.getPackedSfixed32().add(ProtobufInputStream.readSfixed32(data,cursor));
break;
case 99: 
if( message.getPackedSfixed64() == null || message.getPackedSfixed64().isEmpty()) {
message.setPackedSfixed64(new java.util.ArrayList<Long>());
}
message.getPackedSfixed64().add(ProtobufInputStream.readSfixed64(data,cursor));
break;
case 100: 
if( message.getPackedFloat() == null || message.getPackedFloat().isEmpty()) {
message.setPackedFloat(new java.util.ArrayList<Float>());
}
message.getPackedFloat().add(ProtobufInputStream.readFloat(data,cursor));
break;
case 101: 
if( message.getPackedDouble() == null || message.getPackedDouble().isEmpty()) {
message.setPackedDouble(new java.util.ArrayList<Double>());
}
message.getPackedDouble().add(ProtobufInputStream.readDouble(data,cursor));
break;
case 102: 
if( message.getPackedBool() == null || message.getPackedBool().isEmpty()) {
message.setPackedBool(new java.util.ArrayList<Boolean>());
}
message.getPackedBool().add(ProtobufInputStream.readBool(data,cursor));
break;
case 103: 
if( message.getPackedEnum() == null || message.getPackedEnum().isEmpty()) {
message.setPackedEnum(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignEnum>());
}
message.getPackedEnum().add(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedTypes parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedTypes parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedTypes parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestPackedTypes message = new protobuf_gcless_unittest.UnittestProto.TestPackedTypes();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 90: 
if( message.getPackedInt32() == null || message.getPackedInt32().isEmpty()) {
message.setPackedInt32(new java.util.ArrayList<Integer>());
}
message.getPackedInt32().add(ProtobufInputStream.readInt32(is,cursor));
break;
case 91: 
if( message.getPackedInt64() == null || message.getPackedInt64().isEmpty()) {
message.setPackedInt64(new java.util.ArrayList<Long>());
}
message.getPackedInt64().add(ProtobufInputStream.readInt64(is,cursor));
break;
case 92: 
if( message.getPackedUint32() == null || message.getPackedUint32().isEmpty()) {
message.setPackedUint32(new java.util.ArrayList<Integer>());
}
message.getPackedUint32().add(ProtobufInputStream.readUint32(is,cursor));
break;
case 93: 
if( message.getPackedUint64() == null || message.getPackedUint64().isEmpty()) {
message.setPackedUint64(new java.util.ArrayList<Long>());
}
message.getPackedUint64().add(ProtobufInputStream.readUint64(is,cursor));
break;
case 94: 
if( message.getPackedSint32() == null || message.getPackedSint32().isEmpty()) {
message.setPackedSint32(new java.util.ArrayList<Integer>());
}
message.getPackedSint32().add(ProtobufInputStream.readSint32(is,cursor));
break;
case 95: 
if( message.getPackedSint64() == null || message.getPackedSint64().isEmpty()) {
message.setPackedSint64(new java.util.ArrayList<Long>());
}
message.getPackedSint64().add(ProtobufInputStream.readSint64(is,cursor));
break;
case 96: 
if( message.getPackedFixed32() == null || message.getPackedFixed32().isEmpty()) {
message.setPackedFixed32(new java.util.ArrayList<Integer>());
}
message.getPackedFixed32().add(ProtobufInputStream.readFixed32(is,cursor));
break;
case 97: 
if( message.getPackedFixed64() == null || message.getPackedFixed64().isEmpty()) {
message.setPackedFixed64(new java.util.ArrayList<Long>());
}
message.getPackedFixed64().add(ProtobufInputStream.readFixed64(is,cursor));
break;
case 98: 
if( message.getPackedSfixed32() == null || message.getPackedSfixed32().isEmpty()) {
message.setPackedSfixed32(new java.util.ArrayList<Integer>());
}
message.getPackedSfixed32().add(ProtobufInputStream.readSfixed32(is,cursor));
break;
case 99: 
if( message.getPackedSfixed64() == null || message.getPackedSfixed64().isEmpty()) {
message.setPackedSfixed64(new java.util.ArrayList<Long>());
}
message.getPackedSfixed64().add(ProtobufInputStream.readSfixed64(is,cursor));
break;
case 100: 
if( message.getPackedFloat() == null || message.getPackedFloat().isEmpty()) {
message.setPackedFloat(new java.util.ArrayList<Float>());
}
message.getPackedFloat().add(ProtobufInputStream.readFloat(is,cursor));
break;
case 101: 
if( message.getPackedDouble() == null || message.getPackedDouble().isEmpty()) {
message.setPackedDouble(new java.util.ArrayList<Double>());
}
message.getPackedDouble().add(ProtobufInputStream.readDouble(is,cursor));
break;
case 102: 
if( message.getPackedBool() == null || message.getPackedBool().isEmpty()) {
message.setPackedBool(new java.util.ArrayList<Boolean>());
}
message.getPackedBool().add(ProtobufInputStream.readBool(is,cursor));
break;
case 103: 
if( message.getPackedEnum() == null || message.getPackedEnum().isEmpty()) {
message.setPackedEnum(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignEnum>());
}
message.getPackedEnum().add(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
}
}
}
}
public static class TestUnpackedTypes {
private java.util.List<Integer> unpackedInt32;
private boolean hasUnpackedInt32;
public boolean hasUnpackedInt32() {
return hasUnpackedInt32;
}
public java.util.List<Integer> getUnpackedInt32() {
return unpackedInt32;
}
public void setUnpackedInt32(java.util.List<Integer> UnpackedInt32) {
this.unpackedInt32 = UnpackedInt32;
this.hasUnpackedInt32 = true;
}
private java.util.List<Long> unpackedInt64;
private boolean hasUnpackedInt64;
public boolean hasUnpackedInt64() {
return hasUnpackedInt64;
}
public java.util.List<Long> getUnpackedInt64() {
return unpackedInt64;
}
public void setUnpackedInt64(java.util.List<Long> UnpackedInt64) {
this.unpackedInt64 = UnpackedInt64;
this.hasUnpackedInt64 = true;
}
private java.util.List<Integer> unpackedUint32;
private boolean hasUnpackedUint32;
public boolean hasUnpackedUint32() {
return hasUnpackedUint32;
}
public java.util.List<Integer> getUnpackedUint32() {
return unpackedUint32;
}
public void setUnpackedUint32(java.util.List<Integer> UnpackedUint32) {
this.unpackedUint32 = UnpackedUint32;
this.hasUnpackedUint32 = true;
}
private java.util.List<Long> unpackedUint64;
private boolean hasUnpackedUint64;
public boolean hasUnpackedUint64() {
return hasUnpackedUint64;
}
public java.util.List<Long> getUnpackedUint64() {
return unpackedUint64;
}
public void setUnpackedUint64(java.util.List<Long> UnpackedUint64) {
this.unpackedUint64 = UnpackedUint64;
this.hasUnpackedUint64 = true;
}
private java.util.List<Integer> unpackedSint32;
private boolean hasUnpackedSint32;
public boolean hasUnpackedSint32() {
return hasUnpackedSint32;
}
public java.util.List<Integer> getUnpackedSint32() {
return unpackedSint32;
}
public void setUnpackedSint32(java.util.List<Integer> UnpackedSint32) {
this.unpackedSint32 = UnpackedSint32;
this.hasUnpackedSint32 = true;
}
private java.util.List<Long> unpackedSint64;
private boolean hasUnpackedSint64;
public boolean hasUnpackedSint64() {
return hasUnpackedSint64;
}
public java.util.List<Long> getUnpackedSint64() {
return unpackedSint64;
}
public void setUnpackedSint64(java.util.List<Long> UnpackedSint64) {
this.unpackedSint64 = UnpackedSint64;
this.hasUnpackedSint64 = true;
}
private java.util.List<Integer> unpackedFixed32;
private boolean hasUnpackedFixed32;
public boolean hasUnpackedFixed32() {
return hasUnpackedFixed32;
}
public java.util.List<Integer> getUnpackedFixed32() {
return unpackedFixed32;
}
public void setUnpackedFixed32(java.util.List<Integer> UnpackedFixed32) {
this.unpackedFixed32 = UnpackedFixed32;
this.hasUnpackedFixed32 = true;
}
private java.util.List<Long> unpackedFixed64;
private boolean hasUnpackedFixed64;
public boolean hasUnpackedFixed64() {
return hasUnpackedFixed64;
}
public java.util.List<Long> getUnpackedFixed64() {
return unpackedFixed64;
}
public void setUnpackedFixed64(java.util.List<Long> UnpackedFixed64) {
this.unpackedFixed64 = UnpackedFixed64;
this.hasUnpackedFixed64 = true;
}
private java.util.List<Integer> unpackedSfixed32;
private boolean hasUnpackedSfixed32;
public boolean hasUnpackedSfixed32() {
return hasUnpackedSfixed32;
}
public java.util.List<Integer> getUnpackedSfixed32() {
return unpackedSfixed32;
}
public void setUnpackedSfixed32(java.util.List<Integer> UnpackedSfixed32) {
this.unpackedSfixed32 = UnpackedSfixed32;
this.hasUnpackedSfixed32 = true;
}
private java.util.List<Long> unpackedSfixed64;
private boolean hasUnpackedSfixed64;
public boolean hasUnpackedSfixed64() {
return hasUnpackedSfixed64;
}
public java.util.List<Long> getUnpackedSfixed64() {
return unpackedSfixed64;
}
public void setUnpackedSfixed64(java.util.List<Long> UnpackedSfixed64) {
this.unpackedSfixed64 = UnpackedSfixed64;
this.hasUnpackedSfixed64 = true;
}
private java.util.List<Float> unpackedFloat;
private boolean hasUnpackedFloat;
public boolean hasUnpackedFloat() {
return hasUnpackedFloat;
}
public java.util.List<Float> getUnpackedFloat() {
return unpackedFloat;
}
public void setUnpackedFloat(java.util.List<Float> UnpackedFloat) {
this.unpackedFloat = UnpackedFloat;
this.hasUnpackedFloat = true;
}
private java.util.List<Double> unpackedDouble;
private boolean hasUnpackedDouble;
public boolean hasUnpackedDouble() {
return hasUnpackedDouble;
}
public java.util.List<Double> getUnpackedDouble() {
return unpackedDouble;
}
public void setUnpackedDouble(java.util.List<Double> UnpackedDouble) {
this.unpackedDouble = UnpackedDouble;
this.hasUnpackedDouble = true;
}
private java.util.List<Boolean> unpackedBool;
private boolean hasUnpackedBool;
public boolean hasUnpackedBool() {
return hasUnpackedBool;
}
public java.util.List<Boolean> getUnpackedBool() {
return unpackedBool;
}
public void setUnpackedBool(java.util.List<Boolean> UnpackedBool) {
this.unpackedBool = UnpackedBool;
this.hasUnpackedBool = true;
}
private java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> unpackedEnum;
private boolean hasUnpackedEnum;
public boolean hasUnpackedEnum() {
return hasUnpackedEnum;
}
public java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> getUnpackedEnum() {
return unpackedEnum;
}
public void setUnpackedEnum(java.util.List<protobuf_gcless_unittest.UnittestProto.ForeignEnum> UnpackedEnum) {
this.unpackedEnum = UnpackedEnum;
this.hasUnpackedEnum = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestUnpackedTypes [");
a_.append(" unpackedInt32=" + unpackedInt32);
a_.append(",");
a_.append(" unpackedInt64=" + unpackedInt64);
a_.append(",");
a_.append(" unpackedUint32=" + unpackedUint32);
a_.append(",");
a_.append(" unpackedUint64=" + unpackedUint64);
a_.append(",");
a_.append(" unpackedSint32=" + unpackedSint32);
a_.append(",");
a_.append(" unpackedSint64=" + unpackedSint64);
a_.append(",");
a_.append(" unpackedFixed32=" + unpackedFixed32);
a_.append(",");
a_.append(" unpackedFixed64=" + unpackedFixed64);
a_.append(",");
a_.append(" unpackedSfixed32=" + unpackedSfixed32);
a_.append(",");
a_.append(" unpackedSfixed64=" + unpackedSfixed64);
a_.append(",");
a_.append(" unpackedFloat=" + unpackedFloat);
a_.append(",");
a_.append(" unpackedDouble=" + unpackedDouble);
a_.append(",");
a_.append(" unpackedBool=" + unpackedBool);
a_.append(",");
a_.append(" unpackedEnum=");
if (unpackedEnum != null ) {
a_.append("[");
for( int i=0;i<unpackedEnum.size();i++ ) {
protobuf_gcless_unittest.UnittestProto.ForeignEnum cur = unpackedEnum.get(i);
if( i != 0 ) {
 a_.append(", ");
}
a_.append(cur.toString());
}
a_.append("]");
} else {
a_.append("null");
}
a_.append("]");
}
}
public static class TestUnpackedTypesSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes message) {
try {
int totalSize = 0;
if (message.hasUnpackedInt32()) {
for(int i=0;i<message.getUnpackedInt32().size();i++) {
totalSize += ProtobufOutputStream.computeInt32Size(90, message.getUnpackedInt32().get(i));
}
}
if (message.hasUnpackedInt64()) {
for(int i=0;i<message.getUnpackedInt64().size();i++) {
totalSize += ProtobufOutputStream.computeInt64Size(91, message.getUnpackedInt64().get(i));
}
}
if (message.hasUnpackedUint32()) {
for(int i=0;i<message.getUnpackedUint32().size();i++) {
totalSize += ProtobufOutputStream.computeUint32Size(92, message.getUnpackedUint32().get(i));
}
}
if (message.hasUnpackedUint64()) {
for(int i=0;i<message.getUnpackedUint64().size();i++) {
totalSize += ProtobufOutputStream.computeUint64Size(93, message.getUnpackedUint64().get(i));
}
}
if (message.hasUnpackedSint32()) {
for(int i=0;i<message.getUnpackedSint32().size();i++) {
totalSize += ProtobufOutputStream.computeSint32Size(94, message.getUnpackedSint32().get(i));
}
}
if (message.hasUnpackedSint64()) {
for(int i=0;i<message.getUnpackedSint64().size();i++) {
totalSize += ProtobufOutputStream.computeSint64Size(95, message.getUnpackedSint64().get(i));
}
}
if (message.hasUnpackedFixed32()) {
for(int i=0;i<message.getUnpackedFixed32().size();i++) {
totalSize += ProtobufOutputStream.computeFixed32Size(96, message.getUnpackedFixed32().get(i));
}
}
if (message.hasUnpackedFixed64()) {
for(int i=0;i<message.getUnpackedFixed64().size();i++) {
totalSize += ProtobufOutputStream.computeFixed64Size(97, message.getUnpackedFixed64().get(i));
}
}
if (message.hasUnpackedSfixed32()) {
for(int i=0;i<message.getUnpackedSfixed32().size();i++) {
totalSize += ProtobufOutputStream.computeSfixed32Size(98, message.getUnpackedSfixed32().get(i));
}
}
if (message.hasUnpackedSfixed64()) {
for(int i=0;i<message.getUnpackedSfixed64().size();i++) {
totalSize += ProtobufOutputStream.computeSfixed64Size(99, message.getUnpackedSfixed64().get(i));
}
}
if (message.hasUnpackedFloat()) {
for(int i=0;i<message.getUnpackedFloat().size();i++) {
totalSize += ProtobufOutputStream.computeFloatSize(100, message.getUnpackedFloat().get(i));
}
}
if (message.hasUnpackedDouble()) {
for(int i=0;i<message.getUnpackedDouble().size();i++) {
totalSize += ProtobufOutputStream.computeDoubleSize(101, message.getUnpackedDouble().get(i));
}
}
if (message.hasUnpackedBool()) {
for(int i=0;i<message.getUnpackedBool().size();i++) {
totalSize += ProtobufOutputStream.computeBoolSize(102, message.getUnpackedBool().get(i));
}
}
byte[] unpacked_enumBuffer = null;
if (message.hasUnpackedEnum()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getUnpackedEnum().size();i++) {
ProtobufOutputStream.writeEnum(103, message.getUnpackedEnum().get(i).getValue(), baos);
}
unpacked_enumBuffer = baos.toByteArray();
totalSize += unpacked_enumBuffer.length;
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasUnpackedInt32()) {
position = ProtobufOutputStream.writeRepeatedInt32(90, message.getUnpackedInt32(), result, position);
}
if (message.hasUnpackedInt64()) {
position = ProtobufOutputStream.writeRepeatedInt64(91, message.getUnpackedInt64(), result, position);
}
if (message.hasUnpackedUint32()) {
position = ProtobufOutputStream.writeRepeatedUint32(92, message.getUnpackedUint32(), result, position);
}
if (message.hasUnpackedUint64()) {
position = ProtobufOutputStream.writeRepeatedUint64(93, message.getUnpackedUint64(), result, position);
}
if (message.hasUnpackedSint32()) {
position = ProtobufOutputStream.writeRepeatedSint32(94, message.getUnpackedSint32(), result, position);
}
if (message.hasUnpackedSint64()) {
position = ProtobufOutputStream.writeRepeatedSint64(95, message.getUnpackedSint64(), result, position);
}
if (message.hasUnpackedFixed32()) {
position = ProtobufOutputStream.writeRepeatedFixed32(96, message.getUnpackedFixed32(), result, position);
}
if (message.hasUnpackedFixed64()) {
position = ProtobufOutputStream.writeRepeatedFixed64(97, message.getUnpackedFixed64(), result, position);
}
if (message.hasUnpackedSfixed32()) {
position = ProtobufOutputStream.writeRepeatedSfixed32(98, message.getUnpackedSfixed32(), result, position);
}
if (message.hasUnpackedSfixed64()) {
position = ProtobufOutputStream.writeRepeatedSfixed64(99, message.getUnpackedSfixed64(), result, position);
}
if (message.hasUnpackedFloat()) {
position = ProtobufOutputStream.writeRepeatedFloat(100, message.getUnpackedFloat(), result, position);
}
if (message.hasUnpackedDouble()) {
position = ProtobufOutputStream.writeRepeatedDouble(101, message.getUnpackedDouble(), result, position);
}
if (message.hasUnpackedBool()) {
position = ProtobufOutputStream.writeRepeatedBool(102, message.getUnpackedBool(), result, position);
}
if (message.hasUnpackedEnum()) {
position = ProtobufOutputStream.writeRawBytes(unpacked_enumBuffer, result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes message, java.io.OutputStream os) {
try {
if (message.hasUnpackedInt32()) {
for( int i=0;i<message.getUnpackedInt32().size();i++) {
ProtobufOutputStream.writeInt32(90, message.getUnpackedInt32().get(i), os);
}
}
if (message.hasUnpackedInt64()) {
for( int i=0;i<message.getUnpackedInt64().size();i++) {
ProtobufOutputStream.writeInt64(91, message.getUnpackedInt64().get(i), os);
}
}
if (message.hasUnpackedUint32()) {
for( int i=0;i<message.getUnpackedUint32().size();i++) {
ProtobufOutputStream.writeUint32(92, message.getUnpackedUint32().get(i), os);
}
}
if (message.hasUnpackedUint64()) {
for( int i=0;i<message.getUnpackedUint64().size();i++) {
ProtobufOutputStream.writeUint64(93, message.getUnpackedUint64().get(i), os);
}
}
if (message.hasUnpackedSint32()) {
for( int i=0;i<message.getUnpackedSint32().size();i++) {
ProtobufOutputStream.writeSint32(94, message.getUnpackedSint32().get(i), os);
}
}
if (message.hasUnpackedSint64()) {
for( int i=0;i<message.getUnpackedSint64().size();i++) {
ProtobufOutputStream.writeSint64(95, message.getUnpackedSint64().get(i), os);
}
}
if (message.hasUnpackedFixed32()) {
for( int i=0;i<message.getUnpackedFixed32().size();i++) {
ProtobufOutputStream.writeFixed32(96, message.getUnpackedFixed32().get(i), os);
}
}
if (message.hasUnpackedFixed64()) {
for( int i=0;i<message.getUnpackedFixed64().size();i++) {
ProtobufOutputStream.writeFixed64(97, message.getUnpackedFixed64().get(i), os);
}
}
if (message.hasUnpackedSfixed32()) {
for( int i=0;i<message.getUnpackedSfixed32().size();i++) {
ProtobufOutputStream.writeSfixed32(98, message.getUnpackedSfixed32().get(i), os);
}
}
if (message.hasUnpackedSfixed64()) {
for( int i=0;i<message.getUnpackedSfixed64().size();i++) {
ProtobufOutputStream.writeSfixed64(99, message.getUnpackedSfixed64().get(i), os);
}
}
if (message.hasUnpackedFloat()) {
for( int i=0;i<message.getUnpackedFloat().size();i++) {
ProtobufOutputStream.writeFloat(100, message.getUnpackedFloat().get(i), os);
}
}
if (message.hasUnpackedDouble()) {
for( int i=0;i<message.getUnpackedDouble().size();i++) {
ProtobufOutputStream.writeDouble(101, message.getUnpackedDouble().get(i), os);
}
}
if (message.hasUnpackedBool()) {
for( int i=0;i<message.getUnpackedBool().size();i++) {
ProtobufOutputStream.writeBool(102, message.getUnpackedBool().get(i), os);
}
}
if (message.hasUnpackedEnum()) {
for( int i=0;i<message.getUnpackedEnum().size();i++) {
ProtobufOutputStream.writeEnum(103, message.getUnpackedEnum().get(i).getValue(), os);
}
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes message = new protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 90: 
if( message.getUnpackedInt32() == null || message.getUnpackedInt32().isEmpty()) {
message.setUnpackedInt32(new java.util.ArrayList<Integer>());
}
message.getUnpackedInt32().add(ProtobufInputStream.readInt32(data,cursor));
break;
case 91: 
if( message.getUnpackedInt64() == null || message.getUnpackedInt64().isEmpty()) {
message.setUnpackedInt64(new java.util.ArrayList<Long>());
}
message.getUnpackedInt64().add(ProtobufInputStream.readInt64(data,cursor));
break;
case 92: 
if( message.getUnpackedUint32() == null || message.getUnpackedUint32().isEmpty()) {
message.setUnpackedUint32(new java.util.ArrayList<Integer>());
}
message.getUnpackedUint32().add(ProtobufInputStream.readUint32(data,cursor));
break;
case 93: 
if( message.getUnpackedUint64() == null || message.getUnpackedUint64().isEmpty()) {
message.setUnpackedUint64(new java.util.ArrayList<Long>());
}
message.getUnpackedUint64().add(ProtobufInputStream.readUint64(data,cursor));
break;
case 94: 
if( message.getUnpackedSint32() == null || message.getUnpackedSint32().isEmpty()) {
message.setUnpackedSint32(new java.util.ArrayList<Integer>());
}
message.getUnpackedSint32().add(ProtobufInputStream.readSint32(data,cursor));
break;
case 95: 
if( message.getUnpackedSint64() == null || message.getUnpackedSint64().isEmpty()) {
message.setUnpackedSint64(new java.util.ArrayList<Long>());
}
message.getUnpackedSint64().add(ProtobufInputStream.readSint64(data,cursor));
break;
case 96: 
if( message.getUnpackedFixed32() == null || message.getUnpackedFixed32().isEmpty()) {
message.setUnpackedFixed32(new java.util.ArrayList<Integer>());
}
message.getUnpackedFixed32().add(ProtobufInputStream.readFixed32(data,cursor));
break;
case 97: 
if( message.getUnpackedFixed64() == null || message.getUnpackedFixed64().isEmpty()) {
message.setUnpackedFixed64(new java.util.ArrayList<Long>());
}
message.getUnpackedFixed64().add(ProtobufInputStream.readFixed64(data,cursor));
break;
case 98: 
if( message.getUnpackedSfixed32() == null || message.getUnpackedSfixed32().isEmpty()) {
message.setUnpackedSfixed32(new java.util.ArrayList<Integer>());
}
message.getUnpackedSfixed32().add(ProtobufInputStream.readSfixed32(data,cursor));
break;
case 99: 
if( message.getUnpackedSfixed64() == null || message.getUnpackedSfixed64().isEmpty()) {
message.setUnpackedSfixed64(new java.util.ArrayList<Long>());
}
message.getUnpackedSfixed64().add(ProtobufInputStream.readSfixed64(data,cursor));
break;
case 100: 
if( message.getUnpackedFloat() == null || message.getUnpackedFloat().isEmpty()) {
message.setUnpackedFloat(new java.util.ArrayList<Float>());
}
message.getUnpackedFloat().add(ProtobufInputStream.readFloat(data,cursor));
break;
case 101: 
if( message.getUnpackedDouble() == null || message.getUnpackedDouble().isEmpty()) {
message.setUnpackedDouble(new java.util.ArrayList<Double>());
}
message.getUnpackedDouble().add(ProtobufInputStream.readDouble(data,cursor));
break;
case 102: 
if( message.getUnpackedBool() == null || message.getUnpackedBool().isEmpty()) {
message.setUnpackedBool(new java.util.ArrayList<Boolean>());
}
message.getUnpackedBool().add(ProtobufInputStream.readBool(data,cursor));
break;
case 103: 
if( message.getUnpackedEnum() == null || message.getUnpackedEnum().isEmpty()) {
message.setUnpackedEnum(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignEnum>());
}
message.getUnpackedEnum().add(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes message = new protobuf_gcless_unittest.UnittestProto.TestUnpackedTypes();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 90: 
if( message.getUnpackedInt32() == null || message.getUnpackedInt32().isEmpty()) {
message.setUnpackedInt32(new java.util.ArrayList<Integer>());
}
message.getUnpackedInt32().add(ProtobufInputStream.readInt32(is,cursor));
break;
case 91: 
if( message.getUnpackedInt64() == null || message.getUnpackedInt64().isEmpty()) {
message.setUnpackedInt64(new java.util.ArrayList<Long>());
}
message.getUnpackedInt64().add(ProtobufInputStream.readInt64(is,cursor));
break;
case 92: 
if( message.getUnpackedUint32() == null || message.getUnpackedUint32().isEmpty()) {
message.setUnpackedUint32(new java.util.ArrayList<Integer>());
}
message.getUnpackedUint32().add(ProtobufInputStream.readUint32(is,cursor));
break;
case 93: 
if( message.getUnpackedUint64() == null || message.getUnpackedUint64().isEmpty()) {
message.setUnpackedUint64(new java.util.ArrayList<Long>());
}
message.getUnpackedUint64().add(ProtobufInputStream.readUint64(is,cursor));
break;
case 94: 
if( message.getUnpackedSint32() == null || message.getUnpackedSint32().isEmpty()) {
message.setUnpackedSint32(new java.util.ArrayList<Integer>());
}
message.getUnpackedSint32().add(ProtobufInputStream.readSint32(is,cursor));
break;
case 95: 
if( message.getUnpackedSint64() == null || message.getUnpackedSint64().isEmpty()) {
message.setUnpackedSint64(new java.util.ArrayList<Long>());
}
message.getUnpackedSint64().add(ProtobufInputStream.readSint64(is,cursor));
break;
case 96: 
if( message.getUnpackedFixed32() == null || message.getUnpackedFixed32().isEmpty()) {
message.setUnpackedFixed32(new java.util.ArrayList<Integer>());
}
message.getUnpackedFixed32().add(ProtobufInputStream.readFixed32(is,cursor));
break;
case 97: 
if( message.getUnpackedFixed64() == null || message.getUnpackedFixed64().isEmpty()) {
message.setUnpackedFixed64(new java.util.ArrayList<Long>());
}
message.getUnpackedFixed64().add(ProtobufInputStream.readFixed64(is,cursor));
break;
case 98: 
if( message.getUnpackedSfixed32() == null || message.getUnpackedSfixed32().isEmpty()) {
message.setUnpackedSfixed32(new java.util.ArrayList<Integer>());
}
message.getUnpackedSfixed32().add(ProtobufInputStream.readSfixed32(is,cursor));
break;
case 99: 
if( message.getUnpackedSfixed64() == null || message.getUnpackedSfixed64().isEmpty()) {
message.setUnpackedSfixed64(new java.util.ArrayList<Long>());
}
message.getUnpackedSfixed64().add(ProtobufInputStream.readSfixed64(is,cursor));
break;
case 100: 
if( message.getUnpackedFloat() == null || message.getUnpackedFloat().isEmpty()) {
message.setUnpackedFloat(new java.util.ArrayList<Float>());
}
message.getUnpackedFloat().add(ProtobufInputStream.readFloat(is,cursor));
break;
case 101: 
if( message.getUnpackedDouble() == null || message.getUnpackedDouble().isEmpty()) {
message.setUnpackedDouble(new java.util.ArrayList<Double>());
}
message.getUnpackedDouble().add(ProtobufInputStream.readDouble(is,cursor));
break;
case 102: 
if( message.getUnpackedBool() == null || message.getUnpackedBool().isEmpty()) {
message.setUnpackedBool(new java.util.ArrayList<Boolean>());
}
message.getUnpackedBool().add(ProtobufInputStream.readBool(is,cursor));
break;
case 103: 
if( message.getUnpackedEnum() == null || message.getUnpackedEnum().isEmpty()) {
message.setUnpackedEnum(new java.util.ArrayList<protobuf_gcless_unittest.UnittestProto.ForeignEnum>());
}
message.getUnpackedEnum().add(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
}
}
}
}
public static class TestPackedExtensions {
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestPackedExtensions [");
a_.append("]");
}
}
public static class TestPackedExtensionsSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestPackedExtensions message) {
return new byte[0];
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestPackedExtensions message, java.io.OutputStream os) {
return; 
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedExtensions parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedExtensions parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedExtensions parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestPackedExtensions message = new protobuf_gcless_unittest.UnittestProto.TestPackedExtensions();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedExtensions parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedExtensions parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestPackedExtensions parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestPackedExtensions message = new protobuf_gcless_unittest.UnittestProto.TestPackedExtensions();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;}
}
}
}
public static class TestDynamicExtensions {
private int scalarExtension;
private boolean hasScalarExtension;
public boolean hasScalarExtension() {
return hasScalarExtension;
}
public int getScalarExtension() {
return scalarExtension;
}
public void setScalarExtension(int ScalarExtension) {
this.scalarExtension = ScalarExtension;
this.hasScalarExtension = true;
}
private protobuf_gcless_unittest.UnittestProto.ForeignEnum enumExtension;
private boolean hasEnumExtension;
public boolean hasEnumExtension() {
return hasEnumExtension;
}
public protobuf_gcless_unittest.UnittestProto.ForeignEnum getEnumExtension() {
return enumExtension;
}
public void setEnumExtension(protobuf_gcless_unittest.UnittestProto.ForeignEnum EnumExtension) {
this.enumExtension = EnumExtension;
this.hasEnumExtension = true;
}
private protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicEnumType dynamicEnumExtension;
private boolean hasDynamicEnumExtension;
public boolean hasDynamicEnumExtension() {
return hasDynamicEnumExtension;
}
public protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicEnumType getDynamicEnumExtension() {
return dynamicEnumExtension;
}
public void setDynamicEnumExtension(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicEnumType DynamicEnumExtension) {
this.dynamicEnumExtension = DynamicEnumExtension;
this.hasDynamicEnumExtension = true;
}
private protobuf_gcless_unittest.UnittestProto.ForeignMessage messageExtension;
private boolean hasMessageExtension;
public boolean hasMessageExtension() {
return hasMessageExtension;
}
public protobuf_gcless_unittest.UnittestProto.ForeignMessage getMessageExtension() {
return messageExtension;
}
public void setMessageExtension(protobuf_gcless_unittest.UnittestProto.ForeignMessage MessageExtension) {
this.messageExtension = MessageExtension;
this.hasMessageExtension = true;
}
private protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType dynamicMessageExtension;
private boolean hasDynamicMessageExtension;
public boolean hasDynamicMessageExtension() {
return hasDynamicMessageExtension;
}
public protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType getDynamicMessageExtension() {
return dynamicMessageExtension;
}
public void setDynamicMessageExtension(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType DynamicMessageExtension) {
this.dynamicMessageExtension = DynamicMessageExtension;
this.hasDynamicMessageExtension = true;
}
private java.util.List<String> repeatedExtension;
private boolean hasRepeatedExtension;
public boolean hasRepeatedExtension() {
return hasRepeatedExtension;
}
public java.util.List<String> getRepeatedExtension() {
return repeatedExtension;
}
public void setRepeatedExtension(java.util.List<String> RepeatedExtension) {
this.repeatedExtension = RepeatedExtension;
this.hasRepeatedExtension = true;
}
private java.util.List<Integer> packedExtension;
private boolean hasPackedExtension;
public boolean hasPackedExtension() {
return hasPackedExtension;
}
public java.util.List<Integer> getPackedExtension() {
return packedExtension;
}
public void setPackedExtension(java.util.List<Integer> PackedExtension) {
this.packedExtension = PackedExtension;
this.hasPackedExtension = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestDynamicExtensions [");
a_.append(" scalarExtension=" + scalarExtension);
a_.append(",");
a_.append(" enumExtension=");
if ( enumExtension != null ) {
a_.append(enumExtension.toString());
} else {
a_.append("null");
}
a_.append(",");
a_.append(" dynamicEnumExtension=");
if ( dynamicEnumExtension != null ) {
a_.append(dynamicEnumExtension.toString());
} else {
a_.append("null");
}
a_.append(",");
a_.append(" messageExtension=");
if ( messageExtension != null ) {
messageExtension.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" dynamicMessageExtension=");
if ( dynamicMessageExtension != null ) {
dynamicMessageExtension.toString(a_);
} else {
a_.append("null");
}
a_.append(",");
a_.append(" repeatedExtension=" + repeatedExtension);
a_.append(",");
a_.append(" packedExtension=" + packedExtension);
a_.append("]");
}
public static class DynamicMessageType {
private int dynamicField;
private boolean hasDynamicField;
public boolean hasDynamicField() {
return hasDynamicField;
}
public int getDynamicField() {
return dynamicField;
}
public void setDynamicField(int DynamicField) {
this.dynamicField = DynamicField;
this.hasDynamicField = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("DynamicMessageType [");
a_.append(" dynamicField=" + dynamicField);
a_.append("]");
}
}
public static class DynamicMessageTypeSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType message) {
try {
int totalSize = 0;
if (message.hasDynamicField()) {
totalSize += ProtobufOutputStream.computeInt32Size(2100, message.getDynamicField());
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasDynamicField()) {
position = ProtobufOutputStream.writeInt32(2100, message.getDynamicField(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType message, java.io.OutputStream os) {
try {
if (message.hasDynamicField()) {
ProtobufOutputStream.writeInt32(2100, message.getDynamicField(), os);
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType message = new protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 2100: 
message.setDynamicField(ProtobufInputStream.readInt32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType message = new protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 2100: 
message.setDynamicField(ProtobufInputStream.readInt32(is,cursor));
break;
}
}
}
}
public enum DynamicEnumType {
DYNAMIC_FOO(2200),
DYNAMIC_BAR(2201),
DYNAMIC_BAZ(2202),
;
public static DynamicEnumType valueOf(int value) {
switch (value) {
case 2200: return DYNAMIC_FOO;
case 2201: return DYNAMIC_BAR;
case 2202: return DYNAMIC_BAZ;
default: return null;
}
}
private DynamicEnumType(int value) {
this.value = value;
}
private int value;
public int getValue() {
return value;
}
}

}
public static class TestDynamicExtensionsSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions message) {
try {
int totalSize = 0;
if (message.hasScalarExtension()) {
totalSize += ProtobufOutputStream.computeFixed32Size(2000, message.getScalarExtension());
}
if (message.hasEnumExtension()) {
totalSize += ProtobufOutputStream.computeEnumSize(2001, message.getEnumExtension().getValue());
}
if (message.hasDynamicEnumExtension()) {
totalSize += ProtobufOutputStream.computeEnumSize(2002, message.getDynamicEnumExtension().getValue());
}
byte[] message_extensionBuffer = null;
if (message.hasMessageExtension()) {
message_extensionBuffer = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getMessageExtension());
totalSize += ProtobufOutputStream.computeTagSize(2003);
totalSize += ProtobufOutputStream.computeRawVarint32Size(message_extensionBuffer.length);
totalSize += message_extensionBuffer.length;
}
byte[] dynamic_message_extensionBuffer = null;
if (message.hasDynamicMessageExtension()) {
dynamic_message_extensionBuffer = protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageTypeSerializer.serialize(message.getDynamicMessageExtension());
totalSize += ProtobufOutputStream.computeTagSize(2004);
totalSize += ProtobufOutputStream.computeRawVarint32Size(dynamic_message_extensionBuffer.length);
totalSize += dynamic_message_extensionBuffer.length;
}
byte[] repeated_extensionBuffer = null;
if (message.hasRepeatedExtension()) {
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
for( int i=0;i<message.getRepeatedExtension().size();i++) {
ProtobufOutputStream.writeString(2005, message.getRepeatedExtension().get(i), baos);
}
repeated_extensionBuffer = baos.toByteArray();
totalSize += repeated_extensionBuffer.length;
}
if (message.hasPackedExtension()) {
for(int i=0;i<message.getPackedExtension().size();i++) {
totalSize += ProtobufOutputStream.computeSint32Size(2006, message.getPackedExtension().get(i));
}
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasScalarExtension()) {
position = ProtobufOutputStream.writeFixed32(2000, message.getScalarExtension(), result, position);
}
if (message.hasEnumExtension()) {
position = ProtobufOutputStream.writeEnum(2001, message.getEnumExtension().getValue(), result, position);
}
if (message.hasDynamicEnumExtension()) {
position = ProtobufOutputStream.writeEnum(2002, message.getDynamicEnumExtension().getValue(), result, position);
}
if (message.hasMessageExtension()) {
position = ProtobufOutputStream.writeBytes(2003, message_extensionBuffer, result, position);
}
if (message.hasDynamicMessageExtension()) {
position = ProtobufOutputStream.writeBytes(2004, dynamic_message_extensionBuffer, result, position);
}
if (message.hasRepeatedExtension()) {
position = ProtobufOutputStream.writeRawBytes(repeated_extensionBuffer, result, position);
}
if (message.hasPackedExtension()) {
position = ProtobufOutputStream.writeRepeatedSint32(2006, message.getPackedExtension(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions message, java.io.OutputStream os) {
try {
if (message.hasScalarExtension()) {
ProtobufOutputStream.writeFixed32(2000, message.getScalarExtension(), os);
}
if (message.hasEnumExtension()) {
ProtobufOutputStream.writeEnum(2001, message.getEnumExtension().getValue(), os);
}
if (message.hasDynamicEnumExtension()) {
ProtobufOutputStream.writeEnum(2002, message.getDynamicEnumExtension().getValue(), os);
}
if (message.hasMessageExtension()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getMessageExtension());
ProtobufOutputStream.writeMessageTag(2003, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasDynamicMessageExtension()) {
byte[] curMessageData = protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageTypeSerializer.serialize(message.getDynamicMessageExtension());
ProtobufOutputStream.writeMessageTag(2004, os);
ProtobufOutputStream.writeRawVarint32(curMessageData.length, os);
os.write(curMessageData);
}
if (message.hasRepeatedExtension()) {
for( int i=0;i<message.getRepeatedExtension().size();i++) {
ProtobufOutputStream.writeString(2005, message.getRepeatedExtension().get(i), os);
}
}
if (message.hasPackedExtension()) {
for( int i=0;i<message.getPackedExtension().size();i++) {
ProtobufOutputStream.writeSint32(2006, message.getPackedExtension().get(i), os);
}
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions message = new protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 2000: 
message.setScalarExtension(ProtobufInputStream.readFixed32(data,cursor));
break;
case 2001: 
message.setEnumExtension(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 2002: 
message.setDynamicEnumExtension(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicEnumType.valueOf(ProtobufInputStream.readEnum(data,cursor)));
break;
case 2003: 
int lengthMessageExtension = ProtobufInputStream.readRawVarint32(data,cursor);
message.setMessageExtension(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthMessageExtension));
cursor.addToPosition(lengthMessageExtension);
break;
case 2004: 
int lengthDynamicMessageExtension = ProtobufInputStream.readRawVarint32(data,cursor);
message.setDynamicMessageExtension(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageTypeSerializer.parseFrom(data, cursor.getCurrentPosition(), lengthDynamicMessageExtension));
cursor.addToPosition(lengthDynamicMessageExtension);
break;
case 2005: 
if( message.getRepeatedExtension() == null || message.getRepeatedExtension().isEmpty()) {
message.setRepeatedExtension(new java.util.ArrayList<String>());
}
message.getRepeatedExtension().add(ProtobufInputStream.readString(data,cursor));
break;
case 2006: 
if( message.getPackedExtension() == null || message.getPackedExtension().isEmpty()) {
message.setPackedExtension(new java.util.ArrayList<Integer>());
}
message.getPackedExtension().add(ProtobufInputStream.readSint32(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions message = new protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 2000: 
message.setScalarExtension(ProtobufInputStream.readFixed32(is,cursor));
break;
case 2001: 
message.setEnumExtension(protobuf_gcless_unittest.UnittestProto.ForeignEnum.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 2002: 
message.setDynamicEnumExtension(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicEnumType.valueOf(ProtobufInputStream.readEnum(is,cursor)));
break;
case 2003: 
int lengthMessageExtension = ProtobufInputStream.readRawVarint32(is,cursor);
message.setMessageExtension(protobuf_gcless_unittest.UnittestProto.ForeignMessageSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthMessageExtension));
cursor.addToPosition(lengthMessageExtension);
break;
case 2004: 
int lengthDynamicMessageExtension = ProtobufInputStream.readRawVarint32(is,cursor);
message.setDynamicMessageExtension(protobuf_gcless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageTypeSerializer.parseFrom(is, cursor.getCurrentPosition(), lengthDynamicMessageExtension));
cursor.addToPosition(lengthDynamicMessageExtension);
break;
case 2005: 
if( message.getRepeatedExtension() == null || message.getRepeatedExtension().isEmpty()) {
message.setRepeatedExtension(new java.util.ArrayList<String>());
}
message.getRepeatedExtension().add(ProtobufInputStream.readString(is,cursor));
break;
case 2006: 
if( message.getPackedExtension() == null || message.getPackedExtension().isEmpty()) {
message.setPackedExtension(new java.util.ArrayList<Integer>());
}
message.getPackedExtension().add(ProtobufInputStream.readSint32(is,cursor));
break;
}
}
}
}
public static class TestRepeatedScalarDifferentTagSizes {
private java.util.List<Integer> repeatedFixed32;
private boolean hasRepeatedFixed32;
public boolean hasRepeatedFixed32() {
return hasRepeatedFixed32;
}
public java.util.List<Integer> getRepeatedFixed32() {
return repeatedFixed32;
}
public void setRepeatedFixed32(java.util.List<Integer> RepeatedFixed32) {
this.repeatedFixed32 = RepeatedFixed32;
this.hasRepeatedFixed32 = true;
}
private java.util.List<Integer> repeatedInt32;
private boolean hasRepeatedInt32;
public boolean hasRepeatedInt32() {
return hasRepeatedInt32;
}
public java.util.List<Integer> getRepeatedInt32() {
return repeatedInt32;
}
public void setRepeatedInt32(java.util.List<Integer> RepeatedInt32) {
this.repeatedInt32 = RepeatedInt32;
this.hasRepeatedInt32 = true;
}
private java.util.List<Long> repeatedFixed64;
private boolean hasRepeatedFixed64;
public boolean hasRepeatedFixed64() {
return hasRepeatedFixed64;
}
public java.util.List<Long> getRepeatedFixed64() {
return repeatedFixed64;
}
public void setRepeatedFixed64(java.util.List<Long> RepeatedFixed64) {
this.repeatedFixed64 = RepeatedFixed64;
this.hasRepeatedFixed64 = true;
}
private java.util.List<Long> repeatedInt64;
private boolean hasRepeatedInt64;
public boolean hasRepeatedInt64() {
return hasRepeatedInt64;
}
public java.util.List<Long> getRepeatedInt64() {
return repeatedInt64;
}
public void setRepeatedInt64(java.util.List<Long> RepeatedInt64) {
this.repeatedInt64 = RepeatedInt64;
this.hasRepeatedInt64 = true;
}
private java.util.List<Float> repeatedFloat;
private boolean hasRepeatedFloat;
public boolean hasRepeatedFloat() {
return hasRepeatedFloat;
}
public java.util.List<Float> getRepeatedFloat() {
return repeatedFloat;
}
public void setRepeatedFloat(java.util.List<Float> RepeatedFloat) {
this.repeatedFloat = RepeatedFloat;
this.hasRepeatedFloat = true;
}
private java.util.List<Long> repeatedUint64;
private boolean hasRepeatedUint64;
public boolean hasRepeatedUint64() {
return hasRepeatedUint64;
}
public java.util.List<Long> getRepeatedUint64() {
return repeatedUint64;
}
public void setRepeatedUint64(java.util.List<Long> RepeatedUint64) {
this.repeatedUint64 = RepeatedUint64;
this.hasRepeatedUint64 = true;
}
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("TestRepeatedScalarDifferentTagSizes [");
a_.append(" repeatedFixed32=" + repeatedFixed32);
a_.append(",");
a_.append(" repeatedInt32=" + repeatedInt32);
a_.append(",");
a_.append(" repeatedFixed64=" + repeatedFixed64);
a_.append(",");
a_.append(" repeatedInt64=" + repeatedInt64);
a_.append(",");
a_.append(" repeatedFloat=" + repeatedFloat);
a_.append(",");
a_.append(" repeatedUint64=" + repeatedUint64);
a_.append("]");
}
}
public static class TestRepeatedScalarDifferentTagSizesSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes message) {
try {
int totalSize = 0;
if (message.hasRepeatedFixed32()) {
for(int i=0;i<message.getRepeatedFixed32().size();i++) {
totalSize += ProtobufOutputStream.computeFixed32Size(12, message.getRepeatedFixed32().get(i));
}
}
if (message.hasRepeatedInt32()) {
for(int i=0;i<message.getRepeatedInt32().size();i++) {
totalSize += ProtobufOutputStream.computeInt32Size(13, message.getRepeatedInt32().get(i));
}
}
if (message.hasRepeatedFixed64()) {
for(int i=0;i<message.getRepeatedFixed64().size();i++) {
totalSize += ProtobufOutputStream.computeFixed64Size(2046, message.getRepeatedFixed64().get(i));
}
}
if (message.hasRepeatedInt64()) {
for(int i=0;i<message.getRepeatedInt64().size();i++) {
totalSize += ProtobufOutputStream.computeInt64Size(2047, message.getRepeatedInt64().get(i));
}
}
if (message.hasRepeatedFloat()) {
for(int i=0;i<message.getRepeatedFloat().size();i++) {
totalSize += ProtobufOutputStream.computeFloatSize(262142, message.getRepeatedFloat().get(i));
}
}
if (message.hasRepeatedUint64()) {
for(int i=0;i<message.getRepeatedUint64().size();i++) {
totalSize += ProtobufOutputStream.computeUint64Size(262143, message.getRepeatedUint64().get(i));
}
}
final byte[] result = new byte[totalSize];
int position = 0;
if (message.hasRepeatedFixed32()) {
position = ProtobufOutputStream.writeRepeatedFixed32(12, message.getRepeatedFixed32(), result, position);
}
if (message.hasRepeatedInt32()) {
position = ProtobufOutputStream.writeRepeatedInt32(13, message.getRepeatedInt32(), result, position);
}
if (message.hasRepeatedFixed64()) {
position = ProtobufOutputStream.writeRepeatedFixed64(2046, message.getRepeatedFixed64(), result, position);
}
if (message.hasRepeatedInt64()) {
position = ProtobufOutputStream.writeRepeatedInt64(2047, message.getRepeatedInt64(), result, position);
}
if (message.hasRepeatedFloat()) {
position = ProtobufOutputStream.writeRepeatedFloat(262142, message.getRepeatedFloat(), result, position);
}
if (message.hasRepeatedUint64()) {
position = ProtobufOutputStream.writeRepeatedUint64(262143, message.getRepeatedUint64(), result, position);
}
ProtobufOutputStream.checkNoSpaceLeft(result, position);
return result;
} catch (Exception e) {
throw new RuntimeException(e);
}
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes message, java.io.OutputStream os) {
try {
if (message.hasRepeatedFixed32()) {
for( int i=0;i<message.getRepeatedFixed32().size();i++) {
ProtobufOutputStream.writeFixed32(12, message.getRepeatedFixed32().get(i), os);
}
}
if (message.hasRepeatedInt32()) {
for( int i=0;i<message.getRepeatedInt32().size();i++) {
ProtobufOutputStream.writeInt32(13, message.getRepeatedInt32().get(i), os);
}
}
if (message.hasRepeatedFixed64()) {
for( int i=0;i<message.getRepeatedFixed64().size();i++) {
ProtobufOutputStream.writeFixed64(2046, message.getRepeatedFixed64().get(i), os);
}
}
if (message.hasRepeatedInt64()) {
for( int i=0;i<message.getRepeatedInt64().size();i++) {
ProtobufOutputStream.writeInt64(2047, message.getRepeatedInt64().get(i), os);
}
}
if (message.hasRepeatedFloat()) {
for( int i=0;i<message.getRepeatedFloat().size();i++) {
ProtobufOutputStream.writeFloat(262142, message.getRepeatedFloat().get(i), os);
}
}
if (message.hasRepeatedUint64()) {
for( int i=0;i<message.getRepeatedUint64().size();i++) {
ProtobufOutputStream.writeUint64(262143, message.getRepeatedUint64().get(i), os);
}
}
} catch (java.io.IOException e) {
throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
}
}
public static protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes message = new protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
case 12: 
if( message.getRepeatedFixed32() == null || message.getRepeatedFixed32().isEmpty()) {
message.setRepeatedFixed32(new java.util.ArrayList<Integer>());
}
message.getRepeatedFixed32().add(ProtobufInputStream.readFixed32(data,cursor));
break;
case 13: 
if( message.getRepeatedInt32() == null || message.getRepeatedInt32().isEmpty()) {
message.setRepeatedInt32(new java.util.ArrayList<Integer>());
}
message.getRepeatedInt32().add(ProtobufInputStream.readInt32(data,cursor));
break;
case 2046: 
if( message.getRepeatedFixed64() == null || message.getRepeatedFixed64().isEmpty()) {
message.setRepeatedFixed64(new java.util.ArrayList<Long>());
}
message.getRepeatedFixed64().add(ProtobufInputStream.readFixed64(data,cursor));
break;
case 2047: 
if( message.getRepeatedInt64() == null || message.getRepeatedInt64().isEmpty()) {
message.setRepeatedInt64(new java.util.ArrayList<Long>());
}
message.getRepeatedInt64().add(ProtobufInputStream.readInt64(data,cursor));
break;
case 262142: 
if( message.getRepeatedFloat() == null || message.getRepeatedFloat().isEmpty()) {
message.setRepeatedFloat(new java.util.ArrayList<Float>());
}
message.getRepeatedFloat().add(ProtobufInputStream.readFloat(data,cursor));
break;
case 262143: 
if( message.getRepeatedUint64() == null || message.getRepeatedUint64().isEmpty()) {
message.setRepeatedUint64(new java.util.ArrayList<Long>());
}
message.getRepeatedUint64().add(ProtobufInputStream.readUint64(data,cursor));
break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes message = new protobuf_gcless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;case 12: 
if( message.getRepeatedFixed32() == null || message.getRepeatedFixed32().isEmpty()) {
message.setRepeatedFixed32(new java.util.ArrayList<Integer>());
}
message.getRepeatedFixed32().add(ProtobufInputStream.readFixed32(is,cursor));
break;
case 13: 
if( message.getRepeatedInt32() == null || message.getRepeatedInt32().isEmpty()) {
message.setRepeatedInt32(new java.util.ArrayList<Integer>());
}
message.getRepeatedInt32().add(ProtobufInputStream.readInt32(is,cursor));
break;
case 2046: 
if( message.getRepeatedFixed64() == null || message.getRepeatedFixed64().isEmpty()) {
message.setRepeatedFixed64(new java.util.ArrayList<Long>());
}
message.getRepeatedFixed64().add(ProtobufInputStream.readFixed64(is,cursor));
break;
case 2047: 
if( message.getRepeatedInt64() == null || message.getRepeatedInt64().isEmpty()) {
message.setRepeatedInt64(new java.util.ArrayList<Long>());
}
message.getRepeatedInt64().add(ProtobufInputStream.readInt64(is,cursor));
break;
case 262142: 
if( message.getRepeatedFloat() == null || message.getRepeatedFloat().isEmpty()) {
message.setRepeatedFloat(new java.util.ArrayList<Float>());
}
message.getRepeatedFloat().add(ProtobufInputStream.readFloat(is,cursor));
break;
case 262143: 
if( message.getRepeatedUint64() == null || message.getRepeatedUint64().isEmpty()) {
message.setRepeatedUint64(new java.util.ArrayList<Long>());
}
message.getRepeatedUint64().add(ProtobufInputStream.readUint64(is,cursor));
break;
}
}
}
}
public static class FooRequest {
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("FooRequest [");
a_.append("]");
}
}
public static class FooRequestSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.FooRequest message) {
return new byte[0];
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.FooRequest message, java.io.OutputStream os) {
return; 
}
public static protobuf_gcless_unittest.UnittestProto.FooRequest parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.FooRequest parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.FooRequest parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.FooRequest message = new protobuf_gcless_unittest.UnittestProto.FooRequest();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.FooRequest parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.FooRequest parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.FooRequest parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.FooRequest message = new protobuf_gcless_unittest.UnittestProto.FooRequest();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;}
}
}
}
public static class FooResponse {
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("FooResponse [");
a_.append("]");
}
}
public static class FooResponseSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.FooResponse message) {
return new byte[0];
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.FooResponse message, java.io.OutputStream os) {
return; 
}
public static protobuf_gcless_unittest.UnittestProto.FooResponse parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.FooResponse parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.FooResponse parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.FooResponse message = new protobuf_gcless_unittest.UnittestProto.FooResponse();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.FooResponse parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.FooResponse parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.FooResponse parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.FooResponse message = new protobuf_gcless_unittest.UnittestProto.FooResponse();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;}
}
}
}
public static class BarRequest {
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("BarRequest [");
a_.append("]");
}
}
public static class BarRequestSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.BarRequest message) {
return new byte[0];
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.BarRequest message, java.io.OutputStream os) {
return; 
}
public static protobuf_gcless_unittest.UnittestProto.BarRequest parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.BarRequest parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.BarRequest parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.BarRequest message = new protobuf_gcless_unittest.UnittestProto.BarRequest();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.BarRequest parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.BarRequest parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.BarRequest parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.BarRequest message = new protobuf_gcless_unittest.UnittestProto.BarRequest();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;}
}
}
}
public static class BarResponse {
@Override
public String toString() {
java.lang.StringBuilder builder = new java.lang.StringBuilder();
try {
toString(builder);
return builder.toString();
} catch (java.io.IOException e) {
throw new RuntimeException("Unable toString", e);
}
}
public void toString(java.lang.Appendable a_) throws java.io.IOException {
a_.append("BarResponse [");
a_.append("]");
}
}
public static class BarResponseSerializer {
public static byte[] serialize(protobuf_gcless_unittest.UnittestProto.BarResponse message) {
return new byte[0];
}
public static void serialize(protobuf_gcless_unittest.UnittestProto.BarResponse message, java.io.OutputStream os) {
return; 
}
public static protobuf_gcless_unittest.UnittestProto.BarResponse parseFrom(byte[] data) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.BarResponse parseFrom(byte[] data, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(data, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.BarResponse parseFrom(byte[] data, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.BarResponse message = new protobuf_gcless_unittest.UnittestProto.BarResponse();
while(true) {
if (ProtobufInputStream.isAtEnd(data, cursor)) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(data, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, data, cursor);
 break;
}
}
}
public static protobuf_gcless_unittest.UnittestProto.BarResponse parseFrom(java.io.InputStream is) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.BarResponse parseFrom(java.io.InputStream is, int offset, int length) throws java.io.IOException {
CurrentCursor cursor = new CurrentCursor();
cursor.addToPosition(offset);
cursor.setProcessUpToPosition(offset + length);
return parseFrom(is, cursor);
}
public static protobuf_gcless_unittest.UnittestProto.BarResponse parseFrom(java.io.InputStream is, CurrentCursor cursor) throws java.io.IOException {
protobuf_gcless_unittest.UnittestProto.BarResponse message = new protobuf_gcless_unittest.UnittestProto.BarResponse();
while(true) {
if( cursor.getCurrentPosition() == cursor.getProcessUpToPosition() ) {
return message;
}
int varint = ProtobufInputStream.readRawVarint32(is, cursor);
int tag = ProtobufInputStream.getTagFieldNumber(varint);
if (ProtobufInputStream.isAtEnd(cursor)) {
return message;
}
switch(tag) {
case 0: 
return message;
 default: 
 ProtobufInputStream.skipUnknown(varint, is, cursor);
 break;}
}
}
}
}

